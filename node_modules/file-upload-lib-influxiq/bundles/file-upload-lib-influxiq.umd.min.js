!function(e,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports,require("rxjs/operators"),require("@angular/router"),require("@angular/platform-browser"),require("@angular/forms"),require("@angular/cdk/a11y"),require("@angular/cdk/drag-drop"),require("@angular/cdk/portal"),require("@angular/cdk/scrolling"),require("@angular/cdk/stepper"),require("@angular/cdk/table"),require("@angular/cdk/tree"),require("@angular/material/autocomplete"),require("@angular/material/badge"),require("@angular/material/bottom-sheet"),require("@angular/material/button"),require("@angular/material/button-toggle"),require("@angular/material/card"),require("@angular/material/checkbox"),require("@angular/material/chips"),require("@angular/material/stepper"),require("@angular/material/datepicker"),require("@angular/material/dialog"),require("@angular/material/divider"),require("@angular/material/expansion"),require("@angular/material/grid-list"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/list"),require("@angular/material/menu"),require("@angular/material/core"),require("@angular/material/paginator"),require("@angular/material/progress-bar"),require("@angular/material/progress-spinner"),require("@angular/material/radio"),require("@angular/material/select"),require("@angular/material/sidenav"),require("@angular/material/slider"),require("@angular/material/slide-toggle"),require("@angular/material/snack-bar"),require("@angular/material/sort"),require("@angular/material/table"),require("@angular/material/tabs"),require("@angular/material/toolbar"),require("@angular/material/tooltip"),require("@angular/material/tree"),require("@angular/common/http"),require("listing-angular7"),require("@angular/core"),require("ngx-image-cropper")):"function"==typeof define&&define.amd?define("file-upload-lib-influxiq",["exports","rxjs/operators","@angular/router","@angular/platform-browser","@angular/forms","@angular/cdk/a11y","@angular/cdk/drag-drop","@angular/cdk/portal","@angular/cdk/scrolling","@angular/cdk/stepper","@angular/cdk/table","@angular/cdk/tree","@angular/material/autocomplete","@angular/material/badge","@angular/material/bottom-sheet","@angular/material/button","@angular/material/button-toggle","@angular/material/card","@angular/material/checkbox","@angular/material/chips","@angular/material/stepper","@angular/material/datepicker","@angular/material/dialog","@angular/material/divider","@angular/material/expansion","@angular/material/grid-list","@angular/material/icon","@angular/material/input","@angular/material/list","@angular/material/menu","@angular/material/core","@angular/material/paginator","@angular/material/progress-bar","@angular/material/progress-spinner","@angular/material/radio","@angular/material/select","@angular/material/sidenav","@angular/material/slider","@angular/material/slide-toggle","@angular/material/snack-bar","@angular/material/sort","@angular/material/table","@angular/material/tabs","@angular/material/toolbar","@angular/material/tooltip","@angular/material/tree","@angular/common/http","listing-angular7","@angular/core","ngx-image-cropper"],a):a(e["file-upload-lib-influxiq"]={},e.rxjs.operators,e.ng.router,e.ng.platformBrowser,e.ng.forms,e.ng.cdk.a11y,e.ng.cdk["drag-drop"],e.ng.cdk.portal,e.ng.cdk.scrolling,e.ng.cdk.stepper,e.ng.cdk.table,e.ng.cdk.tree,e.ng.material.autocomplete,e.ng.material.badge,e.ng.material["bottom-sheet"],e.ng.material.button,e.ng.material["button-toggle"],e.ng.material.card,e.ng.material.checkbox,e.ng.material.chips,e.ng.material.stepper,e.ng.material.datepicker,e.ng.material.dialog,e.ng.material.divider,e.ng.material.expansion,e.ng.material["grid-list"],e.ng.material.icon,e.ng.material.input,e.ng.material.list,e.ng.material.menu,e.ng.material.core,e.ng.material.paginator,e.ng.material["progress-bar"],e.ng.material["progress-spinner"],e.ng.material.radio,e.ng.material.select,e.ng.material.sidenav,e.ng.material.slider,e.ng.material["slide-toggle"],e.ng.material["snack-bar"],e.ng.material.sort,e.ng.material.table,e.ng.material.tabs,e.ng.material.toolbar,e.ng.material.tooltip,e.ng.material.tree,e.ng.common.http,e.listingAngular7,e.ng.core,e.ngxImageCropper)}(this,function(e,r,a,t,i,n,o,l,s,p,u,c,g,d,m,f,h,b,v,y,x,M,k,w,D,q,C,I,F,U,R,S,B,A,T,z,P,j,E,L,H,O,_,N,$,G,K,V,X,Y){"use strict";var J=(Q.prototype.upload=function(e,a){var t=new FormData;return t.append("file",a.file),t.append("type",a.type),t.append("path",a.path),t.append("prefix",a.prefix),t.append("conversion_needed",a.conversion_needed),t.append("bucketname",a.bucketname),this.httpClient.post(e,t,{reportProgress:!0,observe:"events"}).pipe(r.map(function(e){switch(e.type){case K.HttpEventType.UploadProgress:var a=Math.round(100*e.loaded/e.total);return 0<=a&&a<=100?{status:"progress",data:{totalData:e.total,loadedData:e.loaded,percentage:a}}:{status:"complete",data:null};case K.HttpEventType.Response:return"success"==e.body.status?{status:"complete",data:e.body}:{status:"error",data:"An error occord."};default:return{status:"waiting",data:""}}}))},Q.prototype.uploadBase64=function(e,a){var t={headers:new K.HttpHeaders({"Content-Type":"application/json"})};return this.httpClient.post(e,a,t)},Q.decorators=[{type:X.Injectable,args:[{providedIn:"root"}]}],Q.ctorParameters=function(){return[{type:K.HttpClient}]},Q.ngInjectableDef=X.defineInjectable({factory:function(){return new Q(X.inject(K.HttpClient))},token:Q,providedIn:"root"}),Q);function Q(e){this.httpClient=e,this.BASE_URL="http://3.15.236.141:5005/uploads"}var W=(Z.prototype.onNoClick=function(){this.dialogRef.close()},Z.prototype.ngOnInit=function(){},Z.decorators=[{type:X.Component,args:[{selector:"lib-dialog-box",template:'<h1 mat-dialog-title>Are you sure ??</h1>\n<div mat-dialog-actions>\n  <button mat-button type="button" [mat-dialog-close]="false" (click)="onNoClick()">No Thanks</button>\n  <button mat-button type="button" [mat-dialog-close]="true" cdkFocusInitial>Yes</button>\n</div>',styles:[""]}]}],Z.ctorParameters=function(){return[{type:k.MatDialogRef},{type:undefined,decorators:[{type:X.Inject,args:[k.MAT_DIALOG_DATA]}]}]},Z);function Z(e,a){this.dialogRef=e,this.data=a}var ee=(ae.prototype.onNoClick=function(){this.dialogRef.close()},ae.prototype.ngOnInit=function(){},ae.decorators=[{type:X.Component,args:[{selector:"lib-preview-files",template:'<h2 mat-dialog-title>File Preview</h2>\n<mat-dialog-content class="mat-typography">\n  <img mat-card-image [src]="this.data.imgURL" *ngIf="this.data.imgURL">\n</mat-dialog-content>\n<mat-dialog-actions align="end">\n  <button mat-button type="button" mat-dialog-close>Cancel</button>\n</mat-dialog-actions>',styles:["img{max-width:100%;max-height:64vh}"]}]}],ae.ctorParameters=function(){return[{type:k.MatDialogRef},{type:undefined,decorators:[{type:X.Inject,args:[k.MAT_DIALOG_DATA]}]}]},ae);function ae(e,a){this.dialogRef=e,this.data=a}var te=(Object.defineProperty(re.prototype,"config",{set:function(e){for(var a in this.configData=e,this.configData.aspectratio){var t=this.configData.aspectratio[a];this.num[a]=t.toFixed(2),console.log(this.num)}},enumerable:!0,configurable:!0}),re.prototype.ngOnInit=function(){},re.prototype.selectFiles=function(e,a){console.log(e),this.loading=!0;for(var t=0;t<e.length;t++){var r=this.files.length,i=e[t];for(var n in this.configData.aspectratio)console.log("cc",n,t),null==this.imageChangedEvent[t]&&(this.imageChangedEvent[t]=[]),this.imageChangedEvent[t][n]=a;console.log(e,this.imageChangedEvent,"img",a);var o=this.checkingValidation(i);if(o.status)i.valid={status:!0},i.upload={status:"selected"},i.viewUrl="https://loading.io/spinners/dual-ring/lg.dual-ring-loader.gif",this.files.push(i),this.viewFiles(r,i);else{i.valid={status:!1,message:o.message},i.upload={status:"selected"},i.viewUrl=null;var l=i.type.split("/");i.viewText=l[1],this.files.push(i)}}},re.prototype.viewFiles=function(t,e){var r=this,a=e.type.split("/");if("image"==a[0]){var i=new FileReader;this.files[t],i.readAsDataURL(this.files[t]),i.onload=function(e){var a=i.result;r.files[t].viewUrl=a}}else this.files[t].viewUrl=null,this.files[t].viewText=a[1]},re.prototype.checkingValidation=function(e){var a={status:!0,message:null},t=e.type.split("/");return 0==this.configData.format.includes(t[1])?(a.status=!1,a.message=t[1].toUpperCase()+" format not supported.",this.openSnackBar(t[1].toUpperCase()+" format not supported.",""),a):e.size/1e3>this.configData.size?(a.status=!1,a.message="File size too large. Maximum file size limit: "+this.configData.size+" KB.",this.openSnackBar("File size too large. Maximum file size limit: "+this.configData.size+" KB.",""),a):1==a.status?a:void 0},re.prototype.uploadAll=function(e){void 0===e&&(e=null);for(var a=0;a<this.files.length;a++)1==this.files[a].valid.status&&"complete"!=this.files[a].upload.status&&this.uploading(a)},re.prototype.uploading=function(t){var r=this,e={file:this.files[t],type:this.configData.type,path:this.configData.path,prefix:this.configData.prefix,uploadType:this.configData.uploadType,conversion_needed:this.configData.conversionNeeded,bucketname:this.configData.bucketName},a=this.configData.baseUrl+this.configData.endpoint+"?path="+this.configData.path+"&prefix="+this.configData.prefix+"&type="+this.configData.type+"&rand="+t;this.fileUploadService.upload(a,e).subscribe(function(e){var a=e;switch(a.status){case"complete":r.files[t].upload=a,r.configData.files=r.files,r.openSnackBar("Successfully Uploaded !!","Undo");break;case"error":r.files[t].upload=a.data,r.openSnackBar(a.data,"");break;default:r.files[t].upload=a}},function(e){r.files[t]={status:"error"},r.openSnackBar("An error occurred !!","Retry")})},re.prototype.removeFiles=function(a){var t=this;void 0===a&&(a=null),this.openDialog(),this.dialogRef.afterClosed().subscribe(function(e){e&&(t.files.splice(a,1),t.openSnackBar("Successfully Remove !!",""))})},re.prototype.openSnackBar=function(e,a){this._snackBar.open(e,a,{duration:2e3})},re.prototype.openDialog=function(){this.dialogRef=this.dialog.open(W,{width:"250px",data:{message:"Message"}})},re.prototype.deleteAll=function(){var a=this;this.openDialog(),this.dialogRef.afterClosed().subscribe(function(e){e&&(a.files.splice(0,a.files.length),a.openSnackBar("Successfully Remove !!",""))})},re.prototype.previewFiles=function(e){var t=this;if(null!=this.files[e].type.match(/image\/*/)){var r=new FileReader;this.files[e],r.readAsDataURL(this.files[e]),r.onload=function(e){var a=r.result;t.dialog.open(ee,{data:{imgURL:a}})}}else this.openSnackBar("Preview not supported.","")},re.prototype.fileChangeEvent=function(e){console.log("fileChangeEvent",e),this.imageChangedEvent=e},re.prototype.imageCropped=function(e,a){console.log(">>>>>>>>>",e,a),this.croppedImage[a]=e.base64,console.log("imageCropped",this.croppedImage),this.configData.croppedfiles=this.croppedImage},re.prototype.imageLoaded=function(){},re.prototype.cropperReady=function(){},re.prototype.loadImageFailed=function(){},re.decorators=[{type:X.Component,args:[{selector:"lib-file-upload",template:'\x3c!-- File Upload --\x3e\n<div class="uploadfilecontainer" (click)="fileInput.click()" libDragDrop (onFileDropped)="selectFiles($event,$event)">\n    <input hidden type="file" #fileInput (change)="selectFiles($event.target.files,$event)" multiple>\n    <div class="uploadtextwrapper">\n        <h2>Drag and Drop Files</h2>\n        <p>Supported Formats:\n            <ng-container *ngFor="let val of configData.format; let i = index">\n                {{ val }}<ng-container *ngIf="i + 1 < configData.format.length">,</ng-container>\n            </ng-container>\n        </p>\n        <p>MAX Size: {{ configData.size / 1024 | number: \'.1-2\' }} MB</p>\n    </div>\n</div>\n\n<div class="button-group" *ngIf="files.length > 0">\n    <button mat-raised-button color="primary" type="button" (click)="uploadAll();">Upload All</button>\n    <button mat-raised-button color="warn" type="button" (click)="deleteAll();">Delete All</button>\n</div>\n\n<div class="files-view">\n    \x3c!-- View Files --\x3e\n    <mat-card class="example-card" *ngFor="let file of files; let i = index;">\n        <span class="viewUrlwrapper">\n            <div *ngIf="file.viewUrl == null" (click)="previewFiles(i);" class="othersFilePreview"> <h2 style="color:white; font-weight: bold;">{{ file.viewText | uppercase }}</h2></div>\n            <img mat-card-image *ngIf="file.viewUrl != null" [src]="file.viewUrl" alt="{{ file.name }}" (click)="previewFiles(i);" />\n        </span>\n        <span class="viewUrlcontent">\n            <mat-card-header>\n                <mat-card-title>{{ file.name }}</mat-card-title>\n                <mat-card-subtitle class="fileDescription">Type: {{ file.type }}, Size:\n                    <ng-container *ngIf="file.size / 1000 > 999">\n                        {{ file.size / 1000 / 1000 | number: \'.1-2\' }} MB\n                    </ng-container>\n                    <ng-container *ngIf="file.size / 1000 < 1000">\n                        {{ file.size / 1000 | number: \'.1-2\' }} KB\n                    </ng-container>\n                </mat-card-subtitle>\n                <mat-card-subtitle class="error" *ngIf="file.valid.status == false">{{ file.valid.message }}\n                </mat-card-subtitle>\n            </mat-card-header>\n\n            <mat-card-content>\n                <mat-progress-bar mode="determinate" *ngIf="file.upload.status == \'progress\'"\n                    value="{{ file.upload.data.percentage }}"></mat-progress-bar>\n                <mat-progress-bar mode="indeterminate" *ngIf="file.upload.status == \'waiting\'"></mat-progress-bar>\n\n                <ng-container *ngIf="configData.aspectratio !=null && configData.aspectratio.length>0" >\n                    <h2> Croped Images :</h2>\n                    \x3c!-- <span>ddd {{configData.aspectratio}}----{{configData.aspectratio.length}}\n\n                    </span>  --\x3e\n\n                    <ng-container *ngFor="let c of configData.aspectratio;let ci=index">\n                        \x3c!-- <span>00aspectratio---{{c}}</span> --\x3e\n\n\n                        <br/>\n                        <span>Croped Image (Asepect Ratio) :{{num[ci]}}</span><br>\n                        <image-cropper\n                        [imageChangedEvent]="imageChangedEvent[i][ci]"\n                        [maintainAspectRatio]="true"\n                        [aspectRatio]=c\n                        [onlyScaleDown]="true"\n                        [roundCropper]="false"\n                        [alignImage]="\'left\'"\n                        (imageCropped)="imageCropped($event,ci)"\n                    ></image-cropper>\n                    <br/>\n                    <span>Croped Image Output : </span><br>\n                    \n                    <img [src]="croppedImage[ci]" />\n    \n                    </ng-container>\n\n                </ng-container>\n\n                \n\n\n            </mat-card-content>\n\n            <mat-card-actions>\n                \x3c!-- <button mat-raised-button matTooltip="Preview" *ngIf="file.valid.status == true" aria-label="Preview" (click)="previewFiles(i);">Preview</button> --\x3e\n\n                <button mat-raised-button color="primary" type="button"\n                    *ngIf="file.valid.status == true && file.upload.status != \'complete\'" matTooltip="Upload"\n                    aria-label="Upload" (click)="uploading(i);">Upload</button>\n                <button mat-raised-button type="button" disabled *ngIf="file.upload.status == \'complete\'">Upload Complete</button>\n\n                <button mat-raised-button type="button" color="warn" matTooltip="Remove" aria-label="Remove"\n                    (click)="removeFiles(i);">Remove</button>\n\n\n                    \x3c!-- <button mat-raised-button type="button" color="warn"\n                    (click)="getdata();">get data</button> --\x3e\n            </mat-card-actions>\n\n\n        </span>\n    </mat-card>\n\x3c!-- </div> --\x3e\n\n\n \n\n\x3c!-- image cropped section test --\x3e\n\x3c!-- <input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n\n',styles:[".uploadfilecontainer{background-repeat:no-repeat;background-size:100px;background-position:center;height:200px;width:80%;margin:20px auto;border:2px dashed #1c8adb;border-radius:10px;text-align:center;display:flex;justify-content:center;align-items:center}.uploadfilecontainer:hover{cursor:pointer;background-color:#9ecbec!important;opacity:.8}.button-group{background-repeat:no-repeat;background-size:100px;background-position:center;height:40px;width:80%;margin:20px auto;border-radius:10px}.error.mat-card-subtitle{color:#a00;text-align:left}.example-card{margin:6px auto auto;max-width:100%}.example-header-image{background-image:url(https://material.angular.io/assets/img/examples/shiba1.jpg);background-size:cover}.progress-bar{margin-top:24px}.file-div{background-color:#dedddc;margin-top:6px}.othersFilePreview{background-color:#8a2be2;height:100%;width:100%;text-align:center;justify-content:center;align-items:center;display:flex}.fileDescription{text-align:left}.files-view{background-repeat:no-repeat;background-size:cover;background-position:center;height:auto!important;width:82%;margin:20px auto;border-radius:10px;display:flex;justify-content:center;align-items:stretch;flex-wrap:wrap}.files-view .mat-card{position:relative;z-index:9;flex:1 1 28.33%;margin:10px!important;display:flex;flex-wrap:wrap}.viewUrlwrapper{height:160px;width:100%;overflow:hidden;position:relative}.viewUrlwrapper img{max-width:100%;-o-object-fit:cover;object-fit:cover;margin:0 auto;z-index:99;position:relative;max-width:100%;width:initial;display:block;margin-top:-46px!important}.viewUrlcontent{display:block;justify-content:center;align-items:stretch;flex-wrap:wrap;flex:1 1 100%}.viewUrlcontent .mat-card-header{display:flex;flex-direction:row;flex:1 1 100%;justify-content:center;text-align:center;flex-wrap:wrap}.viewUrlcontent .mat-progress-bar{margin-bottom:5px}.viewUrlcontent .mat-card-header .mat-card-header-text{margin:10px;width:100%}.viewUrlcontent .mat-card-header .mat-card-header-text .mat-card-title{width:100%;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;line-height:19px;max-height:40px;-webkit-line-clamp:2}.mat-typography .mat-card-image{width:inherit!important;margin:0!important}"]}]}],re.ctorParameters=function(){return[{type:i.FormBuilder},{type:J},{type:a.ActivatedRoute},{type:a.Router},{type:L.MatSnackBar},{type:k.MatDialog}]},re.propDecorators={config:[{type:X.Input}]},re);function re(e,a,t,r,i,n){this.formBuilder=e,this.fileUploadService=a,this.ActivatedRoute=t,this.router=r,this._snackBar=i,this.dialog=n,this.formData=new FormData,this.files=[],this.filesProcess=[],this.totalFile=0,this.loading=!1,this.num=[],this.imageChangedEvent=[],this.croppedImage=[]}var ie=(ne.decorators=[{type:X.NgModule,args:[{exports:[n.A11yModule,p.CdkStepperModule,u.CdkTableModule,c.CdkTreeModule,o.DragDropModule,g.MatAutocompleteModule,d.MatBadgeModule,m.MatBottomSheetModule,f.MatButtonModule,h.MatButtonToggleModule,b.MatCardModule,v.MatCheckboxModule,y.MatChipsModule,x.MatStepperModule,M.MatDatepickerModule,k.MatDialogModule,w.MatDividerModule,D.MatExpansionModule,q.MatGridListModule,C.MatIconModule,I.MatInputModule,F.MatListModule,U.MatMenuModule,R.MatNativeDateModule,S.MatPaginatorModule,B.MatProgressBarModule,A.MatProgressSpinnerModule,T.MatRadioModule,R.MatRippleModule,z.MatSelectModule,P.MatSidenavModule,j.MatSliderModule,E.MatSlideToggleModule,L.MatSnackBarModule,H.MatSortModule,O.MatTableModule,_.MatTabsModule,N.MatToolbarModule,$.MatTooltipModule,G.MatTreeModule,l.PortalModule,s.ScrollingModule]}]}],ne);function ne(){}var oe=(le.prototype.onDragOver=function(e){e.preventDefault(),e.stopPropagation(),this.background="#9ecbec",this.opacity="0.8"},le.prototype.onDragLeave=function(e){e.preventDefault(),e.stopPropagation(),this.background="#f5fcff",this.opacity="1"},le.prototype.ondrop=function(e){e.preventDefault(),e.stopPropagation(),this.background="#f5fcff",this.opacity="1";var a=e.dataTransfer.files;0<a.length&&this.onFileDropped.emit(a)},le.decorators=[{type:X.Directive,args:[{selector:"[libDragDrop]"}]}],le.propDecorators={onFileDropped:[{type:X.Output}],background:[{type:X.HostBinding,args:["style.background-color"]}],opacity:[{type:X.HostBinding,args:["style.opacity"]}],onDragOver:[{type:X.HostListener,args:["dragover",["$event"]]}],onDragLeave:[{type:X.HostListener,args:["dragleave",["$event"]]}],ondrop:[{type:X.HostListener,args:["drop",["$event"]]}]},le);function le(){this.onFileDropped=new X.EventEmitter,this.background="#f5fcff",this.opacity="1"}var se=(pe.prototype.ngOnInit=function(){},pe.decorators=[{type:X.Component,args:[{selector:"lib-alert-message",template:'<span class="example-pizza-party">\n  An error occurred.\n</span>',styles:[".example-pizza-party{color:#ff69b4}"]}]}],pe.ctorParameters=function(){return[]},pe);function pe(){}var ue=(ce.decorators=[{type:X.NgModule,args:[{declarations:[te,oe,se,W,ee],imports:[t.BrowserModule,ie,i.FormsModule,i.ReactiveFormsModule,K.HttpClientModule,V.ListingModule,Y.ImageCropperModule],providers:[],exports:[te],entryComponents:[se,W,ee]}]}],ce);function ce(){}e.FileUploadService=J,e.FileUploadComponent=te,e.FileUploadModule=ue,e.ɵe=ie,e.ɵb=se,e.ɵc=W,e.ɵd=ee,e.ɵa=oe,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=file-upload-lib-influxiq.umd.min.js.map