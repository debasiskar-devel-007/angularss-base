{"version":3,"sources":["ng://login-lib-influxiq/lib/login.service.ts","ng://login-lib-influxiq/lib/api.service.ts","ng://login-lib-influxiq/lib/login.component.ts","ng://login-lib-influxiq/lib/material-module.ts","ng://login-lib-influxiq/lib/sign-up/sign-up.component.ts","ng://login-lib-influxiq/lib/forget-password/forget-password.component.ts","ng://login-lib-influxiq/lib/reset-password/reset-password.component.ts","ng://login-lib-influxiq/lib/prevroute.ts","ng://login-lib-influxiq/lib/login.module.ts"],"names":["LoginService","Injectable","args","providedIn","ApiService","prototype","setServerUrl","value","this","subjectForServerUrl","next","clearServerUrl","getServerUrl","asObservable","setaddEndpoint","subjectForaddEndpointUrl","clearaddEndpoint","getaddEndpoint","setuploadEndpont","subjectForuploadEndpointUrl","clearuploadEndpoint","getuploadEndpoint","setupdateEndpoint","subjectForupdateEndpointUrl","clearupdateEndpoint","getupdateEndpoint","setdeletesingleEndpoint","subjectFordeletesingleEndpointUrl","cleardeletesingleEndpoint","getdeletesingleEndpoint","setupdatestatus_singleEndpoint","subjectForupdatestatusSingleEndpointUrl","clearupdatestatus_singleEndpoint","getupdatestatus_singleEndpoint","setgetdataEndpoint","subjectForGetdataEndpointUrl","cleargetdataEndpoint","getdataEndpoint","isTokenExpired","addData","requestdata","console","log","httpOptions","headers","HttpHeaders","Content-Type","Authorization","accesstoken","_http","post","serverUrl","addendpointUrl","JSON","stringify","pipe","map","res","uploadFile","access-token","uploadEndpointUrl","UpdateData","updateendpointUrl","getData","getdata_endpointUrl","addLogin","Object","assign","secret","cookieService","get","forgetPassword","deleteSingleData","deletesingle_endpointUrl","deleteMultipleData","UpdateStatusForSingleData","updatestatus_single_endpointUrl","UpdateStatusForMultipleData","CustomRequest","endpoint","jwtTokenGet","HttpClient","CookieService","_authHttp","_this","progress","uploaderror","fileservername","Subject","subscriptionServer","subscribe","message","result","subscriptionaddEndpoint","subscriptionuploadEndpoint","subscriptionupdateEndpoint","subscriptiondeletesingleEndpoint","subscriptionupdatestatusSingleEndpoint","subscriptionGetdataEndpoint","LoginComponent","defineProperty","forLoaderVal","loader","fromTitleVal","fromTitleValue","logoVal","logoValue","buttonNameVal","buttonNameValue","fullUrlVal","serverURL","endpointVal","endpointValue","v","cookieSetValue","routeingUrlval","signUpRouteingUrlValue","forgetRouteingUrlValue","routerStatusval","routerStatusValue","defaultUrlVal","defaultUrlValue","ngOnInit","apiService","setTimeout","randomString","length","chars","mask","indexOf","i","Math","floor","random","loginFormSubmit","x","loginForm","controls","markAsTouched","valid","data","response","status","set","item","token","router","url","key","type","warn","routerNav","navigateByUrl","redirect_url","formDirective","resetForm","msg","inputUntouched","val","markAsUntouched","forgetpassword","path","signup","customFunction","link","Component","selector","template","FormBuilder","Router","ActivatedRoute","ViewChild","FormGroupDirective","Input","fb","http","route","project_name","previousUrl","undefined","currentUrl","events","event","NavigationEnd","params","group","email","Validators","compose","required","pattern","password","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","SignUpComponent","formTitleVal","formTitleValue","serverUrlVal","serverUrlValue","modaleLogoVal","typeval","typevalue","addEndpointVal","addEndpointValue","loginRouteingUrlValue","signUpFormSubmit","signUpForm","allData","source","dialog","open","successModalComponent","width","Url","login","MatDialog","firstname","lastname","onNoClick","dialogRef","close","MatDialogRef","Inject","MAT_DIALOG_DATA","ForgetPasswordComponent","domainUrlVal","domainUrlValue","addEndpointval","forgetPasswordSubmit","forgetPasswordForm","domainUrl","openSnackBar","snackBar","openFromComponent","snackBarComponent","duration","durationInSeconds","MatSnackBar","ResetPasswordComponent","fromTitleNameVal","fromTitleNameValue","machpassword","passwordkye","confirmpasswordkye","passwordInput","confirmpasswordInput","setErrors","notEquivalent","resetPasswordSubmit","resetPasswordForm","accesscode","snackBarResetComponent","confirmPassword","validator","prevroute","getPreviousUrl","LoginModule","declarations","imports","FormsModule","ReactiveFormsModule","BrowserAnimationsModule","CommonModule","HttpClientModule","providers","bootstrap","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","entryComponents"],"mappings":"w1IAAA,IAAAA,uBAECC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAH,KCPF,IAAAI,IAqHEA,GAAAC,UAAAC,aAAA,SAAaC,GACXC,KAAKC,oBAAoBC,KAAKH,IAEzBH,GAAAC,UAAAM,eAAP,WACEH,KAAKC,oBAAoBC,KAAK,OAEzBN,GAAAC,UAAAO,aAAP,WACE,OAAOJ,KAAKC,oBAAoBI,gBAGlCT,GAAAC,UAAAS,eAAA,SAAeP,GACbC,KAAKO,yBAAyBL,KAAKH,IAE9BH,GAAAC,UAAAW,iBAAP,WACER,KAAKO,yBAAyBL,KAAK,OAE9BN,GAAAC,UAAAY,eAAP,WACE,OAAOT,KAAKO,yBAAyBF,gBAGvCT,GAAAC,UAAAa,iBAAA,SAAiBX,GACfC,KAAKW,4BAA4BT,KAAKH,IAEjCH,GAAAC,UAAAe,oBAAP,WACEZ,KAAKW,4BAA4BT,KAAK,OAEjCN,GAAAC,UAAAgB,kBAAP,WACE,OAAOb,KAAKW,4BAA4BN,gBAK1CT,GAAAC,UAAAiB,kBAAA,SAAkBf,GAChBC,KAAKe,4BAA4Bb,KAAKH,IAEjCH,GAAAC,UAAAmB,oBAAP,WACEhB,KAAKe,4BAA4Bb,KAAK,OAEjCN,GAAAC,UAAAoB,kBAAP,WACE,OAAOjB,KAAKe,4BAA4BV,gBAG1CT,GAAAC,UAAAqB,wBAAA,SAAwBnB,GACtBC,KAAKmB,kCAAkCjB,KAAKH,IAEvCH,GAAAC,UAAAuB,0BAAP,WACEpB,KAAKmB,kCAAkCjB,KAAK,OAEvCN,GAAAC,UAAAwB,wBAAP,WACE,OAAOrB,KAAKmB,kCAAkCd,gBAGhDT,GAAAC,UAAAyB,+BAAA,SAA+BvB,GAC7BC,KAAKuB,wCAAwCrB,KAAKH,IAE7CH,GAAAC,UAAA2B,iCAAP,WACExB,KAAKuB,wCAAwCrB,KAAK,OAE7CN,GAAAC,UAAA4B,+BAAP,WACE,OAAOzB,KAAKuB,wCAAwClB,gBAGtDT,GAAAC,UAAA6B,mBAAA,SAAmB3B,GACjBC,KAAK2B,6BAA6BzB,KAAKH,IAElCH,GAAAC,UAAA+B,qBAAP,WACE5B,KAAK2B,6BAA6BzB,KAAK,OAElCN,GAAAC,UAAAgC,gBAAP,WACE,OAAO7B,KAAK2B,6BAA6BtB,gBAK3CT,GAAAC,UAAAiC,eAAA,aAWAlC,GAAAC,UAAAkC,QAAA,SAAQC,GACNC,QAAQC,IAAI,6BACNC,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBC,cAAiBvC,KAAKwC,eAM1B,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAK4C,eAAgBC,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAI/HrD,GAAAC,UAAAqD,WAAA,SAAWlB,OACHG,EAAY,CACdC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAe,mBACfa,eAAenD,KAAKwC,eAI1B,OADWxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKoD,kBAAkBP,KAAKC,UAAUd,GAAaG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAK,OAAAA,MAI5HrD,GAAAC,UAAAwD,WAAA,SAAWrB,OACHG,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBa,eAAgBnD,KAAKwC,eAIzB,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKsD,kBAAmBT,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAIlIrD,GAAAC,UAAA0D,QAAA,SAAQvB,OACAG,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBC,cAAiBvC,KAAKwC,eAI1B,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKwD,oBAAqBX,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAIpIrD,GAAAC,UAAA4D,SAAA,SAASzB,GACPC,QAAQC,IAAI,0BACWwB,OAAOC,OAAO3B,EAAY,CAAC4B,OAAS5D,KAAK6D,cAAcC,IAAI,gBAC5E3B,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,sBAOpB,OADatC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAK4C,eAAgBC,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAMjIrD,GAAAC,UAAAkE,eAAA,SAAe/B,GACbC,QAAQC,IAAI,oCACNC,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,sBAOpB,OADatC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAK4C,eAAgBC,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAM7HrD,GAAAC,UAAAmE,iBAAA,SAAiBhC,OACTG,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBa,eAAgBnD,KAAKwC,eAIzB,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKiE,yBAA0BpB,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAIzIrD,GAAAC,UAAAqE,mBAAA,SAAmBlC,OACXG,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBa,eAAgBnD,KAAKwC,eAIzB,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKiE,yBAAyB,OAAQpB,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAIhJrD,GAAAC,UAAAsE,0BAAA,SAA0BnC,OAClBG,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBa,eAAgBnD,KAAKwC,eAIzB,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKoE,gCAAiCvB,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAIhJrD,GAAAC,UAAAwE,4BAAA,SAA4BrC,OACpBG,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBa,eAAgBnD,KAAKwC,eAIzB,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAY3C,KAAKoE,gCAAgC,OAAQvB,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAGvJrD,GAAAC,UAAAyE,cAAA,SAActC,EAAkBuC,OACxBpC,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,mBAChBa,eAAgBnD,KAAKwC,eAIzB,OADaxC,KAAKyC,MAAMC,KAAK1C,KAAK2C,UAAW4B,EAAU1B,KAAKC,UAAUd,GAAcG,GAAaY,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,MAInHrD,GAAAC,UAAA2E,YAAA,WAOE,OALW,IAAInC,EAAAA,YAAY,CACvBC,eAAe,qBAGNtC,KAAKyC,MAAMqB,IAAI9D,KAAK2C,UAAW,gBAAgBI,KAAKC,EAAAA,IAAG,SAACC,GAAO,OAAAA,2BA9U/ExD,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDAPL8E,EAAAA,kBAAAA,EAAAA,kBAGFC,EAAAA,oMAyCL,SAAA9E,GAAoB6C,EACVkC,EAA8Bd,GADxC,IAAAe,EAAA5E,KAAoBA,KAAAyC,MAAAA,EACVzC,KAAA2E,UAAAA,EAA8B3E,KAAA6D,cAAAA,EA/BjC7D,KAAA6E,SAAgB,GAEhB7E,KAAA8E,YAAmB,GACnB9E,KAAAwC,YAAgBxC,KAAK6D,cAAcC,IAAI,YAE9C9D,KAAA+E,eAAsB,GAUd/E,KAAAC,oBAAsB,IAAI+E,EAAAA,QAC1BhF,KAAAO,yBAA2B,IAAIyE,EAAAA,QAC/BhF,KAAAW,4BAA8B,IAAIqE,EAAAA,QAClChF,KAAAe,4BAA8B,IAAIiE,EAAAA,QAClChF,KAAAmB,kCAAoC,IAAI6D,EAAAA,QACxChF,KAAAuB,wCAA0C,IAAIyD,EAAAA,QAC9ChF,KAAA2B,6BAA+B,IAAIqD,EAAAA,QAWzChF,KAAKiF,mBAAqBjF,KAAKI,eAAe8E,UAAS,SAACC,OACnDC,EACHA,EAASD,EAEPP,EAAKjC,UADO,MAAVyC,EACeA,EAEA,OAGrBpF,KAAKqF,wBAA0BrF,KAAKS,iBAAiByE,UAAS,SAACC,OACzDC,EACJA,EAASD,EAEPP,EAAKhC,eADO,MAAVwC,EACoBA,EAEA,OAI1BpF,KAAKsF,2BAA2BtF,KAAKa,oBAAoBqE,UAAS,SAACC,OAC7DC,EACJA,EAAOD,EAEHP,EAAKxB,kBADI,MAARgC,EACwBA,EAEA,OAI/BpF,KAAKuF,2BAA6BvF,KAAKiB,oBAAoBiE,UAAS,SAACC,OAC/DC,EACJA,EAASD,EAEPP,EAAKtB,kBADO,MAAV8B,EACuBA,EAEA,OAG7BpF,KAAKwF,iCAAmCxF,KAAKqB,0BAA0B6D,UAAS,SAACC,OAC3EC,EACJA,EAASD,EAEPP,EAAKX,yBADO,MAAVmB,EAC8BA,EAEA,OAGpCpF,KAAKyF,uCAAyCzF,KAAKyB,iCAAiCyD,UAAS,SAACC,OACxFC,EACJA,EAASD,EAEPP,EAAKR,gCADO,MAAVgB,EACqCA,EAEA,OAG3CpF,KAAK0F,4BAA8B1F,KAAK6B,kBAAkBqD,UAAS,SAACC,OAC9DC,EACJA,EAASD,EAEPP,EAAKpB,oBADO,MAAV4B,EACyBA,EAEA,OC9GnC,IAAAO,IAgCEjC,OAAAkC,eACID,GAAA9F,UAAA,YAAS,KADb,SACcgG,GACZ7F,KAAK8F,OAAS,GAAkB,gBAChC9F,KAAK8F,OAASD,mCAKhBnC,OAAAkC,eACID,GAAA9F,UAAA,YAAS,KADb,SACckG,GACZ/F,KAAKgG,eAAiB,GAAkB,gBACxChG,KAAKgG,eAAiBD,mCAGxBrC,OAAAkC,eACID,GAAA9F,UAAA,OAAI,KADR,SACSoG,GACPjG,KAAKkG,UAAYD,mCAErBvC,OAAAkC,eACID,GAAA9F,UAAA,aAAU,KADd,SACgBsG,GACdnG,KAAKoG,gBAAkB,GAAmB,gBAC1CpG,KAAKoG,gBAAkBD,mCAGvBzC,OAAAkC,eACID,GAAA9F,UAAA,UAAO,KADX,SACYwG,GACVrG,KAAKsG,UAAY,GAAgB,gBACjCtG,KAAKsG,UAAYD,mCAGnB3C,OAAAkC,eAEID,GAAA9F,UAAA,WAAQ,KAFZ,SAEa0G,GACXvG,KAAKwG,cAAgBD,mCAGzB7C,OAAAkC,eAEWD,GAAA9F,UAAA,YAAS,KAFpB,SAEqB4G,GACnBzG,KAAK0G,eAAiBD,mCAKtB/C,OAAAkC,eACID,GAAA9F,UAAA,oBAAiB,KADrB,SACsB8G,GACpB3G,KAAK4G,uBAAyB,GAAoB,gBAClD5G,KAAK4G,uBAAyBD,mCAKhCjD,OAAAkC,eACID,GAAA9F,UAAA,oBAAiB,KADrB,SACsB8G,GACpB3G,KAAK6G,uBAAyB,GAAoB,gBAClD7G,KAAK6G,uBAAyBF,mCAIhCjD,OAAAkC,eACID,GAAA9F,UAAA,eAAY,KADhB,SACiBiH,GACf9G,KAAK+G,kBAAoB,GAAqB,gBAC9C/G,KAAK+G,kBAAoBD,EACzB7E,QAAQC,IAAIlC,KAAK+G,oDAGnBrD,OAAAkC,eACID,GAAA9F,UAAA,kBAAe,KADnB,SACoBmH,GAClBhH,KAAKiH,gBAAkB,GAAmB,gBAC1CjH,KAAKiH,gBAAkBD,mCAiDzBrB,GAAA9F,UAAAqH,SAAA,WAAA,IAAAtC,EAAA5E,KACEA,KAAKmH,WAAWhH,iBAChBiH,WAAU,WACRxC,EAAKuC,WAAWrH,aAAa8E,EAAK0B,YACjC,IAIHtG,KAAKmH,WAAW3G,mBAChB4G,WAAU,WACRxC,EAAKuC,WAAW7G,eAAesE,EAAK4B,gBACnC,KAKLb,GAAA9F,UAAAwH,aAAA,SAAaC,EAAQC,OACfC,EAAO,IACe,EAAtBD,EAAME,QAAQ,OAAWD,GAAQ,+BACX,EAAtBD,EAAME,QAAQ,OAAWD,GAAQ,+BACX,EAAtBD,EAAME,QAAQ,OAAWD,GAAQ,eACX,EAAtBD,EAAME,QAAQ,OAAWD,GAAQ,sCAErC,QADIpC,EAAS,GACJsC,EAAIJ,EAAY,EAAJI,IAASA,EAAGtC,GAAUoC,EAAKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKF,SAChF,OAAOlC,GAITO,GAAA9F,UAAAiI,gBAAA,WAAA,IAGMC,EAHNnD,EAAA5E,KAME,IAAK+H,KALL/H,KAAK8F,OAAS,EACd7D,QAAQC,IAAIlC,KAAK8F,QAIP9F,KAAKgI,UAAUC,SACvBjI,KAAKgI,UAAUC,SAASF,GAAGG,gBAG7B,GAAIlI,KAAKgI,UAAUG,MAAO,KAGpBC,EAAYpI,KAAKgI,UAAUjI,MAC/BC,KAAKmH,WAAW1D,SAAS2E,GAAMlD,UAAS,SAAEmD,OACpCjD,EAGJ,GAAqB,YAFrBA,EAASiD,GAEEC,OAAqB,CAI9B,GAFA1D,EAAKf,cAAc0E,IAAI,eAAgB1F,KAAKC,UAAUsC,EAAOoD,KAAK,KAClE5D,EAAKf,cAAc0E,IAAI,WAAYnD,EAAOqD,OACtC7D,EAAK8D,OAAOC,KAAO/D,EAAKqC,gBAC1B,IAAK,IAAM2B,KAAOhE,EAAKmC,kBAAkBqB,KACnChD,EAAOoD,KAAK,GAAGK,OAASjE,EAAKmC,kBAAkBqB,KAAKQ,GAAKC,OAC3D5G,QAAQ6G,KAAKlE,EAAKmC,kBAAkBqB,KAAKQ,GAAKG,WAC9CnE,EAAK8D,OAAOM,cAAc,IAAMpE,EAAKmC,kBAAkBqB,KAAKQ,GAAKG,WACjEnE,EAAKkB,OAAS,EACd7D,QAAQC,IAAI0C,EAAKkB,cAKrBlB,EAAKkB,OAAS,EAEdlB,EAAK8D,OAAOM,cAAcpE,EAAKqE,cAEnCrE,EAAKkB,OAAS,EAIZlB,EAAKsE,cAAcC,YACnBvE,EAAKO,QAAU,QAGfP,EAAKO,QAAUC,EAAOgE,QAQ9BzD,GAAA9F,UAAAwJ,eAAA,SAAeC,GACbtJ,KAAKgI,UAAUC,SAASqB,GAAKC,mBAI/B5D,GAAA9F,UAAA2J,eAAA,WACExJ,KAAK0I,OAAOM,cAAc,IAAMhJ,KAAK6G,uBAAuB4C,OAI9D9D,GAAA9F,UAAA6J,OAAA,WACE1J,KAAK0I,OAAOM,cAAc,IAAMhJ,KAAK4G,uBAAuB6C,OAG9D9D,GAAA9F,UAAA8J,eAAA,SAAeC,GACb5J,KAAK0I,OAAOM,cAAc,IAAKY,yBA5OlCC,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,YACVC,SAAA,yzIAXkBC,EAAAA,mBACXvF,EAAAA,kBACAwF,EAAAA,cACArK,UACA8E,EAAAA,qBAFQwF,EAAAA,0DAedC,EAAAA,UAASzK,KAAA,CAAC0K,EAAAA,uCAcVC,EAAAA,yBAQAA,EAAAA,oBAMAA,EAAAA,0BAIFA,EAAAA,uBAMEA,EAAAA,wBAMAA,EAAAA,yBAMFA,EAAAA,iCAQEA,EAAAA,iCAQAA,EAAAA,4BAOAA,EAAAA,+BAOAA,EAAAA,SAuJH1E,IArIE,SAAAA,GAAmB2E,EACTC,EACA7B,EACAvB,EACAtD,EACA2G,GALV,IAAA5F,EAAA5E,KAAmBA,KAAAsK,GAAAA,EACTtK,KAAAuK,KAAAA,EACAvK,KAAA0I,OAAAA,EACA1I,KAAAmH,WAAAA,EACAnH,KAAA6D,cAAAA,EACA7D,KAAAwK,MAAAA,EAzGHxK,KAAAmF,QAAe,GAIfnF,KAAAgG,eAAsB,GACtBhG,KAAAsG,UAAiB,GACjBtG,KAAA4G,uBAA8B,GAC9B5G,KAAA6G,uBAA8B,GAC9B7G,KAAA+G,kBAAyB,GAEzB/G,KAAAkG,UAAiB,GACjBlG,KAAA0G,eAAsB,GACtB1G,KAAAoG,gBAAuB,GACvBpG,KAAAiH,gBAAkB,GACjBjH,KAAA8F,OAAc,KAgFf9F,KAAAyK,aAAoB,GACpBzK,KAAAiJ,aAAmB,GAClBjJ,KAAA0K,YAAsBC,UACtB3K,KAAA4K,WAAqBD,UAUzB3K,KAAK4K,WAAa5K,KAAK0I,OAAOC,IAC9BD,EAAOmC,OAAO3F,UAAS,SAAC4F,GAClBA,aAAiBC,EAAAA,gBACnBnG,EAAK8F,YAAc9F,EAAKgG,WACxBhG,EAAKgG,WAAaE,EAAMnC,OAK9B3I,KAAKwK,MAAMQ,OAAO9F,UAAS,SAAC8F,GAE1BpG,EAAKqE,aAAe+B,EAAa,OAOnChL,KAAK4D,OAAO5D,KAAKqH,aAAa,EAAE,QAChCpF,QAAQC,IAAIlC,KAAK4D,QACjB5D,KAAK6D,cAAc0E,IAAI,SAASvI,KAAK4D,QACrC5D,KAAKgI,UAAYhI,KAAKsK,GAAGW,MAAM,CAC7BC,MAAO,CAAC,GAAIC,EAAAA,WAAWC,QAAQ,CAACD,EAAAA,WAAWE,SAAUF,EAAAA,WAAWG,QAAQ,+EACxEC,SAAU,CAAC,GAAIJ,EAAAA,WAAWE,YClJhC,IAAAG,yBA2CCC,EAAAA,SAAQ/L,KAAA,CAAC,CACRgM,QAAS,CACPC,EAAAA,WACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,sBACAC,EAAAA,eACAC,EAAAA,qBACAC,EAAAA,gBACAC,EAAAA,sBACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,eACAC,EAAAA,iBACAC,EAAAA,oBACAC,EAAAA,gBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,mBACAC,EAAAA,qBACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,iBACAC,EAAAA,gBACAC,EAAAA,qBACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,iBACAC,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,qBAG6B5C,IA9CjC,SAAAA,MC3CA,IAAA6C,IAqCE3K,OAAAkC,eACIyI,GAAAxO,UAAA,YAAS,KADb,SACcyO,GACZtO,KAAKuO,eAAiB,GAAkB,gBACxCvO,KAAKuO,eAAiBD,mCAKxB5K,OAAAkC,eACIyI,GAAAxO,UAAA,aAAU,KADd,SACgBsG,GACdnG,KAAKoG,gBAAkB,GAAmB,gBAC1CpG,KAAKoG,gBAAkBD,mCAGzBzC,OAAAkC,eACIyI,GAAAxO,UAAA,YAAS,KADb,SACc2O,GACZxO,KAAKyO,eAAiB,GAAkB,gBACxCzO,KAAKyO,eAAiBD,mCAI1B9K,OAAAkC,eAEIyI,GAAAxO,UAAA,OAAI,KAFR,SAESoG,GACPjG,KAAKkG,UAAYD,mCAGnBvC,OAAAkC,eAEIyI,GAAAxO,UAAA,aAAU,KAFd,SAEe6O,GACb1O,KAAK4J,KAAO8E,mCAGdhL,OAAAkC,eACIyI,GAAAxO,UAAA,WAAQ,KADZ,SACa8O,GACX3O,KAAK4O,UAAYD,mCAIjBjL,OAAAkC,eACWyI,GAAAxO,UAAA,cAAW,KADtB,SACuBgP,GACrB7O,KAAK8O,iBAAmBD,EACxB5M,QAAQC,IAAIlC,KAAK8O,mDAInBpL,OAAAkC,eACIyI,GAAAxO,UAAA,oBAAiB,KADrB,SACsB8G,GACpB3G,KAAK6G,uBAAyB,GAAoB,gBAClD7G,KAAK6G,uBAAyBF,mCAIhCjD,OAAAkC,eACIyI,GAAAxO,UAAA,mBAAgB,KADpB,SACqB8G,GACnB3G,KAAK+O,sBAAwB,GAAoB,gBACjD/O,KAAK+O,sBAAwBpI,mCAsB/B0H,GAAAxO,UAAAqH,SAAA,WAAA,IAAAtC,EAAA5E,KACEA,KAAKmH,WAAWhH,iBAChBiH,WAAU,WACRxC,EAAKuC,WAAWrH,aAAa8E,EAAK6J,iBACjC,IAIHzO,KAAKmH,WAAW3G,mBAChB4G,WAAU,WACRxC,EAAKuC,WAAW7G,eAAesE,EAAKkK,iBAAiBvK,WACpD,KAQL8J,GAAAxO,UAAAmP,iBAAA,WAAA,IAAApK,EAAA5E,KAOE,IAAK,IAAI+H,KANT/H,KAAKuK,KAAKzG,IAAI9D,KAAKyO,eAAiB,gBAAgBvJ,UAAS,SAACjC,GAC5DhB,QAAQC,IAAIe,KAEdhB,QAAQC,IAAI,QACZlC,KAAKmH,WAAW3C,cAAcU,UAAS,SAAEmD,MAE3BrI,KAAKiP,WAAWhH,SAC5BjI,KAAKiP,WAAWhH,SAASF,GAAGG,gBAE9B,GAAIlI,KAAKiP,WAAW9G,MAAO,KAErB+G,EAAelP,KAAKiP,WAAWlP,MACnCmP,EAAQrG,KAAO7I,KAAK4O,UACpB3M,QAAQC,IAAIgN,OAER9G,EAAY,CACdA,KAAQ8G,EACRC,OAAUnP,KAAK8O,iBAAiBK,QAElClN,QAAQC,IAAIkG,GACZpI,KAAKmH,WAAWpF,QAAQqG,GAAMlD,UAAS,SAAEmD,OACnCjD,EACJA,EAASiD,EACTpG,QAAQC,IAAIkD,GAES,WAAjBA,EAAOkD,QACS1D,EAAKwK,OAAOC,KAAKC,GAAuB,CACxDC,MAAO,QACPnH,KAAM,CAACrI,MAAOqF,EAAOkD,OAAQkH,IAAK5K,EAAKgF,QAMzChF,EAAKsE,cAAcC,aAGnBvE,EAAKO,QAAUC,EAAOgE,QAW9BiF,GAAAxO,UAAA2J,eAAA,WACExJ,KAAK0I,OAAOM,cAAc,IAAMhJ,KAAK6G,uBAAuB4C,OAK9D4E,GAAAxO,UAAA4P,MAAA,WACEzP,KAAK0I,OAAOM,cAAc,IAAMhJ,KAAK+O,sBAAsBtF,OAG7D4E,GAAAxO,UAAAwJ,eAAA,SAAeC,GACbtJ,KAAKiP,WAAWhH,SAASqB,GAAKC,mBAEhC8E,GAAAxO,UAAA8J,eAAA,SAAeC,GACb5J,KAAK0I,OAAOM,cAAc,IAAKY,yBAvLlCC,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,cACVC,SAAA,ksJAfkBC,EAAAA,mBACXvF,EAAAA,kBACAwF,EAAAA,cAC+ByF,EAAAA,iBAC/B9P,8CAqBNuK,EAAAA,UAASzK,KAAA,CAAC0K,EAAAA,uCAWVC,EAAAA,0BAQAA,EAAAA,yBAMAA,EAAAA,oBAOFA,EAAAA,0BAMAA,EAAAA,wBAMAA,EAAAA,2BAMEA,EAAAA,iCAOAA,EAAAA,gCAOAA,EAAAA,SA6GHgE,IAlGE,SAAAA,GAAmB/D,EAAwBC,EAAyB7B,EAAuB0G,EAA0BjI,GAAlGnH,KAAAsK,GAAAA,EAAwBtK,KAAAuK,KAAAA,EAAyBvK,KAAA0I,OAAAA,EAAuB1I,KAAAoP,OAAAA,EAA0BpP,KAAAmH,WAAAA,EAjF9GnH,KAAAD,MAAW,GACXC,KAAA4J,KAAU,GACV5J,KAAAwP,IAAS,GACTxP,KAAAmF,QAAe,GAKfnF,KAAAuO,eAAsB,GACtBvO,KAAAyO,eAAsB,GACtBzO,KAAA6G,uBAA8B,GAC9B7G,KAAA+O,sBAA6B,GAC7B/O,KAAA8O,iBAAwB,GACxB9O,KAAAkG,UAAiB,GACjBlG,KAAA4O,UAAiB,GACjB5O,KAAAoG,gBAAuB,GAmE5BpG,KAAKiP,WAAajP,KAAKsK,GAAGW,MAAM,CAC9BC,MAAO,CAAC,GAAIC,EAAAA,WAAWC,QAAQ,CAACD,EAAAA,WAAWE,SAAUF,EAAAA,WAAWG,QAAQ,+EACxEqE,UAAW,CAAC,GAAIxE,EAAAA,WAAWE,UAC3BuE,SAAU,CAAC,GAAIzE,EAAAA,WAAWE,UAC1BE,SAAU,CAAC,GAAIJ,EAAAA,WAAWE,YAI5BrL,KAAKuK,KAAKzG,IAAI9D,KAAKyO,eAAiB,gBAAgBvJ,UAAS,SAACjC,GAC5DhB,QAAQC,IAAIe,aAyGhBqM,GAAAzP,UAAAgQ,UAAA,WACE7P,KAAK8P,UAAUC,8BAflBlG,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,eACVC,SAAA,oeAxMwBiG,EAAAA,gDA+MrBC,EAAAA,OAAMvQ,KAAA,CAACwQ,EAAAA,sBASZZ,IAXE,SAAAA,GACSQ,EACyB1H,GADzBpI,KAAA8P,UAAAA,EACyB9P,KAAAoI,KAAAA,EAC9BnG,QAAQC,IAAIkG,GCpNlB,IAAA+H,IA8BEzM,OAAAkC,eACEuK,GAAAtQ,UAAA,aAAU,KADZ,SACcsG,GACdnG,KAAKoG,gBAAkB,GAAmB,gBAC1CpG,KAAKoG,gBAAkBD,mCAGvBzC,OAAAkC,eACIuK,GAAAtQ,UAAA,YAAS,KADb,SACcuQ,GACZpQ,KAAKqQ,eAAiB,GAAkB,gBACxCrQ,KAAKqQ,eAAiBD,mCAGxB1M,OAAAkC,eACIuK,GAAAtQ,UAAA,YAAS,KADb,SACcyO,GACZtO,KAAKuO,eAAiB,GAAkB,gBACxCvO,KAAKuO,eAAiBD,mCAIxB5K,OAAAkC,eACIuK,GAAAtQ,UAAA,YAAS,KADb,SACc2O,GACZxO,KAAKyO,eAAiB,GAAkB,gBACxCzO,KAAKyO,eAAiBD,mCAIxB9K,OAAAkC,eAEIuK,GAAAtQ,UAAA,OAAI,KAFR,SAESoG,GACPjG,KAAKkG,UAAYD,mCAGnBvC,OAAAkC,eAEIuK,GAAAtQ,UAAA,cAAW,KAFf,SAEgByQ,GACdtQ,KAAK8O,iBAAmBwB,mCAI1B5M,OAAAkC,eACIuK,GAAAtQ,UAAA,oBAAiB,KADrB,SACsB8G,GACpB3G,KAAK4G,uBAAyB,GAAoB,gBAClD5G,KAAK4G,uBAAyBD,mCAIhCjD,OAAAkC,eACIuK,GAAAtQ,UAAA,mBAAgB,KADpB,SACqB8G,GACnB3G,KAAK+O,sBAAwB,GAAoB,gBACjD/O,KAAK+O,sBAAwBpI,mCAuB/BwJ,GAAAtQ,UAAAqH,SAAA,WAAA,IAAAtC,EAAA5E,KACEA,KAAKmH,WAAWhH,iBAChBiH,WAAU,WACRxC,EAAKuC,WAAWrH,aAAa8E,EAAK6J,iBACjC,IAIHzO,KAAKmH,WAAW3G,mBAChB4G,WAAU,WACRxC,EAAKuC,WAAW7G,eAAesE,EAAKkK,iBAAiBvK,WACpD,KAIL4L,GAAAtQ,UAAA0Q,qBAAA,WAAA,IACMxI,EADNnD,EAAA5E,KAIE,IAAK+H,KAAK/H,KAAKwQ,mBAAmBvI,SAChCjI,KAAKwQ,mBAAmBvI,SAASF,GAAGG,gBAEtC,GAAIlI,KAAKwQ,mBAAmBrI,MAAO,CAIjBnI,KAAKyO,mBACjBrG,EAAYpI,KAAKwQ,mBAAmBzQ,MAExCqI,EAAKqI,UAAYzQ,KAAKqQ,eAEtBrQ,KAAKmH,WAAWpD,eAAeqE,GAAMlD,UAAS,SAAEmD,OAE1CjD,EAGiB,YAFrBA,EAASiD,GAEEC,QAGT1D,EAAKsE,cAAcC,YACnBvE,EAAKO,QAAU,IAIfP,EAAKO,QAAUC,EAAOgE,QAa9B+G,GAAAtQ,UAAA6Q,aAAA,WACE1Q,KAAK2Q,SAASC,kBAAkBC,GAAmB,CACjDC,SAAmC,IAAzB9Q,KAAK+Q,qBAOnBZ,GAAAtQ,UAAA6J,OAAA,WACE1J,KAAK0I,OAAOM,cAAc,IAAMhJ,KAAK4G,yBAIrCuJ,GAAAtQ,UAAA4P,MAAA,WACEzP,KAAK0I,OAAOM,cAAc,IAAMhJ,KAAK+O,wBAGzCoB,GAAAtQ,UAAAwJ,eAAA,SAAeC,GACbtJ,KAAKwQ,mBAAmBvI,SAASqB,GAAKC,mBAIxC4G,GAAAtQ,UAAA8J,eAAA,SAAeC,GACb5J,KAAK0I,OAAOM,cAAc,IAAKY,yBAhLlCC,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,sBACVC,SAAA,m+GARkBC,EAAAA,mBAEXC,EAAAA,cACArK,UACAoR,EAAAA,uDAYN7G,EAAAA,UAASzK,KAAA,CAAC0K,EAAAA,wCAaVC,EAAAA,yBAMAA,EAAAA,yBAMAA,EAAAA,yBAOAA,EAAAA,oBAOAA,EAAAA,2BAMAA,EAAAA,iCAOAA,EAAAA,gCAOAA,EAAAA,SA+GH8F,IAxGE,SAAAA,GACS7F,EACA5B,EACAvB,EACCwJ,GAHD3Q,KAAAsK,GAAAA,EACAtK,KAAA0I,OAAAA,EACA1I,KAAAmH,WAAAA,EACCnH,KAAA2Q,SAAAA,EA1EH3Q,KAAAmF,QAAe,GACfnF,KAAAoG,gBAAuB,GAMvBpG,KAAAuO,eAAsB,GACtBvO,KAAAyO,eAAsB,GACtBzO,KAAA4G,uBAA8B,GAC9B5G,KAAA+O,sBAA6B,GAC5B/O,KAAAqQ,eAAsB,GACvBrQ,KAAA8O,iBAAwB,GACxB9O,KAAAkG,UAAiB,GACjBlG,KAAA+Q,kBAAoB,EAiEzB/Q,KAAKwQ,mBAAqBxQ,KAAKsK,GAAGW,MAAM,CACtCC,MAAO,CAAC,GAAIC,EAAAA,WAAWC,QAAQ,CAACD,EAAAA,WAAWE,SAAUF,EAAAA,WAAWG,QAAQ,8GAiG7EzB,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,mBACVC,SAAA,4FACS,kGAOsB8G,IAVjC,SAAAA,MC9LA,IAAAI,IA6BEvN,OAAAkC,eACIqL,GAAApR,UAAA,gBAAa,KADjB,SACkBqR,GAChBlR,KAAKmR,mBAAqB,GAAsB,gBAChDnR,KAAKmR,mBAAqBD,EAC1BjP,QAAQC,IAAIlC,KAAKmR,qDAKnBzN,OAAAkC,eACIqL,GAAApR,UAAA,YAAS,KADb,SACc2O,GACZxO,KAAKyO,eAAiB,GAAkB,gBACxCzO,KAAKyO,eAAiBD,EACtBvM,QAAQC,IAAIlC,KAAKyO,iDAInB/K,OAAAkC,eAEWqL,GAAApR,UAAA,cAAW,KAFtB,SAEuBgP,GACrB7O,KAAK8O,iBAAmBD,mCAG1BnL,OAAAkC,eAEEqL,GAAApR,UAAA,OAAI,KAFN,SAEOoG,GACPjG,KAAKkG,UAAYD,mCA6BjBgL,GAAApR,UAAAqH,SAAA,WAAA,IAAAtC,EAAA5E,KACEA,KAAKmH,WAAWhH,iBAChBiH,WAAU,WACRxC,EAAKuC,WAAWrH,aAAa8E,EAAK6J,iBACjC,IAIHzO,KAAKmH,WAAW3G,mBAChB4G,WAAU,WACRxC,EAAKuC,WAAW7G,eAAesE,EAAKkK,iBAAiBvK,WACpD,KAML0M,GAAApR,UAAAuR,aAAA,SAAaC,EAAqBC,GAChC,OAAA,SAAQrG,OACFsG,EAAgBtG,EAAMhD,SAASoJ,GACjCG,EAAuBvG,EAAMhD,SAASqJ,GACxC,OAAIC,EAAcxR,QAAUyR,EAAqBzR,MACxCyR,EAAqBC,UAAU,CAAEC,eAAe,IAGhDF,EAAqBC,UAAU,QAQ5CR,GAAApR,UAAA8R,oBAAA,WAAA,IAEM5J,EAFNnD,EAAA5E,KAGE,IAAK+H,KAFL9F,QAAQC,IAAIlC,KAAK4R,kBAAkB7R,OAEzBC,KAAK4R,kBAAkB3J,SAC/BjI,KAAK4R,kBAAkB3J,SAASF,GAAGG,gBAErC,GAAIlI,KAAK4R,kBAAkBzJ,MAAO,KAE5BC,EAAY,CACdA,KAFe,CAAEmD,SAAYvL,KAAK4R,kBAAkB7R,MAAMwL,SAAUsG,WAAc7R,KAAK6R,YAGvF1C,OAAUnP,KAAK8O,iBAAiBK,QAMlCnP,KAAKmH,WAAWpF,QAAQqG,GAAMlD,UAAS,SAAEmD,OACnCjD,EACJA,EAASiD,EACTpG,QAAQC,IAAIkD,GACS,WAAjBA,EAAOkD,QACT1D,EAAK8L,eACL9L,EAAKsE,cAAcC,YACnBvE,EAAKO,QAAU,IAEfP,EAAKO,QAAUC,EAAOgE,QAQ9B6H,GAAApR,UAAA6Q,aAAA,WACE1Q,KAAK2Q,SAASC,kBAAkBkB,GAAwB,CACtDhB,SAAmC,IAAzB9Q,KAAK+Q,qBAQnBE,GAAApR,UAAAwJ,eAAA,SAAeC,GACbtJ,KAAK4R,kBAAkB3J,SAASqB,GAAKC,wCA1JxCM,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,qBACVC,SAAA,+kFAROC,EAAAA,mBACAvF,EAAAA,kBACAwF,EAAAA,cAAQC,EAAAA,sBACRtK,UACAoR,EAAAA,uDAYN7G,EAAAA,UAASzK,KAAA,CAAC0K,EAAAA,2CAYVC,EAAAA,yBASAA,EAAAA,2BAQAA,EAAAA,oBAMAA,EAAAA,SAmHH4G,IApGE,SAAAA,GAAmB3G,EAAwBC,EAAyB7B,EAAuB8B,EAA8BrD,EAAiCwJ,GAA1J,IAAA/L,EAAA5E,KAAmBA,KAAAsK,GAAAA,EAAwBtK,KAAAuK,KAAAA,EAAyBvK,KAAA0I,OAAAA,EAAuB1I,KAAAwK,MAAAA,EAA8BxK,KAAAmH,WAAAA,EAAiCnH,KAAA2Q,SAAAA,EAhDnJ3Q,KAAAmR,mBAA0B,GAC1BnR,KAAAyO,eAAsB,GACtBzO,KAAAmF,QAAe,GACfnF,KAAA8O,iBAAwB,GAExB9O,KAAAkG,UAAiB,GAEjBlG,KAAA+Q,kBAAoB,EA2CzB/Q,KAAKwK,MAAMQ,OAAO9F,UAAS,SAAC8F,GAE1BpG,EAAKiN,WAAa7G,EAAc,MAChC/I,QAAQC,IAAI0C,EAAKiN,cAGnB7R,KAAK4R,kBAAoB5R,KAAKsK,GAAGW,MAAM,CAErCM,SAAU,CAAC,GAAIJ,EAAAA,WAAWE,UAC1B0G,gBAAiB,CAAC,GAAI5G,EAAAA,WAAWE,WAChC,CACD2G,UAAWhS,KAAKoR,aAAa,WAAY,kDAyF9CvH,EAAAA,UAASnK,KAAA,CAAC,CACToK,SAAU,mBACVC,SAAU,wCACD,kGAO2B+H,IAVtC,SAAAA,MCrKA,IAAAG,IAgBSA,GAAApS,UAAAqS,eAAP,WAKE,OAJAjQ,QAAQC,IAAI,6BACZD,QAAQC,IAAI,SAASlC,KAAK0K,aAC1BzI,QAAQC,IAAI,WAAWlC,KAAK4K,YAC5B3I,QAAQC,IAAI,6BACLlC,KAAK0K,kCArBfjL,EAAAA,uDAHQwK,EAAAA,UA0BTgI,IAjBE,SAAAA,GAAoBvJ,GAApB,IAAA9D,EAAA5E,KAAoBA,KAAA0I,OAAAA,EAHZ1I,KAAA0K,YAAsBC,UACtB3K,KAAA4K,WAAqBD,UAG3B3K,KAAK4K,WAAa5K,KAAK0I,OAAOC,IAC9BD,EAAOmC,OAAO3F,UAAS,SAAC4F,GAClBA,aAAiBC,EAAAA,gBACnBnG,EAAK8F,YAAc9F,EAAKgG,WACxBhG,EAAKgG,WAAaE,EAAMnC,OCfhC,IAAAwJ,yBAaC1G,EAAAA,SAAQ/L,KAAA,CAAC,CACR0S,aAAc,CACZzM,GACA0I,GACA8B,GACAc,GACA3B,GACAuB,GACAiB,IAIFO,QAAS,CACP7G,GACA8G,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,wBACAC,EAAAA,aACAC,EAAAA,kBAEFhH,QAAS,CAAC/F,GAAgB0I,GAAiB8B,GAAyBc,IACpE0B,UAAW,CAAC/S,GAAYqS,IACxBW,UAAW,GACXC,QAAS,CAACC,EAAAA,uBAAwBC,EAAAA,kBAClCC,gBAAiB,CAAE1D,GAAuBuB,GAAmBiB,QAEpCK,IA1B3B,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor() { }\n}\n","import { ElementRef, EventEmitter, Injectable, Input, ViewChild } from '@angular/core';\nimport { switchMap, map, takeWhile } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n// for setting observables to get serverurl and endpointurl from app\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport{CookieService} from 'ngx-cookie-service';\n\n\n@Injectable({   \n  providedIn: 'root'\n})\nexport class ApiService {\n\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken:any=this.cookieService.get('jwtToken');\n  // public accesstoken:any='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJleHAiOjE1NjgzNTgyMTAsImlhdCI6MTU2ODI3MTgxMH0.2ltvxVKwfX1uwMOwQ2Zzgp1K2jiaCDj051Wyho0Iw-Q';\n  fileservername: any = [];\n  serverUrl: any;\n  addendpointUrl: any;\n  uploadEndpointUrl:any; //souresh\n  updateendpointUrl: any;\n  deletesingle_endpointUrl: any;\n  updatestatus_single_endpointUrl: any;\n  deletemultiple_endpointUrl: any;\n  updatestatus_multiple_endpointUrl: any;\n  getdata_endpointUrl: any;\n  private subjectForServerUrl = new Subject<any>();\n  private subjectForaddEndpointUrl = new Subject<any>();\n  private subjectForuploadEndpointUrl = new Subject<any>();  //added by souresh\n  private subjectForupdateEndpointUrl = new Subject<any>();\n  private subjectFordeletesingleEndpointUrl = new Subject<any>();\n  private subjectForupdatestatusSingleEndpointUrl = new Subject<any>();\n  private subjectForGetdataEndpointUrl = new Subject<any>();\n  public subscriptionServer: Subscription;\n  public subscriptionaddEndpoint: Subscription;\n  public subscriptionuploadEndpoint: Subscription;   //added by souresh\n  public subscriptionupdateEndpoint: Subscription;\n  public subscriptiondeletesingleEndpoint: Subscription;\n  public subscriptionupdatestatusSingleEndpoint: Subscription;\n  public subscriptionGetdataEndpoint: Subscription;\n\n  constructor(private _http: HttpClient,\n    private _authHttp: HttpClient,private cookieService :CookieService) {\n    this.subscriptionServer = this.getServerUrl().subscribe(message => {\n     let result: any;\n      result = message;\n      if (result != null) {\n        this.serverUrl = result;\n      } else {\n        this.serverUrl = null;\n      }\n    });\n    this.subscriptionaddEndpoint = this.getaddEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.addendpointUrl = result;\n      } else {\n        this.addendpointUrl = null;\n      }\n    });\n    /*********added by souresh***********/\n    this.subscriptionuploadEndpoint=this.getuploadEndpoint().subscribe(message=>{\n      let result:any;\n      result=message;\n        if(result!=null){\n          this.uploadEndpointUrl = result;\n        } else{\n          this.uploadEndpointUrl = null;\n        }\n    })\n    /************souresh end here**************/\n    this.subscriptionupdateEndpoint = this.getupdateEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updateendpointUrl = result;\n      } else {\n        this.updateendpointUrl = null;\n      }\n    });\n    this.subscriptiondeletesingleEndpoint = this.getdeletesingleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.deletesingle_endpointUrl = result;\n      } else {\n        this.deletesingle_endpointUrl = null;\n      }\n    });\n    this.subscriptionupdatestatusSingleEndpoint = this.getupdatestatus_singleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updatestatus_single_endpointUrl = result;\n      } else {\n        this.updatestatus_single_endpointUrl = null;\n      }\n    });\n    this.subscriptionGetdataEndpoint = this.getdataEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.getdata_endpointUrl = result;\n      } else {\n        this.getdata_endpointUrl = null;\n      }\n    });\n\n    \n  }\n\n  setServerUrl(value: any) {\n    this.subjectForServerUrl.next(value);\n  }\n  public clearServerUrl() {\n    this.subjectForServerUrl.next(null);\n  }\n  public getServerUrl(): Observable<any> {\n    return this.subjectForServerUrl.asObservable();\n  }\n\n  setaddEndpoint(value: any) {\n    this.subjectForaddEndpointUrl.next(value);\n  }\n  public clearaddEndpoint() {\n    this.subjectForaddEndpointUrl.next(null);\n  }\n  public getaddEndpoint(): Observable<any> {\n    return this.subjectForaddEndpointUrl.asObservable();\n  }\n/*****added by souresh******/\n  setuploadEndpont(value:any){\n    this.subjectForuploadEndpointUrl.next(value);\n  }\n  public clearuploadEndpoint(){\n    this.subjectForuploadEndpointUrl.next(null);\n  }\n  public getuploadEndpoint(): Observable <any> {\n    return this.subjectForuploadEndpointUrl.asObservable();\n  }\n   /********souresh end here********/\n\n\n  setupdateEndpoint(value: any) {\n    this.subjectForupdateEndpointUrl.next(value);\n  }\n  public clearupdateEndpoint() {\n    this.subjectForupdateEndpointUrl.next(null);\n  }\n  public getupdateEndpoint(): Observable<any> {\n    return this.subjectForupdateEndpointUrl.asObservable();\n  }\n\n  setdeletesingleEndpoint(value: any) {\n    this.subjectFordeletesingleEndpointUrl.next(value);\n  }\n  public cleardeletesingleEndpoint() {\n    this.subjectFordeletesingleEndpointUrl.next(null);\n  }\n  public getdeletesingleEndpoint(): Observable<any> {\n    return this.subjectFordeletesingleEndpointUrl.asObservable();\n  }\n\n  setupdatestatus_singleEndpoint(value: any) {\n    this.subjectForupdatestatusSingleEndpointUrl.next(value);\n  }\n  public clearupdatestatus_singleEndpoint() {\n    this.subjectForupdatestatusSingleEndpointUrl.next(null);\n  }\n  public getupdatestatus_singleEndpoint(): Observable<any> {\n    return this.subjectForupdatestatusSingleEndpointUrl.asObservable();\n  }\n\n  setgetdataEndpoint(value: any) {\n    this.subjectForGetdataEndpointUrl.next(value);\n  }\n  public cleargetdataEndpoint() {\n    this.subjectForGetdataEndpointUrl.next(null);\n  }\n  public getdataEndpoint(): Observable<any> {\n    return this.subjectForGetdataEndpointUrl.asObservable();\n  }\n\n\n\n  isTokenExpired() {\n\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(requestdata: any) {\n    console.log('in adddata apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n\n    // console.log('httpoptions',httpOptions,this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*******added by souresh************/\n  uploadFile(requestdata:any){\n    const httpOptions={\n        headers: new HttpHeaders({\n          'Content-Type':'application/json',\n          'access-token':this.accesstoken          //hard code written access-token(temp)\n        })\n    };\n    var result=this._http.post(this.serverUrl + this.uploadEndpointUrl,JSON.stringify(requestdata),httpOptions).pipe(map(res=>res));\n    return result;\n  }\n  /*******souresh end here********/\n  UpdateData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updateendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.getdata_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n/*************** Added by himadri start here ***************/ \n  addLogin(requestdata: any) {\n    console.log('in addLogin apiservice');\n    const returnedTarget = Object.assign(requestdata,{'secret':this.cookieService.get('secret')});\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n        // 'Authorization': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n\n    // console.log(this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*************** Added by himadri end here ***************/ \n\n/*************** Added by himadri start here ***************/ \nforgetPassword(requestdata: any) {\n  console.log('in forgetPassword apiservice');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': this.accesstoken          //hard code written access-token(temp)\n    })\n  };\n\n  // console.log(this.serverUrl,requestdata);\n  var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n  return result;\n}\n/*************** Added by himadri end here ***************/ \n\n\n  deleteSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  CustomRequest(requestdata: any, endpoint:any ) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl +endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  jwtTokenGet() {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':'application/json'\n      })\n    };\n    var result = this._http.get(this.serverUrl +'gettemptoken').pipe(map(res => res));\n    return result;\n  }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators, MinLengthValidator, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\nimport { ApiService } from './api.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n\n\n@Component({\n  selector: 'lib-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  public message: any = '';\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public fromTitleValue: any = '';\n  public serverURL: any = '';\n  public signUpRouteingUrlValue: any = '';\n  public forgetRouteingUrlValue: any = '';\n  public routerStatusValue: any = '';\n  public endpointValue: any;\n  public logoValue: any = '';\n  public cookieSetValue: any = '';\n  public buttonNameValue: any = '';\n  public defaultUrlValue = '';\n  private loader: any = null;\n  public secret:any;\n  @Input()\n  set forLoader(forLoaderVal: any) {\n    this.loader = (forLoaderVal) || '<no name set>';\n    this.loader = forLoaderVal;\n    // console.log('++++',this.loader)\n    //console.log('++++-----',this.loader)\n  }\n\n  @Input()         // Set the project name\n  set fromTitle(fromTitleVal: any) {\n    this.fromTitleValue = (fromTitleVal) || '<no name set>';\n    this.fromTitleValue = fromTitleVal;\n\n  }\n  @Input()      // set the from logo\n  set logo(logoVal : any) {\n    this.logoValue = logoVal;\n  }\n@Input()\nset buttonName (buttonNameVal :any){\n  this.buttonNameValue = (buttonNameVal) || '<no name set>';\n  this.buttonNameValue = buttonNameVal\n}\n\n  @Input()        // setting the server url from project\n  set fullUrl(fullUrlVal: any) {\n    this.serverURL = (fullUrlVal) || '<no name set>';\n    this.serverURL = fullUrlVal;\n\n  }\n  @Input()\n\n  set endpoint(endpointVal: any) {\n    this.endpointValue = endpointVal;\n  }\n\n@Input()\n\npublic set cookieSet(v : any) {\n  this.cookieSetValue = v;\n}\n\n\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set signUpRouteingUrl(routeingUrlval: any) {\n    this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.signUpRouteingUrlValue = routeingUrlval;\n    // console.log(this.signUpRouteingUrlValue)\n  }\n\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set forgetRouteingUrl(routeingUrlval: any) {\n    this.forgetRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.forgetRouteingUrlValue = routeingUrlval;\n    // console.log(this.forgetRouteingUrlValue)\n  }\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set routerStatus(routerStatusval: any) {\n    this.routerStatusValue = (routerStatusval) || '<no name set>';\n    this.routerStatusValue = routerStatusval;\n    console.log(this.routerStatusValue);\n  }\n\n  @Input()\n  set defaultLoginUrl(defaultUrlVal: any) {\n    this.defaultUrlValue = (defaultUrlVal) || '<no name set>';\n    this.defaultUrlValue = defaultUrlVal;\n    // console.log(this.defaultUrlValue)\n  }\n \n\n\n\n\n  public loginForm: FormGroup;\n  public project_name: any = '';\n  public redirect_url:any = '';\n  private previousUrl: string = undefined;\n  private currentUrl: string = undefined;\n\n\n  constructor(public fb: FormBuilder,\n     public http: HttpClient,\n     public router: Router,\n     public apiService: ApiService,\n     public cookieService: CookieService,\n     public route: ActivatedRoute) {\n       \n      this.currentUrl = this.router.url;\n      router.events.subscribe(event => {\n        if (event instanceof NavigationEnd) {\n          this.previousUrl = this.currentUrl;\n          this.currentUrl = event.url;\n        };\n      });\n    // console.log(\"++++++++++++++++++++++++++++=________+++++ this.previousUrl\",this.previousUrl)\n    // console.log(\"++++++++++++++++++++++++++++=________+++++ this.currentUrl\",this.currentUrl)\n    this.route.params.subscribe(params=>{\n      // console.log('++++++',params['id']);\n      this.redirect_url = params['path'];\n      // if (params['id'] != '' || params['id'] != null) {\n      //   this.redirect_url = params['id'];\n      // }\n      // console.log('redirect_url',this.redirect_url)\n    });\n    /**secret key workes here */\n    this.secret=this.randomString(9,'aA#!');\n    console.log(this.secret);\n    this.cookieService.set('secret',this.secret);\n    this.loginForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n      password: ['', Validators.required]\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       // Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverURL);       // set the server url \n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       // clear the endpoint \n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.endpointValue);       // set the endpoint\n    }, 50);\n    // console.log(this.addEndpointData.endpoint);\n\n  }\n\n  randomString(length, chars) {\n    var mask = '';\n    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';\n    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    if (chars.indexOf('#') > -1) mask += '0123456789';\n    if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:\";\\'<>?,./|\\\\';\n    var result = '';\n    for (var i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];\n    return result;\n  }\n\n/********* Login Form Submit start here*********/ \n  loginFormSubmit() {\n    this.loader = 1;\n    console.log(this.loader)\n    let x: any;\n    // use for validation checking\n\n    for (x in this.loginForm.controls) {\n      this.loginForm.controls[x].markAsTouched();\n    }\n\n    if (this.loginForm.valid) {\n\n     \n      let data: any = this.loginForm.value;\n      this.apiService.addLogin(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n\n        if (result.status == \"success\") {\n         \n          this.cookieService.set('user_details', JSON.stringify(result.item[0]));\n          this.cookieService.set('jwtToken', result.token);\n          if (this.router.url == this.defaultUrlValue) {\n            for (const key in this.routerStatusValue.data) {\n              if (result.item[0].type === this.routerStatusValue.data[key].type) {\n                console.warn(this.routerStatusValue.data[key].routerNav);\n                this.router.navigateByUrl('/' + this.routerStatusValue.data[key].routerNav);\n                this.loader = 0;     // navigate to dashboard url \n                console.log(this.loader)\n              }\n            }\n            \n          } else {\n            this.loader = 0; \n            // console.log('++++++ redirect_url//',this.redirect_url);\n            this.router.navigateByUrl(this.redirect_url);\n        }\n        this.loader = 0;\n\n\n          // this is use for reset the from\n          this.formDirective.resetForm();\n          this.message = '';\n        } else {\n          // display error message on html\n          this.message = result.msg;\n        }\n      });\n    }\n\n  }\n\n\n  inputUntouched(val: any) {\n    this.loginForm.controls[val].markAsUntouched();\n  }\n\n  // This is use for navigate this component to forget component \n  forgetpassword() {\n    this.router.navigateByUrl('/' + this.forgetRouteingUrlValue.path);\n  }\n\n  // This is use for navigate this component to sign-Up component \n  signup() {\n    this.router.navigateByUrl('/' + this.signUpRouteingUrlValue.path);\n  }\n\n  customFunction(link: any) {\n    this.router.navigateByUrl('/'+ link);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n Use of this source code is governed by an MIT-style license that\n can be found in the LICENSE file at http://angular.io/license */\n","import { Component, OnInit, Input, Inject, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';\nimport { ApiService } from '../api.service';\n\n\n\nexport interface DialogData {\n  value: string;\n  Url: any;\n}\n\n@Component({\n  selector: 'lib-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent implements OnInit {\n  public value: any='';\n  public link: any='';\n  public Url: any='';\n  public message: any = '';\n\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public formTitleValue: any = '';\n  public serverUrlValue: any = '';\n  public forgetRouteingUrlValue: any = '';\n  public loginRouteingUrlValue: any = '';\n  public addEndpointValue: any = '';\n  public logoValue: any = '';\n  public typevalue: any = '';\n  public buttonNameValue: any = '';\n\n  @Input()         // Set the Form name\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = (formTitleVal) || '<no name set>';\n    this.formTitleValue = formTitleVal;\n    // console.log(this.formTitleValue);\n\n  }\n\n  @Input()\n  set buttonName (buttonNameVal :any){\n    this.buttonNameValue = (buttonNameVal) || '<no name set>';\n    this.buttonNameValue = buttonNameVal\n  }\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    // console.log(this.serverUrlValue);\n\n  }\n@Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n@Input()      // set the from logo\n\nset modaleLogo(modaleLogoVal : any) {\n  this.link = modaleLogoVal;\n}\n\n@Input()\nset userType(typeval: any) {\n  this.typevalue = typeval;\n}\n\n\n  @Input()        // set the endpoint And source\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n    console.log(this.addEndpointValue)\n  }\n\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set forgetRouteingUrl(routeingUrlval: any) {\n    this.forgetRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.forgetRouteingUrlValue = routeingUrlval;\n    // console.log(this.forgetRouteingUrlValue);\n  }\n\n  @Input()          // setting the navigate By login Url from project\n  set loginRouteingUrl(routeingUrlval: any) {\n    this.loginRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.loginRouteingUrlValue = routeingUrlval;\n    // console.log(this.loginRouteingUrlValue);\n  }\n\n\n\n  public signUpForm: FormGroup;\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public dialog: MatDialog, public apiService: ApiService) {\n    this.signUpForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      password: ['', Validators.required]\n    })\n\n\n    this.http.get(this.serverUrlValue + 'gettemptoken').subscribe(res=>{\n      console.log(res);\n    });\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n\n    \n\n  }\n\n\n/********* Sign Up Form Submit start here*********/ \n  signUpFormSubmit() {\n    this.http.get(this.serverUrlValue + 'gettemptoken').subscribe(res=>{\n      console.log(res);\n    });\n    console.log('jhgj')\n    this.apiService.jwtTokenGet().subscribe((response) => {});\n    // use for validation checking\n    for (let x in this.signUpForm.controls) {\n      this.signUpForm.controls[x].markAsTouched();\n    }\n    if (this.signUpForm.valid) {\n      // let link: any = this.fullUrlValue;\n      let allData: any = this.signUpForm.value;\n      allData.type = this.typevalue;\n      console.log(allData);\n\n      let data: any = {\n        'data': allData,\n        \"source\": this.addEndpointValue.source\n      };\n      console.log(data);\n      this.apiService.addData(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n        console.log(result);\n\n        if (result.status == \"success\") {\n          const dialogRef = this.dialog.open(successModalComponent, {\n            width: '250px',\n            data: {value: result.status, Url: this.link}\n          });\n          // this.router.navigateByUrl('/' + )     // navigate to dashboard url \n\n\n          // this is use for reset the from\n          this.formDirective.resetForm();\n        } else {\n          // display error message on html\n          this.message = result.msg;\n        }\n      })\n\n    }\n  }\n\n\n/********* Sign Up Form Submit end here*********/ \n\n  // This is use for navigate this component to forget component \n  forgetpassword() {\n    this.router.navigateByUrl('/' + this.forgetRouteingUrlValue.path);\n  }\n\n\n  // This is use for navigate this component to forget component \n  login() {\n    this.router.navigateByUrl('/' + this.loginRouteingUrlValue.path);\n  }\n\n  inputUntouched(val: any) {\n    this.signUpForm.controls[val].markAsUntouched();\n  }\n  customFunction(link: any) {\n    this.router.navigateByUrl('/'+ link);\n  }\n}\n\n\n@Component({\n  selector: 'successModal',\n  templateUrl: '../successModal.html',\n\n})\nexport class successModalComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<successModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n      console.log(data)\n     }\n\n    \n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n\n\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'lib-forget-password',\n  templateUrl: './forget-password.component.html',\n  styleUrls: ['./forget-password.component.css']\n})\nexport class ForgetPasswordComponent implements OnInit {\n  public message: any = '';\n  public buttonNameValue: any = '';\n\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public forgetPasswordForm: FormGroup;\n  public formTitleValue: any = '';          // This is From title\n  public serverUrlValue: any = '';          //  This is Server url\n  public signUpRouteingUrlValue: any = '';  // setting the navigate By Sign Up Url from project\n  public loginRouteingUrlValue: any = '';  // setting the navigate By login Url from project\n  private domainUrlValue: any = '';          // This is reset password url\n  public addEndpointValue: any = '';        // This is endpoint url\n  public logoValue: any = '';               // This is from logo url\n  public durationInSeconds = 5;             // This is SnackBar set time\n\n\n  @Input()\nset buttonName (buttonNameVal :any){\n  this.buttonNameValue = (buttonNameVal) || '<no name set>';\n  this.buttonNameValue = buttonNameVal\n}\n\n  @Input()         // Set the project email Doman URL\n  set domainUrl(domainUrlVal: any) {\n    this.domainUrlValue = (domainUrlVal) || '<no name set>';\n    this.domainUrlValue = domainUrlVal;\n    // console.log(this.domanUrlValue);\n  }\n  @Input()         // Set the project name\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = (formTitleVal) || '<no name set>';\n    this.formTitleValue = formTitleVal;\n\n  }\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n\n  }\n\n  @Input()      // set the from logo\n\n  set logo(logoVal: any) {\n    this.logoValue = logoVal;\n  }\n\n  @Input()          // set the endpoint and source\n\n  set addEndpoint(addEndpointval: any) {\n    this.addEndpointValue = addEndpointval;\n  }\n\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set signUpRouteingUrl(routeingUrlval: any) {\n    this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.signUpRouteingUrlValue = routeingUrlval;\n    // console.log(this.signUpRouteingUrlValue)\n  }\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set loginRouteingUrl(routeingUrlval: any) {\n    this.loginRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.loginRouteingUrlValue = routeingUrlval;\n    // console.log(this.loginRouteingUrlValue)\n  }\n\n  constructor(\n    public fb: FormBuilder,\n    public router: Router,\n    public apiService: ApiService,\n    private snackBar: MatSnackBar\n  ) {\n\n\n\n    this.forgetPasswordForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n\n    });\n\n\n\n\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n  /********* Forget password  Form Submit start here*********/\n  forgetPasswordSubmit() {\n    let x: any;\n\n    //  This for-loop use for from blank or properly validated checking  \n    for (x in this.forgetPasswordForm.controls) {\n      this.forgetPasswordForm.controls[x].markAsTouched();\n    }\n    if (this.forgetPasswordForm.valid) {    //    validation checking\n\n      // this.openSnackBar();              // open snack-bar function\n\n      let link: any = this.serverUrlValue;\n      let data: any = this.forgetPasswordForm.value;\n\n      data.domainUrl = this.domainUrlValue;\n\n      this.apiService.forgetPassword(data).subscribe((response) => {\n        // console.log(response);\n        let result: any = {};\n        result = response;\n\n        if (result.status == \"success\") {\n          // this.openSnackBar();             // open snack-bar function\n          // this is use for reset the from\n          this.formDirective.resetForm();\n          this.message = '';         // clear the from\n        } else {\n\n          // display error message on html\n          this.message = result.msg;      // show the error message\n\n        }\n      });\n    }\n  }\n\n  /********* Forget password  Form Submit end here*********/\n\n\n  /********* openSnackBar function open start here*********/\n\n\n  openSnackBar() {\n    this.snackBar.openFromComponent(snackBarComponent, {\n      duration: this.durationInSeconds * 1000,\n    });\n  }\n /********* openSnackBar function open end here*********/\n\n\n  // This is use for navigate this component to sign-Up component \n  signup() {\n    this.router.navigateByUrl('/' + this.signUpRouteingUrlValue);\n  }\n\n    // This is use for navigate this component to login component \n    login() {\n      this.router.navigateByUrl('/' + this.loginRouteingUrlValue);\n    }\n\n  inputUntouched(val: any) {\n    this.forgetPasswordForm.controls[val].markAsUntouched();\n  }\n\n\n  customFunction(link: any) {\n    this.router.navigateByUrl('/'+ link);\n  }\n\n\n}\n\n\n@Component({\n  selector: 'snack-bar-modale',\n  templateUrl: 'forget-passwordModale.html',\n  styles: [`\n    .example {\n      color: aliceblue;\n      background-color: yellowgreen;\n    }\n  `],\n})\nexport class snackBarComponent { }\n","import { Component, OnInit, Input, ViewChild, Inject } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'lib-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\n\n\n\nexport class ResetPasswordComponent implements OnInit {\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n  public resetPasswordForm: FormGroup;\n  public fromTitleNameValue: any = '';\n  public serverUrlValue: any = '';\n  public message: any = '';\n  public addEndpointValue: any = '';\n\n  public logoValue: any = '';\n  // public signUpRouteingUrlValue: any = '';\n  public durationInSeconds = 5;             // This is SnackBar set time\n\n\n  @Input()         // Set the Form name\n  set fromTitleName(fromTitleNameVal: any) {\n    this.fromTitleNameValue = (fromTitleNameVal) || '<no name set>';\n    this.fromTitleNameValue = fromTitleNameVal;\n    console.log(this.fromTitleNameValue);\n\n  }\n\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    console.log(this.serverUrlValue);\n\n  }\n\n  @Input()        // set the endpoint and source\n\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n  }\n\n  @Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n\n  // @Input()          // setting the navigate By Sign Up Url from project\n  // set signUpRouteingUrl(routeingUrlval: any) {\n  //   this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n  //   this.signUpRouteingUrlValue = routeingUrlval;\n  //   console.log(this.signUpRouteingUrlValue);\n  // }\n  public accesscode: string;\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public route: ActivatedRoute, public apiService: ApiService,  private snackBar: MatSnackBar) {\n\n    this.route.params.subscribe(params => {\n\n      this.accesscode = params['token'];\n      console.log(this.accesscode);\n    })\n\n    this.resetPasswordForm = this.fb.group({\n      // password: ['',  Validators.compose([Validators.required, Validators.minLength(4)])],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n    }, {\n      validator: this.machpassword('password', 'confirmPassword')\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       // Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);       // set the server url \n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       // clear the endpoint \n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);       // set the endpoint\n    }, 50);\n    // console.log(this.addEndpointData.endpoint);\n\n  }\n  //  this function is use for mach password and confirm Password \n\n  machpassword(passwordkye: string, confirmpasswordkye: string) {\n    return (group: FormGroup) => {\n      let passwordInput = group.controls[passwordkye],\n        confirmpasswordInput = group.controls[confirmpasswordkye];\n      if (passwordInput.value !== confirmpasswordInput.value) {\n        return confirmpasswordInput.setErrors({ notEquivalent: true });\n      }\n      else {\n        return confirmpasswordInput.setErrors(null);\n      }\n    };\n  }\n\n\n\n/********* Reset Password Form Submit start here*********/ \n  resetPasswordSubmit() {\n    console.log(this.resetPasswordForm.value);\n    let x: any;\n    for (x in this.resetPasswordForm.controls) {\n      this.resetPasswordForm.controls[x].markAsTouched();\n    }\n    if (this.resetPasswordForm.valid) {\n      let data1: any = { \"password\": this.resetPasswordForm.value.password, \"accesscode\": this.accesscode }\n      let data: any = {\n        'data': data1,\n        \"source\": this.addEndpointValue.source\n      }\n\n\n      // data.accesscode = this.accesscode;\n\n      this.apiService.addData(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n        console.log(result);\n        if (result.status == \"success\") {\n          this.openSnackBar();\n          this.formDirective.resetForm();       // Use for reset the form\n          this.message = '';\n        } else {\n          this.message = result.msg;\n        }\n\n      })\n    }\n  }\n\n\n  openSnackBar() {\n    this.snackBar.openFromComponent(snackBarResetComponent, {\n      duration: this.durationInSeconds * 1000,\n    });\n  }\n\n\n/********* Reset Password Form Submit end here*********/ \n\n\n  inputUntouched(val: any) {\n    this.resetPasswordForm.controls[val].markAsUntouched();\n  }\n\n\n\n\n}\n\n@Component({\n  selector: 'snack-bar-modale',\n  template: `Password changed successfully`,\n  styles: [`\n    .example {\n      color: aliceblue;\n      background-color: yellowgreen;\n    }\n  `],\n})\nexport class snackBarResetComponent { }\n","import { Injectable } from '@angular/core';\nimport { Router, RouterEvent, NavigationEnd } from '@angular/router';\n\n/** A router wrapper, adding extra functions. */\n@Injectable()\nexport class prevroute {\n\n  private previousUrl: string = undefined;\n  private currentUrl: string = undefined;\n\n  constructor(private router : Router) {\n    this.currentUrl = this.router.url;\n    router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.previousUrl = this.currentUrl;\n        this.currentUrl = event.url;\n      };\n    });\n  }\n\n  public getPreviousUrl(){\n    console.log('=========================');\n    console.log('prev- '+this.previousUrl);\n    console.log('currnt- '+this.currentUrl);\n    console.log('=========================');\n    return this.previousUrl;\n  }\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { LoginComponent } from './login.component';\nimport { DemoMaterialModule } from './material-module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SignUpComponent, successModalComponent } from './sign-up/sign-up.component';\nimport { ForgetPasswordComponent, snackBarComponent } from './forget-password/forget-password.component';\nimport { ResetPasswordComponent, snackBarResetComponent } from './reset-password/reset-password.component';\nimport { ApiService } from './api.service';\nimport { prevroute } from './prevroute';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignUpComponent,\n    ForgetPasswordComponent,\n    ResetPasswordComponent,\n    successModalComponent,\n    snackBarComponent,\n    snackBarResetComponent,\n    // commonModalComponent\n\n  ],\n  imports: [\n    DemoMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [LoginComponent, SignUpComponent, ForgetPasswordComponent, ResetPasswordComponent],\n  providers: [ApiService, prevroute],\n  bootstrap: [],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],\n  entryComponents: [ successModalComponent, snackBarComponent, snackBarResetComponent]\n})\nexport class LoginModule { }\n"]}