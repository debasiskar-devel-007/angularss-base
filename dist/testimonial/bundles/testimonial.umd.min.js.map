{"version":3,"sources":["ng://testimonial/lib/testimonial.service.ts","ng://testimonial/lib/testimonial.component.ts","ng://testimonial/lib/Components/addedit/addedit.component.ts","ng://testimonial/lib/Modules/material-module.ts","ng://testimonial/lib/testimonial.module.ts"],"names":["TestimonialService","prototype","isTokenExpired","addData","endpoint","requestdata","httpOptions","headers","HttpHeaders","Content-Type","Authorization","this","accesstoken","_http","post","serverUrl","JSON","stringify","pipe","map","res","UpdateData","getData","deleteSingleData","deleteMultipleData","UpdateStatusForSingleData","UpdateStatusForMultipleData","CustomRequest","Injectable","args","providedIn","HttpClient","CookieService","_authHttp","cookieService","progress","uploaderror","get","fileservername","getdata_endpointUrl","TestimonialComponent","Object","defineProperty","receivedData","testimonialListConfig","apiUrl","apiBaseUrl","listEndPoint","datasource","tableName","listArray_skip","listArray_modify_header","name","email","description","priority","status","admintablenameTableName","statusarr","val","updateurl","updateEndpoint","editUrl","jwtToken","deleteEndPoint","view","search_settings","textsearch","label","field","selectsearch","values","pendingmodelapplicationarray_detail_datatype","key","value","fileurl","loader","ngOnInit","Component","selector","template","Input","AddeditComponent","generateForm","configData","action","buttonText","flag","header_name","successMessage","setDefaultValue","defaultData","getConfig","imageConfigData","testimonialForm","formBuilder","group","Validators","required","pattern","testimonial","testimonial_img","userId","userData","id","onSubmit","_this","files","length","ErrCode","basepath","upload","data","path","image","type","controls","markAsTouched","invalid","parseInt","postData","source","assign","condition","testiService","subscribe","response","openDialog","setTimeout","dialogRef","close","router","navigate","callBack","alert","error","defaultValue","patchValue","img_var","image_name","image_type","x","dialog","open","Modal","width","msg","afterClosed","result","inputBlur","markAsUntouched","clear_image","FormBuilder","Router","MatDialog","Editor","ClassicEditor","editorConfig","placeholder","model","editorData","onNoClick","MatDialogRef","Inject","MAT_DIALOG_DATA","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","TestimonialModule","declarations","imports","CKEditorModule","HttpClientModule","RouterModule","FormsModule","ReactiveFormsModule","CommonModule","BrowserModule","ListingModule","FileUploadModule","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpClientModule } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TestimonialService {\r\n  public lengthis;\r\n  public percentageis;\r\n  public inprogress;\r\n  public progress: any = [];\r\n  public uploadtype;\r\n  public uploaderror: any = '';\r\n  public accesstoken: any = this.cookieService.get('jwtToken');;\r\n  public fileservername: any = [];\r\n  public serverUrl: any = '';\r\n  public addendpointUrl: any;\r\n  public updateendpointUrl: any;\r\n  public deletesingle_endpointUrl: any;\r\n  public updatestatus_single_endpointUrl: any;\r\n  public deletemultiple_endpointUrl: any;\r\n  public updatestatus_multiple_endpointUrl: any;\r\n  public getdata_endpointUrl: any = 'datalist';\r\n\r\n  constructor(private _http: HttpClient, private _authHttp: HttpClient,private cookieService : CookieService) { }\r\n\r\n  isTokenExpired() {\r\n    // const helper = new JwtHelperService();\r\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\r\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\r\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\r\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\r\n    // console.log('id_token isExpired:',isIdTokenExpired)\r\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\r\n  }\r\n\r\n  addData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  UpdateData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  getData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  deleteSingleData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  deleteMultipleData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  UpdateStatusForSingleData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  UpdateStatusForMultipleData(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint + 'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n  CustomRequest(endpoint: any, requestdata: any) {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': this.accesstoken\r\n      })\r\n    };\r\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\r\n    return result;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Inject } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'lib-testimonial',\r\n  templateUrl: 'testimonial.component.html',\r\n  styleUrls: ['testimonial.component.css']\r\n})\r\nexport class TestimonialComponent implements OnInit {\r\n\r\n  // ==============================================declaration============================================\r\n  public testimonialListConfig: any;\r\n  public loader: boolean = true;\r\n  // =====================================================================================================\r\n\r\n\r\n\r\n\r\n  // ================================================Input For Lib Listing================================\r\n  @Input()\r\n  set config(receivedData: any) {\r\n   \r\n    this.testimonialListConfig = {\r\n      apiUrl: receivedData.apiBaseUrl,\r\n      listEndPoint: receivedData.listEndPoint,\r\n      datasource: receivedData.datasource,\r\n      tableName: receivedData.tableName,\r\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\",\"image\"],\r\n      listArray_modify_header: { \"name\": \"Customer/User Name\", \"email\": \"Customer/User Email\", \"description\": \"Testimonial\", \"priority\": \"Priority\", \"status\": \"Status\" },\r\n      admintablenameTableName: \"admin\",\r\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\r\n      updateurl: receivedData.updateEndpoint,\r\n      editUrl: receivedData.editUrl,\r\n      jwtToken: receivedData.jwtToken,\r\n      deleteEndPoint: receivedData.deleteEndPoint,\r\n      view: receivedData.view,\r\n      search_settings:{\r\n        textsearch: [{ label: \"customer name...\", field: 'name' },{ label: \"customer email...\", field: 'email' }],\r\n        selectsearch: [{ label: 'Search By Status', field: 'status', values: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }] }],\r\n      },\r\n       /*Showing Image in the Modal*/\r\n       pendingmodelapplicationarray_detail_datatype: [{\r\n        key: \"image\",\r\n        value: 'image',\r\n        fileurl: 'https://s3.us-east-2.amazonaws.com/crmfiles.influxhostserver/testimonial/'             // Image path \r\n      }],\r\n    }\r\n    this.loader = false;\r\n  }\r\n  // ====================================================================================================\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { Component, OnInit, Input, Inject } from '@angular/core';\r\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms'\r\nimport { TestimonialService } from '../../testimonial.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nexport interface DialogData {\r\n  msg: string;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'lib-addedit',\r\n  templateUrl: './addedit.component.html',\r\n  styleUrls: ['./addedit.component.css']\r\n})\r\nexport class AddeditComponent implements OnInit {\r\n\r\n\r\n  /**ckeditor start here*/\r\n  public Editor = ClassicEditor;  //for ckeditor\r\n  editorConfig = {\r\n    placeholder: 'Write testimonial...',\r\n  };\r\n  public model = {\r\n    editorData: ''\r\n  };\r\n  /**ckeditor end here*/\r\n\r\n\r\n  //  ========================================Declaration Section======================================\r\n  buttonText = \"SUBMIT\";\r\n  testimonialForm: FormGroup;\r\n  public loader: boolean = false;\r\n  configData;\r\n  successMessage: string = \"Submitted Successfully\";\r\n  dialogRef: any;\r\n  imageConfigData:any;\r\n  ErrCode:boolean = false;\r\n  flag: boolean;\r\n  img_var: any;\r\n  header_name: any;\r\n  image_name: any;\r\n  image_type: any;\r\n  // ==================================================================================================\r\n\r\n\r\n  constructor(private formBuilder: FormBuilder, private testiService: TestimonialService,\r\n    private router: Router, public dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.loader = false;\r\n    this.generateForm();\r\n    // --------------------------------checking the cases------------------------ \r\n    switch (this.configData.action) {\r\n      case 'add':\r\n        /* Button text */\r\n        this.buttonText = \"SUBMIT\";\r\n        this.flag = false;\r\n        this.header_name = \"Add Testimonial\";\r\n        break;\r\n      case 'edit':\r\n        /* Button text */\r\n        this.buttonText = \"UPDATE\";\r\n        this.successMessage = \"One row updated\";\r\n        this.setDefaultValue(this.configData.defaultData);\r\n        this.header_name = \"EDIT\";\r\n        this.flag = true;\r\n        break;\r\n    }\r\n    // --------------------------------------------------------------------------\r\n\r\n  }\r\n\r\n  @Input()\r\n  set config(getConfig: any) {\r\n    this.configData = getConfig;\r\n  }\r\n\r\n  @Input()\r\n  set imageUpload(getConfig: any) {\r\n    this.imageConfigData = getConfig;\r\n  }\r\n\r\n  // =====================================Form Validation/generation===================================\r\n  generateForm() {\r\n    this.testimonialForm = this.formBuilder.group({\r\n      name: ['', [Validators.required]],\r\n      email: ['', [Validators.required,Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/\r\n      )]],\r\n      testimonial: ['', [Validators.required]],\r\n      priority: ['', Validators.required],\r\n      status: [true,],\r\n      testimonial_img : ['',],\r\n      userId: [this.configData.userData.id, null]\r\n    })\r\n    \r\n  }\r\n  // =================================================================================================\r\n\r\n\r\n\r\n  // ==========================================SUBMIT=================================================\r\n\r\n\r\n  onSubmit() {\r\n    // Testimonial File Upload Works \r\n    if (this.imageConfigData.files) {\r\n            \r\n      if (this.imageConfigData.files.length > 1) { this.ErrCode = true; return; }\r\n      this.testimonialForm.value.testimonial_img =\r\n        {\r\n          \"basepath\": this.imageConfigData.files[0].upload.data.basepath + '/' + this.imageConfigData.path + '/',\r\n          \"image\": this.imageConfigData.files[0].upload.data.data.fileservername,\r\n          \"name\": this.imageConfigData.files[0].name,\r\n          \"type\": this.imageConfigData.files[0].type\r\n        };\r\n    } else {\r\n      this.testimonialForm.value.testimonial_img = false;\r\n    }\r\n\r\n\r\n     this.testimonialForm.controls['testimonial'].markAsTouched();\r\n    this.loader = true;\r\n    /* stop here if form is invalid */\r\n    if (this.testimonialForm.invalid) {\r\n      return;\r\n    } else {\r\n      if (this.testimonialForm.value.status) {\r\n        this.testimonialForm.value.status = parseInt(\"1\");\r\n      } else {\r\n        this.testimonialForm.value.status = parseInt(\"0\");;\r\n      }\r\n\r\n      /* start process to submited data */\r\n      let postData: any = {\r\n        source: this.configData.source,\r\n        data: Object.assign(this.testimonialForm.value, this.configData.condition)\r\n      };\r\n      this.testiService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\r\n        if (response.status == \"success\") {\r\n          this.openDialog(this.successMessage);\r\n          setTimeout(() => {\r\n            this.dialogRef.close();\r\n          }, 2000);\r\n          this.router.navigate([this.configData.callBack]);\r\n        } else {\r\n          alert(\"Some error occurred. Please try angain.\");\r\n        }\r\n      }, (error) => {\r\n        alert(\"Some error occurred. Please try angain.\");\r\n      });\r\n    }\r\n  }\r\n  // =================================================================================================\r\n\r\n\r\n\r\n\r\n  // ================================================Default value======================================\r\n  setDefaultValue(defaultValue) {\r\n    this.testimonialForm.patchValue({\r\n      name: defaultValue.name,\r\n      email: defaultValue.email,\r\n      testimonial: defaultValue.testimonial,\r\n      priority: defaultValue.priority,\r\n      status: defaultValue.status,\r\n      userId: null,\r\n      testimonial_img: defaultValue.testimonial_img\r\n    });\r\n    this.img_var = defaultValue.testimonial_img.basepath + defaultValue.testimonial_img.image;\r\n    this.image_name = defaultValue.testimonial_img.name;\r\n    this.image_type = defaultValue.testimonial_img.type\r\n  }\r\n  // ==================================================================================================\r\n\r\n\r\n  // =========================================MODAL functions==========================================\r\n  openDialog(x: any): void {\r\n    this.dialogRef = this.dialog.open(Modal, {\r\n      width: '250px',\r\n      data: { msg: x }\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe(result => {\r\n\r\n    });\r\n  }\r\n  // =====================================================================================================\r\n\r\n\r\n  inputBlur(val: any) {\r\n    this.testimonialForm.controls[val].markAsUntouched();\r\n  }\r\n// ==========================================Clear MAT tag===================================\r\n  clear_image() {\r\n    this.flag = false;\r\n  }\r\n  // ========================================================================================\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ============================================MODAL COMPONENT===========================================\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: 'modal.html',\r\n})\r\nexport class Modal {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<Modal>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n// ======================================================================================================\r\n","import {NgModule} from '@angular/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\n\r\n//import { MatFileUploadModule } from 'angular-material-fileupload';\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n    //MatFileUploadModule\r\n  ]\r\n})\r\nexport class DemoMaterialModule {}\r\n\r\n\r\n/**  Copyright 2019 Google Inc. All Rights Reserved.\r\n    Use of this source code is governed by an MIT-style license that\r\n    can be found in the LICENSE file at http://angular.io/license */","import { NgModule } from '@angular/core';\r\nimport { TestimonialComponent } from './testimonial.component';\r\nimport { AddeditComponent , Modal } from './Components/addedit/addedit.component';\r\nimport { DemoMaterialModule } from './Modules/material-module';\r\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { ListingModule } from 'listing-angular7';\r\nimport { FileUploadModule } from 'file-upload';\r\n\r\n@NgModule({\r\n  declarations: [TestimonialComponent, AddeditComponent ,Modal],\r\n  imports: [\r\n    DemoMaterialModule,\r\n    CKEditorModule,\r\n    HttpClientModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    BrowserModule,\r\n    ListingModule,\r\n    FileUploadModule\r\n  ],\r\n  exports: [TestimonialComponent,AddeditComponent] ,\r\n  entryComponents:[Modal ]\r\n})\r\nexport class TestimonialModule { }\r\n"]}