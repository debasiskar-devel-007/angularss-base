{"version":3,"sources":["ng://file-upload-lib-influxiq/lib/file-upload.service.ts","ng://file-upload-lib-influxiq/lib/component/dialog-box/dialog-box.component.ts","ng://file-upload-lib-influxiq/lib/component/preview-files/preview-files.component.ts","ng://file-upload-lib-influxiq/lib/file-upload.component.ts","ng://file-upload-lib-influxiq/lib/Module/material-module.ts","ng://file-upload-lib-influxiq/lib/directive/drag-drop.directive.ts","ng://file-upload-lib-influxiq/lib/component/alert-message/alert-message.component.ts","ng://file-upload-lib-influxiq/lib/file-upload.module.ts"],"names":["FileUploadService","prototype","upload","uploadURL","data","formData","FormData","append","file","type","path","prefix","conversion_needed","bucketname","this","httpClient","post","reportProgress","observe","pipe","map","event","HttpEventType","UploadProgress","percentage","Math","round","loaded","total","status","totalData","loadedData","Response","body","uploadBase64","httpOptions","headers","HttpHeaders","Content-Type","Injectable","args","providedIn","HttpClient","BASE_URL","DialogBoxComponent","onNoClick","dialogRef","close","ngOnInit","Component","selector","template","MatDialogRef","Inject","MAT_DIALOG_DATA","PreviewFilesComponent","FileUploadComponent","Object","defineProperty","getConfig","configData","selectFiles","loading","index","length","count","files","element","validate","checkingValidation","valid","viewUrl","push","viewFiles","message","format","split","viewText","_this","reader","FileReader","readAsDataURL","onload","_event","imgURL","result","includes","toUpperCase","openSnackBar","size","uploadAll","getIndex","uploading","postData","uploadType","conversionNeeded","bucketName","url","baseUrl","endpoint","fileUploadService","subscribe","response","err","removeFiles","openDialog","afterClosed","splice","action","_snackBar","open","duration","dialog","width","deleteAll","previewFiles","match","FormBuilder","ActivatedRoute","Router","MatSnackBar","MatDialog","Input","formBuilder","router","filesProcess","totalFile","MaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","DragDropDirective","onDragOver","evt","preventDefault","stopPropagation","background","opacity","onDragLeave","ondrop","dataTransfer","onFileDropped","emit","Directive","Output","HostBinding","HostListener","EventEmitter","AlertMessageComponent","FileUploadModule","declarations","imports","BrowserModule","FormsModule","ReactiveFormsModule","HttpClientModule","ListingModule","providers","entryComponents"],"mappings":"grIAAA,IAAAA,GAgBSA,EAAAC,UAAAC,OAAP,SAAcC,EAAWC,OACjBC,EAAW,IAAIC,SAQrB,OAPAD,EAASE,OAAO,OAAQH,EAAKI,MAC7BH,EAASE,OAAO,OAAQH,EAAKK,MAC7BJ,EAASE,OAAO,OAAQH,EAAKM,MAC7BL,EAASE,OAAO,SAAUH,EAAKO,QAC/BN,EAASE,OAAO,oBAAqBH,EAAKQ,mBAC1CP,EAASE,OAAO,aAAcH,EAAKS,YAE5BC,KAAKC,WAAWC,KAAUb,EAAWE,EAAU,CACpDY,gBAAgB,EAChBC,QAAS,WACRC,KAAKC,EAAAA,IAAG,SAAEC,GACT,OAAQA,EAAMZ,MACZ,KAAKa,EAAAA,cAAcC,mBACXC,EAAaC,KAAKC,MAAM,IAAML,EAAMM,OAASN,EAAMO,OACzD,OAAiB,GAAdJ,GAAmBA,GAAc,IAC3B,CAAEK,OAAQ,WAAYzB,KAAM,CAAE0B,UAAWT,EAAMO,MAAOG,WAAYV,EAAMM,OAAQH,WAAYA,IAE5F,CAAEK,OAAQ,WAAYzB,KAAM,MAEvC,KAAKkB,EAAAA,cAAcU,SACjB,MAAwB,WAArBX,EAAMY,KAAKJ,OACL,CAAEA,OAAQ,WAAYzB,KAAMiB,EAAMY,MAElC,CAAEJ,OAAQ,QAASzB,KAAM,oBAEpC,QACE,MAAO,CAAEyB,OAAQ,UAAWzB,KAAM,SAOrCJ,EAAAC,UAAAiC,aAAP,SAAoB/B,EAAWC,OACvB+B,EAAc,CAClBC,QAAS,IAAIC,EAAAA,YAAY,CACvBC,eAAgB,sBAIpB,OAAOxB,KAAKC,WAAWC,KAAKb,EAAWC,EAAM+B,wBArDhDI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLC,EAAAA,4IAYP,SAAA1C,EAAoBe,GAAAD,KAAAC,WAAAA,EAFbD,KAAA6B,SAAmB,mCCX5B,IAAAC,GAmBEA,EAAA3C,UAAA4C,UAAA,WACE/B,KAAKgC,UAAUC,SAGjBH,EAAA3C,UAAA+C,SAAA,iCAhBDC,EAAAA,UAAST,KAAA,CAAC,CACTU,SAAU,iBACVC,SAAA,0UARkBC,EAAAA,gDAgBfC,EAAAA,OAAMb,KAAA,CAACc,EAAAA,sBASZV,GAXE,SAAAA,EACSE,EACyB1C,GADzBU,KAAAgC,UAAAA,EACyBhC,KAAAV,KAAAA,ECjBpC,IAAAmD,GAkBEA,GAAAtD,UAAA4C,UAAA,WACE/B,KAAKgC,UAAUC,SAGjBQ,GAAAtD,UAAA+C,SAAA,kCAfDC,EAAAA,UAAST,KAAA,CAAC,CACTU,SAAU,oBACVC,SAAA,kZARkBC,EAAAA,gDAefC,EAAAA,OAAMb,KAAA,CAACc,EAAAA,sBAUZC,IAZE,SAAAA,GACST,EACyB1C,GADzBU,KAAAgC,UAAAA,EACyBhC,KAAAV,KAAAA,EChBpC,IAAAoD,IA+BEC,OAAAC,eACIF,GAAAvD,UAAA,SAAM,KADV,SACW0D,GACT7C,KAAK8C,WAAaD,mCAOpBH,GAAAvD,UAAA+C,SAAA,aAIAQ,GAAAvD,UAAA4D,YAAA,SAAYxC,GACVP,KAAKgD,SAAU,EACf,IAAK,IAAIC,EAAQ,EAAGA,EAAQ1C,EAAM2C,OAAQD,IAAS,KAC7CE,EAAgBnD,KAAKoD,MAAMF,OACzBG,EAAU9C,EAAM0C,GAGlBK,EAAgBtD,KAAKuD,mBAAmBF,GAC5C,GAAIC,EAASvC,OACXsC,EAAQG,MAAQ,CAAEzC,QAAQ,GAC1BsC,EAAQjE,OAAS,CAAE2B,OAAQ,YAC3BsC,EAAQI,QAAU,gEAClBzD,KAAKoD,MAAMM,KAAKL,GAChBrD,KAAK2D,UAAUR,EAAOE,OACjB,CACLA,EAAQG,MAAQ,CAAEzC,QAAQ,EAAO6C,QAASN,EAASM,SACnDP,EAAQjE,OAAS,CAAE2B,OAAQ,YAC3BsC,EAAQI,QAAU,SAEdI,EAASR,EAAQ1D,KAAKmE,MAAM,KAChCT,EAAQU,SAAWF,EAAO,GAC1B7D,KAAKoD,MAAMM,KAAKL,MAKtBX,GAAAvD,UAAAwE,UAAA,SAAUR,EAAOE,GAAjB,IAAAW,EAAAhE,KACM6D,EAASR,EAAQ1D,KAAKmE,MAAM,KAChC,GAAgB,SAAbD,EAAO,GAAe,KACnBI,EAAS,IAAIC,WACDlE,KAAKoD,MAAMD,GAC3Bc,EAAOE,cAAcnE,KAAKoD,MAAMD,IAChCc,EAAOG,OAAM,SAAIC,OACXC,EAASL,EAAOM,OACpBP,EAAKZ,MAAMD,GAAOM,QAAUa,QAG9BtE,KAAKoD,MAAMD,GAAOM,QAAU,KAC5BzD,KAAKoD,MAAMD,GAAOY,SAAWF,EAAO,IAKxCnB,GAAAvD,UAAAoE,mBAAA,SAAmBF,OACbG,EAAa,CAAEzC,QAAQ,EAAM6C,QAAS,MAGtCC,EAASR,EAAQ1D,KAAKmE,MAAM,KAEhC,OAAa,GADD9D,KAAK8C,WAAWe,OAAOW,SAASX,EAAO,KAEjDL,EAAMzC,QAAS,EACfyC,EAAMI,QAAUC,EAAO,GAAGY,cAAgB,yBAC1CzE,KAAK0E,aAAab,EAAO,GAAGY,cAAgB,yBAA0B,IAC/DjB,GAILH,EAAQsB,KAAO,IAAO3E,KAAK8C,WAAW6B,MACxCnB,EAAMzC,QAAS,EACfyC,EAAMI,QAAU,iDAAmD5D,KAAK8C,WAAW6B,KAAO,OAC1F3E,KAAK0E,aAAa,iDAAmD1E,KAAK8C,WAAW6B,KAAO,OAAQ,IAC7FnB,GAGW,GAAhBA,EAAMzC,OACDyC,OADT,GAMFd,GAAAvD,UAAAyF,UAAA,SAAUC,QAAA,IAAAA,IAAAA,EAAA,MACR,IAAK,IAAI5B,EAAQ,EAAGA,EAAQjD,KAAKoD,MAAMF,OAAQD,IACP,GAAlCjD,KAAKoD,MAAMH,GAAOO,MAAMzC,QAAqD,YAAnCf,KAAKoD,MAAMH,GAAO7D,OAAO2B,QACrEf,KAAK8E,UAAU7B,IAMrBP,GAAAvD,UAAA2F,UAAA,SAAU7B,GAAV,IAAAe,EAAAhE,KACM+E,EAAgB,CAClBrF,KAAMM,KAAKoD,MAAMH,GACjBtD,KAAMK,KAAK8C,WAAWnD,KACtBC,KAAMI,KAAK8C,WAAWlD,KACtBC,OAAQG,KAAK8C,WAAWjD,OACxBmF,WAAYhF,KAAK8C,WAAWkC,WAC5BlF,kBAAmBE,KAAK8C,WAAWmC,iBACnClF,WAAYC,KAAK8C,WAAWoC,YAG1BC,EAAcnF,KAAK8C,WAAWsC,QAAUpF,KAAK8C,WAAWuC,SAAW,SAAWrF,KAAK8C,WAAWlD,KAAO,WAAaI,KAAK8C,WAAWjD,OAAS,SAAWG,KAAK8C,WAAWnD,KAAO,SAAWsD,EAC5LjD,KAAKsF,kBAAkBlG,OAAO+F,EAAKJ,GAAUQ,UAAS,SACnDC,OACKjB,EAAciB,EAClB,OAAQjB,EAAOxD,QACb,IAAK,WACHiD,EAAKZ,MAAMH,GAAO7D,OAASmF,EAC3BP,EAAKlB,WAAWM,MAAQY,EAAKZ,MAC7BY,EAAKU,aAAa,2BAA4B,QAC9C,MACF,IAAK,QACHV,EAAKZ,MAAMH,GAAO7D,OAASmF,EAAOjF,KAClC0E,EAAKU,aAAaH,EAAOjF,KAAM,IAC/B,MACF,QACE0E,EAAKZ,MAAMH,GAAO7D,OAASmF,IAGhC,SAAGkB,GACFzB,EAAKZ,MAAMH,GAAS,CAAElC,OAAQ,SAC9BiD,EAAKU,aAAa,uBAAwB,YAMhDhC,GAAAvD,UAAAuG,YAAA,SAAYzC,GAAZ,IAAAe,EAAAhE,UAAY,IAAAiD,IAAAA,EAAA,MACVjD,KAAK2F,aACL3F,KAAKgC,UAAU4D,cAAcL,UAAS,SAAChB,GACjCA,IACFP,EAAKZ,MAAMyC,OAAO5C,EAAO,GACzBe,EAAKU,aAAa,yBAA0B,QAMlDhC,GAAAvD,UAAAuF,aAAA,SAAad,EAAiBkC,GAC5B9F,KAAK+F,UAAUC,KAAKpC,EAASkC,EAAQ,CACnCG,SAAU,OAKdvD,GAAAvD,UAAAwG,WAAA,WACE3F,KAAKgC,UAAYhC,KAAKkG,OAAOF,KAAKlE,EAAoB,CACpDqE,MAAO,QACP7G,KAAM,CAAEsE,QAAS,cAKrBlB,GAAAvD,UAAAiH,UAAA,WAAA,IAAApC,EAAAhE,KACEA,KAAK2F,aACL3F,KAAKgC,UAAU4D,cAAcL,UAAS,SAAChB,GACjCA,IACFP,EAAKZ,MAAMyC,OAAO,EAAG7B,EAAKZ,MAAMF,QAChCc,EAAKU,aAAa,yBAA0B,QAMlDhC,GAAAvD,UAAAkH,aAAA,SAAapD,GAAb,IAAAe,EAAAhE,KAEE,GAAkC,MADnBA,KAAKoD,MAAMH,GAAOtD,KACpB2G,MAAM,YAAnB,KAKIrC,EAAS,IAAIC,WACDlE,KAAKoD,MAAMH,GAC3BgB,EAAOE,cAAcnE,KAAKoD,MAAMH,IAChCgB,EAAOG,OAAM,SAAIC,OACXC,EAASL,EAAOM,OACFP,EAAKkC,OAAOF,KAAKvD,EAAuB,CACxDnD,KAAM,CAAEgF,OAAQA,WAVlBtE,KAAK0E,aAAa,yBAA0B,0BA5LjDvC,EAAAA,UAAST,KAAA,CAAC,CACTU,SAAU,kBACVC,SAAA,qnLAbOkE,EAAAA,mBAEArH,SACAsH,EAAAA,sBAAgBC,EAAAA,cAChBC,EAAAA,mBAIAC,EAAAA,8CAsBNC,EAAAA,SAwLHlE,IAnLE,SAAAA,GAAoBmE,EAAkCvB,EAC5CkB,EAAwCM,EAAwBf,EACjEG,GAFWlG,KAAA6G,YAAAA,EAAkC7G,KAAAsF,kBAAAA,EAC5CtF,KAAAwG,eAAAA,EAAwCxG,KAAA8G,OAAAA,EAAwB9G,KAAA+F,UAAAA,EACjE/F,KAAAkG,OAAAA,EAlBFlG,KAAAT,SAAW,IAAIC,SACfQ,KAAAoD,MAAa,GACbpD,KAAA+G,aAAoB,GAEpB/G,KAAAgH,UAAoB,EAEpBhH,KAAAgD,SAAmB,EC1B5B,IAAAiE,yBA2CCC,EAAAA,SAAQxF,KAAA,CAAC,CACRyF,QAAS,CACPC,EAAAA,WACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,sBACAC,EAAAA,eACAC,EAAAA,qBACAC,EAAAA,gBACAC,EAAAA,sBACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,eACAC,EAAAA,iBACAC,EAAAA,oBACAC,EAAAA,gBACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,mBACAC,EAAAA,qBACAC,EAAAA,yBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,iBACAC,EAAAA,gBACAC,EAAAA,qBACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,iBACAC,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,qBAGyB5C,IA9C7B,SAAAA,MC3CA,IAAA6C,IAcwCA,GAAA3K,UAAA4K,WAAtC,SAAiDC,GAC/CA,EAAIC,iBACJD,EAAIE,kBACJlK,KAAKmK,WAAa,UAClBnK,KAAKoK,QAAU,OAI6BN,GAAA3K,UAAAkL,YAA9C,SAA0DL,GACxDA,EAAIC,iBACJD,EAAIE,kBACJlK,KAAKmK,WAAa,UAClBnK,KAAKoK,QAAU,KAIwBN,GAAA3K,UAAAmL,OAAzC,SAAgDN,GAC9CA,EAAIC,iBACJD,EAAIE,kBACJlK,KAAKmK,WAAa,UAClBnK,KAAKoK,QAAU,QACXhH,EAAQ4G,EAAIO,aAAanH,MACV,EAAfA,EAAMF,QACRlD,KAAKwK,cAAcC,KAAKrH,yBAnC7BsH,EAAAA,UAAShJ,KAAA,CAAC,CACTU,SAAU,4DAKTuI,EAAAA,2BAEAC,EAAAA,YAAWlJ,KAAA,CAAC,2CACZkJ,EAAAA,YAAWlJ,KAAA,CAAC,qCAGZmJ,EAAAA,aAAYnJ,KAAA,CAAC,WAAY,CAAC,gCAQ1BmJ,EAAAA,aAAYnJ,KAAA,CAAC,YAAa,CAAC,2BAQ3BmJ,EAAAA,aAAYnJ,KAAA,CAAC,OAAQ,CAAC,cAUzBoI,IAtCA,SAAAA,KAMY9J,KAAAwK,cAAgB,IAAIM,EAAAA,aAEgB9K,KAAAmK,WAAa,UACtBnK,KAAAoK,QAAU,ICXjD,IAAAW,IAaEA,GAAA5L,UAAA+C,SAAA,kCAVDC,EAAAA,UAAST,KAAA,CAAC,CACTU,SAAU,oBACVC,SAAA,8JAWF0I,IANE,SAAAA,MCVF,IAAAC,yBAYC9D,EAAAA,SAAQxF,KAAA,CAAC,CACRuJ,aAAc,CACZvI,GACAoH,GACAiB,GACAjJ,EACAW,GAEFyI,QAAS,CACPC,EAAAA,cACAlE,GACAmE,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,eAEFC,UAAW,GACXrE,QAAS,CAACzE,IACV+I,gBAAiB,CACfV,GACAjJ,EACAW,OAG4BuI,IAxBhC,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpEvent, HttpErrorResponse, HttpEventType } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FileUploadService {\n\n  public BASE_URL: string = \"http://3.15.236.141:5005/uploads\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  /* Upload Function */\n  public upload(uploadURL, data) {\n    const formData = new FormData();\n    formData.append('file', data.file);\n    formData.append('type', data.type);\n    formData.append('path', data.path);\n    formData.append('prefix', data.prefix);\n    formData.append('conversion_needed', data.conversion_needed);\n    formData.append('bucketname', data.bucketname);\n    \n    return this.httpClient.post<any>(uploadURL, formData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(map((event) => {\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            const percentage = Math.round(100 * event.loaded / event.total);\n            if(percentage >= 0 && percentage <= 100) {\n              return { status: 'progress', data: { totalData: event.total, loadedData: event.loaded, percentage: percentage } };\n            } else {\n              return { status: 'complete', data: null };\n            }\n          case HttpEventType.Response:\n            if(event.body.status == 'success') {\n              return { status: 'complete', data: event.body };\n            } else {\n              return { status: 'error', data: 'An error occord.' };\n            }\n          default:\n            return { status: 'waiting', data: '' };\n            return `Unhandled event: ${event.type}`;\n        }\n      })\n    );\n  }\n\n  public uploadBase64(uploadURL, data): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.httpClient.post(uploadURL, data, httpOptions);\n  }\n\n}\n","import { Component, OnInit, Inject} from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  message: string;\n}\n\n@Component({\n  selector: 'lib-dialog-box',\n  templateUrl: './dialog-box.component.html',\n  styleUrls: ['./dialog-box.component.css']\n})\n\nexport class DialogBoxComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogBoxComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Inject} from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  imgURL: any;\n}\n\n@Component({\n  selector: 'lib-preview-files',\n  templateUrl: './preview-files.component.html',\n  styleUrls: ['./preview-files.component.css']\n})\nexport class PreviewFilesComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<PreviewFilesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnInit() {\n    // console.log('Preview component: ', this.data);\n  }\n\n}\n","import { Component, OnInit, ViewChild, Input, Pipe } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FileUploadService } from './file-upload.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AlertMessageComponent } from './component/alert-message/alert-message.component';\nimport { DialogBoxComponent } from './component/dialog-box/dialog-box.component';\nimport { PreviewFilesComponent } from './component/preview-files/preview-files.component';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { from } from 'rxjs';\n\n@Component({\n  selector: 'lib-file-upload',\n  templateUrl: 'file-upload.component.html',\n  styleUrls: ['style.css']\n})\n\nexport class FileUploadComponent implements OnInit {\n\n  public formData = new FormData();\n  public files: any = [];\n  public filesProcess: any = [];\n  public configData: any;\n  public totalFile: number = 0;\n  public dialogRef: any;\n  public loading: boolean = false;\n\n  imgResultBeforeCompress:string;\n  imgResultAfterCompress:string;\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  constructor(private formBuilder: FormBuilder, private fileUploadService: FileUploadService,\n    private ActivatedRoute: ActivatedRoute, private router: Router, private _snackBar: MatSnackBar,\n    public dialog: MatDialog) { }\n\n  ngOnInit() {\n  }\n\n  /* Select File Proccess */\n  selectFiles(event) {\n    this.loading = true;\n    for (let index = 0; index < event.length; index++) {\n      var count: number = this.files.length;\n      const element = event[index];\n\n      /* Checking Validation */\n      let validate: any = this.checkingValidation(element);\n      if (validate.status) {\n        element.valid = { status: true };\n        element.upload = { status: 'selected' };\n        element.viewUrl = 'https://loading.io/spinners/dual-ring/lg.dual-ring-loader.gif';\n        this.files.push(element);\n        this.viewFiles(count, element);\n      } else {\n        element.valid = { status: false, message: validate.message };\n        element.upload = { status: 'selected' };\n        element.viewUrl = null;\n\n        let format = element.type.split(\"/\");\n        element.viewText = format[1];\n        this.files.push(element);\n      }\n    }\n  }\n\n  viewFiles(count, element) {\n    let format = element.type.split(\"/\");\n    if(format[0] == 'image') {\n      var reader = new FileReader();\n      let imagePath = this.files[count];\n      reader.readAsDataURL(this.files[count]);\n      reader.onload = (_event) => {\n        let imgURL = reader.result;\n        this.files[count].viewUrl = imgURL;\n      }\n    } else {\n      this.files[count].viewUrl = null;\n      this.files[count].viewText = format[1];\n    }\n  }\n\n  /* Checking Validation */\n  checkingValidation(element) {\n    let valid: any = { status: true, message: null };\n\n    /* Checking File Format */\n    let format = element.type.split(\"/\");\n    let check = this.configData.format.includes(format[1]);\n    if (check == false) {\n      valid.status = false;\n      valid.message = format[1].toUpperCase() + \" format not supported.\";\n      this.openSnackBar(format[1].toUpperCase() + \" format not supported.\", '');\n      return valid;\n    }\n\n    /* Checking File size */\n    if (element.size / 1000 > this.configData.size) {\n      valid.status = false;\n      valid.message = \"File size too large. Maximum file size limit: \" + this.configData.size + \" KB.\";\n      this.openSnackBar(\"File size too large. Maximum file size limit: \" + this.configData.size + \" KB.\", '');\n      return valid;\n    }\n\n    if (valid.status == true) {\n      return valid;\n    }\n  }\n\n  /* File Upload Process */\n  uploadAll(getIndex: any = null) {\n    for (let index = 0; index < this.files.length; index++) {\n      if (this.files[index].valid.status == true && this.files[index].upload.status != 'complete') {\n        this.uploading(index);\n      }\n    }\n  }\n\n  /* Upload */\n  uploading(index) {\n    var postData: any = {\n      file: this.files[index],\n      type: this.configData.type,\n      path: this.configData.path,\n      prefix: this.configData.prefix,\n      uploadType: this.configData.uploadType,\n      conversion_needed: this.configData.conversionNeeded,\n      bucketname: this.configData.bucketName\n    }\n\n    var url: string = this.configData.baseUrl + this.configData.endpoint + '?path=' + this.configData.path + '&prefix=' + this.configData.prefix + '&type=' + this.configData.type + '&rand=' + index;\n    this.fileUploadService.upload(url, postData).subscribe(\n      (response) => {\n        let result: any = response;\n        switch (result.status) {\n          case 'complete':\n            this.files[index].upload = result;\n            this.configData.files = this.files;\n            this.openSnackBar('Successfully Uploaded !!', 'Undo');\n            break;\n          case 'error':\n            this.files[index].upload = result.data;\n            this.openSnackBar(result.data, '');\n            break;\n          default:\n            this.files[index].upload = result;\n            break;\n        }\n      }, (err) => {\n        this.files[index] = { status: 'error' };\n        this.openSnackBar('An error occurred !!', 'Retry');\n      }\n    );\n  }\n\n  /* Remove Files */\n  removeFiles(index: any = null) {\n    this.openDialog();\n    this.dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.files.splice(index, 1);\n        this.openSnackBar('Successfully Remove !!', '');\n      }\n    });\n  }\n\n  /* Snack Bar */name\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n  /* Dialog Box */\n  openDialog(): void {\n    this.dialogRef = this.dialog.open(DialogBoxComponent, {\n      width: '250px',\n      data: { message: \"Message\" }\n    });\n  }\n\n  /* Delete all selected files */\n  deleteAll() {\n    this.openDialog();\n    this.dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.files.splice(0, this.files.length);\n        this.openSnackBar('Successfully Remove !!', '');\n      }\n    });\n  }\n\n  /* Preview Files */\n  previewFiles(index) {\n    var mimeType = this.files[index].type;\n    if (mimeType.match(/image\\/*/) == null) {\n      this.openSnackBar('Preview not supported.', '');\n      return;\n    }\n\n    var reader = new FileReader();\n    let imagePath = this.files[index];\n    reader.readAsDataURL(this.files[index]);\n    reader.onload = (_event) => {\n      let imgURL = reader.result;\n      const dialogRef = this.dialog.open(PreviewFilesComponent, {\n        data: { imgURL: imgURL }\n      });\n    }\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */","import { Directive, Output, Input, EventEmitter, HostBinding, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[libDragDrop]'\n})\n\nexport class DragDropDirective {\n\t\n  @Output() onFileDropped = new EventEmitter<any>();\n\t\n  @HostBinding('style.background-color') public background = '#f5fcff'\n  @HostBinding('style.opacity') public opacity = '1'\n\t\n  //Dragover listener\n  @HostListener('dragover', ['$event']) onDragOver(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.background = '#9ecbec';\n    this.opacity = '0.8'\n  }\n\t\n  //Dragleave listener\n  @HostListener('dragleave', ['$event']) public onDragLeave(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.background = '#f5fcff'\n    this.opacity = '1'\n  }\n\t\n  //Drop listener\n  @HostListener('drop', ['$event']) public ondrop(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.background = '#f5fcff'\n    this.opacity = '1'\n    let files = evt.dataTransfer.files;\n    if (files.length > 0) {\n      this.onFileDropped.emit(files)\n    }\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'lib-alert-message',\n  templateUrl: './alert-message.component.html',\n  styleUrls: ['./alert-message.component.css']\n})\nexport class AlertMessageComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FileUploadComponent } from './file-upload.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './Module/material-module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ListingModule } from \"listing-angular7\";\nimport { DragDropDirective } from './directive/drag-drop.directive';\nimport { AlertMessageComponent } from './component/alert-message/alert-message.component';\nimport { DialogBoxComponent } from './component/dialog-box/dialog-box.component';\nimport { PreviewFilesComponent } from './component/preview-files/preview-files.component';\n\n@NgModule({\n  declarations: [\n    FileUploadComponent,\n    DragDropDirective,\n    AlertMessageComponent,\n    DialogBoxComponent,\n    PreviewFilesComponent\n  ],\n  imports: [\n    BrowserModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    ListingModule,\n  ],\n  providers: [],\n  exports: [FileUploadComponent],\n  entryComponents: [\n    AlertMessageComponent,\n    DialogBoxComponent,\n    PreviewFilesComponent\n  ]\n})\nexport class FileUploadModule { }\n"]}