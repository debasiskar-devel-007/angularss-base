{"version":3,"sources":["ng://file-upload-lib-influxiq/lib/file-upload.service.ts","ng://file-upload-lib-influxiq/lib/component/dialog-box/dialog-box.component.ts","ng://file-upload-lib-influxiq/lib/component/preview-files/preview-files.component.ts","ng://file-upload-lib-influxiq/lib/file-upload.component.ts","ng://file-upload-lib-influxiq/lib/Module/material-module.ts","ng://file-upload-lib-influxiq/lib/directive/drag-drop.directive.ts","ng://file-upload-lib-influxiq/lib/component/alert-message/alert-message.component.ts","ng://file-upload-lib-influxiq/lib/file-upload.module.ts"],"names":["FileUploadService","prototype","upload","uploadURL","data","formData","FormData","append","file","type","path","prefix","conversion_needed","bucketname","this","httpClient","post","reportProgress","observe","pipe","map","event","HttpEventType","UploadProgress","percentage","Math","round","loaded","total","status","totalData","loadedData","Response","body","uploadBase64","httpOptions","headers","HttpHeaders","Content-Type","Injectable","args","providedIn","HttpClient","BASE_URL","DialogBoxComponent","onNoClick","dialogRef","close","ngOnInit","Component","selector","template","MatDialogRef","Inject","MAT_DIALOG_DATA","PreviewFilesComponent","FileUploadComponent","Object","defineProperty","getConfig","c","configData","aspectratio","val","num","toFixed","selectFiles","ev1","console","log","filename","loading","index","length","count","files","element","cc","imageChangedEvent","validate","checkingValidation","valid","viewUrl","push","viewFiles","message","format","split","viewText","_this","reader","FileReader","readAsDataURL","onload","_event","imgURL","result","includes","toUpperCase","openSnackBar","size","uploadAll","getIndex","uploading","postData","uploadType","conversionNeeded","bucketName","basepath","baseUrl","name","filearray","onloadend","e","fetch","method","JSON","stringify","then","response","json","Blob","fileservername","readAsArrayBuffer","removeFiles","openDialog","afterClosed","subscribe","splice","action","_snackBar","open","duration","dialog","width","deleteAll","previewFiles","match","fileChangeEvent","imageCropped","i","croppedImage","base64","croppedfiles","imageLoaded","cropperReady","loadImageFailed","FormBuilder","ActivatedRoute","Router","MatSnackBar","MatDialog","Input","formBuilder","fileUploadService","router","filesProcess","totalFile","MaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","DragDropDirective","onDragOver","evt","preventDefault","stopPropagation","background","opacity","onDragLeave","ondrop","dataTransfer","onFileDropped","emit","Directive","Output","HostBinding","HostListener","EventEmitter","AlertMessageComponent","FileUploadModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","ListingModule","ImageCropperModule","providers","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpEvent, HttpErrorResponse, HttpEventType } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FileUploadService {\n\n  public BASE_URL: string = \"http://3.15.236.141:5005/uploads\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  /* Upload Function */\n  public upload(uploadURL, data) {\n    const formData = new FormData();\n    formData.append('file', data.file);\n    formData.append('type', data.type);\n    formData.append('path', data.path);\n    formData.append('prefix', data.prefix);\n    formData.append('conversion_needed', data.conversion_needed);\n    formData.append('bucketname', data.bucketname);\n    \n    return this.httpClient.post<any>(uploadURL, formData, {\n      reportProgress: true,\n      observe: 'events'\n    }).pipe(map((event) => {\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            const percentage = Math.round(100 * event.loaded / event.total);\n            if(percentage >= 0 && percentage <= 100) {\n              return { status: 'progress', data: { totalData: event.total, loadedData: event.loaded, percentage: percentage } };\n            } else {\n              return { status: 'complete', data: null };\n            }\n          case HttpEventType.Response:\n            if(event.body.status == 'success') {\n              return { status: 'complete', data: event.body };\n            } else {\n              return { status: 'error', data: 'An error occord.' };\n            }\n          default:\n            return { status: 'waiting', data: '' };\n            return `Unhandled event: ${event.type}`;\n        }\n      })\n    );\n  }\n\n  public uploadBase64(uploadURL, data): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.httpClient.post(uploadURL, data, httpOptions);\n  }\n\n}\n","import { Component, OnInit, Inject} from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  message: string;\n}\n\n@Component({\n  selector: 'lib-dialog-box',\n  templateUrl: './dialog-box.component.html',\n  styleUrls: ['./dialog-box.component.css']\n})\n\nexport class DialogBoxComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogBoxComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Inject} from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  imgURL: any;\n}\n\n@Component({\n  selector: 'lib-preview-files',\n  templateUrl: './preview-files.component.html',\n  styleUrls: ['./preview-files.component.css']\n})\nexport class PreviewFilesComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<PreviewFilesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnInit() {\n    // console.log('Preview component: ', this.data);\n  }\n\n}\n","import { Component, OnInit, ViewChild, Input, Pipe } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FileUploadService } from './file-upload.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AlertMessageComponent } from './component/alert-message/alert-message.component';\nimport { DialogBoxComponent } from './component/dialog-box/dialog-box.component';\nimport { PreviewFilesComponent } from './component/preview-files/preview-files.component';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { from } from 'rxjs';\nimport { ImageCroppedEvent } from 'ngx-image-cropper';\n\n\n\n@Component({\n  selector: 'lib-file-upload',\n  templateUrl: 'file-upload.component.html',\n  styleUrls: ['style.css']\n})\n\nexport class FileUploadComponent implements OnInit {\n\n  public formData = new FormData();\n  public files: any = [];\n  public filesProcess: any = [];\n  public configData: any;\n  public totalFile: number = 0;\n  public dialogRef: any;\n  public loading: boolean = false;\n  public num: any=[];\n  public filename:any;\n  // image cropped section for test \n  filearray: any = [];\n  imageChangedEvent: any = [];\n  croppedImage: any = [];\n\n  imgResultBeforeCompress: string;\n  imgResultAfterCompress: string;\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n    // console.log( '>>>>',this.configData,this.configData.aspectratio.length);\n\n    for (let c in this.configData.aspectratio) {\n      // console.log(this.configData.aspectratio[c])\n      let val = this.configData.aspectratio[c];\n      this.num[c] = val.toFixed(2); \n      // console.log(this.num)\n\n\n    }\n  }\n\n\n\n\n\n  constructor(private formBuilder: FormBuilder, private fileUploadService: FileUploadService,\n    private ActivatedRoute: ActivatedRoute, private router: Router, private _snackBar: MatSnackBar,\n    public dialog: MatDialog) { }\n\n  ngOnInit() {\n  }\n\n  /* Select File Proccess */\n  selectFiles(event: any, ev1: any) {\n    //this.fileChangeEvent(ev1);,\n    console.log('>>>>event',event);\n    console.log('>>>>ev1',ev1)\n\n    // for(let i in ev1){\n    this.filename=ev1;\n    // }\n    // setTimeout(() => {\n    console.log(this.filename,'??')\n    // }, 500);\n\n    // this.imageChangedEvent=event;\n    this.loading = true;\n    for (let index = 0; index < event.length; index++) {\n      var count: number = this.files.length;\n      // console.log('>>>>count length',count)\n      const element = event[index];\n      // console.log('>>>>count element',element)\n\n      for(let cc in this.configData.aspectratio){\n\n        // console.log('ev1',cc,ev1);\n        if(this.imageChangedEvent[index]==null)\n        this.imageChangedEvent[index]=[]; \n        this.imageChangedEvent[index][cc] = ev1; \n      }\n      \n      // console.log(event, this.imageChangedEvent, 'img', ev1);\n\n      /* Checking Validation */\n      let validate: any = this.checkingValidation(element);\n      if (validate.status) {\n        element.valid = { status: true };\n        element.upload = { status: 'selected' };\n        element.viewUrl = 'https://loading.io/spinners/dual-ring/lg.dual-ring-loader.gif';\n        this.files.push(element);\n        this.viewFiles(count, element);\n      } else {\n        element.valid = { status: false, message: validate.message };\n        element.upload = { status: 'selected' };\n        element.viewUrl = null;\n\n        let format = element.type.split(\"/\");\n        element.viewText = format[1];\n        this.files.push(element);\n      }\n    }\n  }\n\n\n\n\n  viewFiles(count, element) {\n    let format = element.type.split(\"/\");\n    if (format[0] == 'image') {\n      var reader = new FileReader();\n      let imagePath = this.files[count];\n      reader.readAsDataURL(this.files[count]);\n      reader.onload = (_event) => {\n        let imgURL = reader.result;\n        this.files[count].viewUrl = imgURL;\n      }\n    } else {\n      this.files[count].viewUrl = null;\n      this.files[count].viewText = format[1];\n    }\n  }\n\n  /* Checking Validation */\n  checkingValidation(element) {\n    let valid: any = { status: true, message: null };\n\n    /* Checking File Format */\n    let format = element.type.split(\"/\");\n    let check = this.configData.format.includes(format[1]);\n    if (check == false) {\n      valid.status = false;\n      valid.message = format[1].toUpperCase() + \" format not supported.\";\n      this.openSnackBar(format[1].toUpperCase() + \" format not supported.\", '');\n      return valid;\n    }\n\n    /* Checking File size */\n    if (element.size / 1000 > this.configData.size) {\n      valid.status = false;\n      valid.message = \"File size too large. Maximum file size limit: \" + this.configData.size + \" KB.\";\n      this.openSnackBar(\"File size too large. Maximum file size limit: \" + this.configData.size + \" KB.\", '');\n      return valid;\n    }\n\n    if (valid.status == true) {\n      return valid;\n    }\n  }\n\n  /* File Upload Process */\n  uploadAll(getIndex: any = null) {\n    for (let index = 0; index < this.files.length; index++) {\n      if (this.files[index].valid.status == true && this.files[index].upload.status != 'complete') {\n        this.uploading(index);\n      }\n    }\n  }\n\n  /* Upload */\n  uploading(index:any) {\n\n    console.log(index,'/?',this.filename)\n    var postData: any = {\n      file: this.files[index],\n      type: this.configData.type,\n      path: this.configData.path,\n      prefix: this.configData.prefix,\n      uploadType: this.configData.uploadType,\n      conversion_needed: this.configData.conversionNeeded,\n      bucketname: this.configData.bucketName,\n      basepath:this.configData.baseUrl + this.configData.bucketName\n    }\n\n    //-----------------------old media server upload-------------------//\n    // var url: string = this.configData.baseUrl + this.configData.endpoint + '?path=' + this.configData.path + '&prefix=' + this.configData.prefix + '&type=' + this.configData.type + '&rand=' + index;\n    // this.fileUploadService.upload(url, postData).subscribe(\n    //   (response) => {\n    //     let result: any = response;\n    //     switch (result.status) {\n    //       case 'complete':\n    //         this.files[index].upload = result;\n    //         this.configData.files = this.files;\n    //         this.openSnackBar('Successfully Uploaded !!', 'Undo');\n    //         break;\n    //       case 'error':\n    //         this.files[index].upload = result.data;\n    //         this.openSnackBar(result.data, '');\n    //         break;\n    //       default:\n    //         this.files[index].upload = result;\n    //         break;\n    //     }\n    //   }, (err) => {\n    //     this.files[index] = { status: 'error' };\n    //     this.openSnackBar('An error occurred !!', 'Retry');\n    //   });\n    //-----------------------old-------------------//\n\n\n    //----------------New direct bucket upload------------//\n    const val = this.filename[0];\n\n    console.log(val.name)\n\n    this.filearray.push(val);\n\n    const reader = new FileReader();\n    const file: any = val.name;\n    let temploader = this.filename;\n\n    console.log(reader);\n    console.log(file,'//',this.filename);\n\n    reader.onloadend = (e) => {\n      fetch(this.configData.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          postData\n        })\n      })\n      .then(function(response) {\n        console.log('buck', response);\n        return response.json();\n      })\n      .then(function(json) {\n        return fetch(json.uploadURL, {\n          method: 'PUT',\n          body: new Blob([reader.result], { type: this.configData.type })\n        });\n      })\n      .then(function() {\n        // return 'success';\n        // file.uploaded = 1;\n        file.fileservername = this.configData.prefix + this.filename;\n        // console.log(file.type, 'file.type');\n        // temploader = null;\n        // var uploadedFileNode = document.createElement('div');\n        // uploadedFileNode.innerHTML = '<a href=\"//s3.amazonaws.com/slsupload/'+ file.name +'\">'+ file.name +'</a>';\n        // list.appendChild(uploadedFileNode);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n\n  }\n\n\n\n\n  /* Remove Files */\n  removeFiles(index: any = null) {\n    this.openDialog();\n    this.dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.files.splice(index, 1);\n        this.openSnackBar('Successfully Remove !!', '');\n      }\n    });\n  }\n\n  /* Snack Bar */name\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n  /* Dialog Box */\n  openDialog(): void {\n    this.dialogRef = this.dialog.open(DialogBoxComponent, {\n      width: '250px',\n      data: { message: \"Message\" }\n    });\n  }\n\n  /* Delete all selected files */\n  deleteAll() {\n    this.openDialog();\n    this.dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.files.splice(0, this.files.length);\n        this.openSnackBar('Successfully Remove !!', '');\n      }\n    });\n  }\n\n  /* Preview Files */\n  previewFiles(index) {\n    var mimeType = this.files[index].type;\n    if (mimeType.match(/image\\/*/) == null) {\n      this.openSnackBar('Preview not supported.', '');\n      return;\n    }\n\n    var reader = new FileReader();\n    let imagePath = this.files[index];\n    reader.readAsDataURL(this.files[index]);\n    reader.onload = (_event) => {\n      let imgURL = reader.result;\n      const dialogRef = this.dialog.open(PreviewFilesComponent, {\n        data: { imgURL: imgURL }\n      });\n    }\n  }\n\n\n\n\n\n\n\n\n  fileChangeEvent(event) {\n    // console.log('fileChangeEvent', event)\n    this.imageChangedEvent = event;\n    console.log('fileChangeEvent', event)\n\n\n  }\n  imageCropped(event: ImageCroppedEvent, i: any) {\n    // console.log('>>>>>>>>>',event,i)\n    this.croppedImage[i] = event.base64;\n    console.log('imageCropped', this.croppedImage);  \n    this.configData.croppedfiles=this.croppedImage;\n    // console.log('imageCr..> ',   this.configData.croppedfiles);\n\n  }\n  imageLoaded() {\n    // show cropper\n  }\n  cropperReady() {\n    // cropper ready\n  }\n  loadImageFailed() {\n    // show message\n  }\n\n\n  // getdata(){\n  //   console.log(this.configData)\n  // }\n\n\n\n\n\n\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */","import { Directive, Output, Input, EventEmitter, HostBinding, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[libDragDrop]'\n})\n\nexport class DragDropDirective {\n\t\n  // @Output() onFileDropped = new EventEmitter<any>();\n  @Output() onFileDropped = new EventEmitter<any>();\n\n\t\n  @HostBinding('style.background-color') public background = '#f5fcff'\n  @HostBinding('style.opacity') public opacity = '1'\n\t\n  //Dragover listener\n  @HostListener('dragover', ['$event']) onDragOver(evt:any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.background = '#9ecbec';\n    this.opacity = '0.8'\n  }\n\t\n  //Dragleave listener\n  @HostListener('dragleave', ['$event']) public onDragLeave(evt:any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.background = '#f5fcff'\n    this.opacity = '1'\n  }\n\t\n  //Drop listener\n  @HostListener('drop', ['$event']) public ondrop(evt:any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.background = '#f5fcff'\n    this.opacity = '1'\n    let files = evt.dataTransfer.files;\n    if (files.length > 0) {\n      this.onFileDropped.emit(files);\n      // this.onFileDropped.emit(evt);\n\n    }\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'lib-alert-message',\n  templateUrl: './alert-message.component.html',\n  styleUrls: ['./alert-message.component.css']\n})\nexport class AlertMessageComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FileUploadComponent } from './file-upload.component';\n// import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './Module/material-module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ListingModule } from \"listing-angular7\";\nimport { DragDropDirective } from './directive/drag-drop.directive';\nimport { AlertMessageComponent } from './component/alert-message/alert-message.component';\nimport { DialogBoxComponent } from './component/dialog-box/dialog-box.component';\nimport { PreviewFilesComponent } from './component/preview-files/preview-files.component';\nimport { ImageCropperModule } from 'ngx-image-cropper';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    FileUploadComponent,\n    DragDropDirective,\n    AlertMessageComponent,\n    DialogBoxComponent,\n    PreviewFilesComponent\n  ],\n  imports: [\n    // BrowserModule,\n    MaterialModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    ListingModule,\n    ImageCropperModule\n  ],\n  providers: [],\n  exports: [FileUploadComponent],\n  entryComponents: [\n    AlertMessageComponent,\n    DialogBoxComponent,\n    PreviewFilesComponent]\n})\nexport class FileUploadModule { }\n"]}