!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/common"),require("@angular/forms"),require("@angular/core"),require("@angular/cdk/a11y"),require("@angular/cdk/drag-drop"),require("@angular/cdk/portal"),require("@angular/cdk/scrolling"),require("@angular/cdk/stepper"),require("@angular/cdk/table"),require("@angular/cdk/tree"),require("@angular/material/autocomplete"),require("@angular/material/badge"),require("@angular/material/bottom-sheet"),require("@angular/material/button"),require("@angular/material/button-toggle"),require("@angular/material/card"),require("@angular/material/checkbox"),require("@angular/material/chips"),require("@angular/material/stepper"),require("@angular/material/datepicker"),require("@angular/material/dialog"),require("@angular/material/divider"),require("@angular/material/expansion"),require("@angular/material/grid-list"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/list"),require("@angular/material/menu"),require("@angular/material/core"),require("@angular/material/paginator"),require("@angular/material/progress-bar"),require("@angular/material/progress-spinner"),require("@angular/material/radio"),require("@angular/material/select"),require("@angular/material/sidenav"),require("@angular/material/slider"),require("@angular/material/slide-toggle"),require("@angular/material/snack-bar"),require("@angular/material/sort"),require("@angular/material/table"),require("@angular/material/tabs"),require("@angular/material/toolbar"),require("@angular/material/tooltip"),require("@angular/material/tree")):"function"==typeof define&&define.amd?define("blogs",["exports","@angular/common","@angular/forms","@angular/core","@angular/cdk/a11y","@angular/cdk/drag-drop","@angular/cdk/portal","@angular/cdk/scrolling","@angular/cdk/stepper","@angular/cdk/table","@angular/cdk/tree","@angular/material/autocomplete","@angular/material/badge","@angular/material/bottom-sheet","@angular/material/button","@angular/material/button-toggle","@angular/material/card","@angular/material/checkbox","@angular/material/chips","@angular/material/stepper","@angular/material/datepicker","@angular/material/dialog","@angular/material/divider","@angular/material/expansion","@angular/material/grid-list","@angular/material/icon","@angular/material/input","@angular/material/list","@angular/material/menu","@angular/material/core","@angular/material/paginator","@angular/material/progress-bar","@angular/material/progress-spinner","@angular/material/radio","@angular/material/select","@angular/material/sidenav","@angular/material/slider","@angular/material/slide-toggle","@angular/material/snack-bar","@angular/material/sort","@angular/material/table","@angular/material/tabs","@angular/material/toolbar","@angular/material/tooltip","@angular/material/tree"],r):r(e.blogs={},e.ng.common,e.ng.forms,e.ng.core,e.ng.cdk.a11y,e.ng.cdk["drag-drop"],e.ng.cdk.portal,e.ng.cdk.scrolling,e.ng.cdk.stepper,e.ng.cdk.table,e.ng.cdk.tree,e.ng.material.autocomplete,e.ng.material.badge,e.ng.material["bottom-sheet"],e.ng.material.button,e.ng.material["button-toggle"],e.ng.material.card,e.ng.material.checkbox,e.ng.material.chips,e.ng.material.stepper,e.ng.material.datepicker,e.ng.material.dialog,e.ng.material.divider,e.ng.material.expansion,e.ng.material["grid-list"],e.ng.material.icon,e.ng.material.input,e.ng.material.list,e.ng.material.menu,e.ng.material.core,e.ng.material.paginator,e.ng.material["progress-bar"],e.ng.material["progress-spinner"],e.ng.material.radio,e.ng.material.select,e.ng.material.sidenav,e.ng.material.slider,e.ng.material["slide-toggle"],e.ng.material["snack-bar"],e.ng.material.sort,e.ng.material.table,e.ng.material.tabs,e.ng.material.toolbar,e.ng.material.tooltip,e.ng.material.tree)}(this,function(e,r,p,a,t,n,o,l,i,u,d,s,m,c,g,f,b,v,y,h,M,k,x,q,C,w,I,S,D,P,j,O,G,T,B,F,N,E,V,z,_,A,H,L,R){"use strict";var U=($.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],$.ctorParameters=function(){return[]},$.ngInjectableDef=a.defineInjectable({factory:function(){return new $},token:$,providedIn:"root"}),$);function $(){}function Z(e){var r="function"==typeof Symbol&&e[Symbol.iterator],a=0;return r?r.call(e):{next:function(){return e&&a>=e.length&&(e=void 0),{value:e&&e[a++],done:!e}}}}var J=(K.prototype.ngOnInit=function(){var e,r,a,t,n={};try{for(var o=Z(this.fields),l=o.next();!l.done;l=o.next()){var i=l.value;if("checkbox"!=i.type)n[i.name]=new p.FormControl(i.value||"",p.Validators.required);else{var u={};try{for(var d=Z(i.options),s=d.next();!s.done;s=d.next()){var m=s.value;u[m.key]=new p.FormControl(m.value)}}catch(c){a={error:c}}finally{try{s&&!s.done&&(t=d["return"])&&t.call(d)}finally{if(a)throw a.error}}n[i.name]=new p.FormGroup(u)}}}catch(g){e={error:g}}finally{try{l&&!l.done&&(r=o["return"])&&r.call(o)}finally{if(e)throw e.error}}this.form=new p.FormGroup(n)},K.decorators=[{type:a.Component,args:[{selector:"lib-Blogs",template:'\n  <form (ngSubmit)="onSubmit.emit(this.form.value)" [formGroup]="form" class="form-horizontal">\n  <div *ngFor="let field of fields">\n      <field-builder [field]="field" [form]="form"></field-builder>\n  </div>\n  <div class="form-row"></div>\n  <div class="form-group row">\n    <div class="col-md-3"></div>\n    <div class="col-md-9">\n      <button type="submit" [disabled]="!form.valid" class="btn btn-primary">Save</button>\n      <strong >Saved all values</strong>\n    </div>\n  </div>\n</form>\n\n\n\n\n<mat-checkbox>Check me!</mat-checkbox>\n  '}]}],K.ctorParameters=function(){return[]},K.propDecorators={onSubmit:[{type:a.Output}],fields:[{type:a.Input}]},K);function K(){this.onSubmit=new a.EventEmitter,this.fields=[]}var Q=(Object.defineProperty(W.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(W.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),W.decorators=[{type:a.Component,args:[{selector:"textbox",template:'\n      <div [formGroup]="form">\n        <input *ngIf="!field.multiline" [attr.type]="field.type" class="form-control"  [id]="field.name" [name]="field.name" [formControlName]="field.name">\n        <textarea *ngIf="field.multiline" [class.is-invalid]="isDirty && !isValid" [formControlName]="field.name" [id]="field.name"\n        rows="9" class="form-control" [placeholder]="field.placeholder"></textarea>\n      </div> \n\n    '}]}],W.ctorParameters=function(){return[]},W.propDecorators={field:[{type:a.Input}],form:[{type:a.Input}]},W);function W(){this.field={}}var X=(Object.defineProperty(Y.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(Y.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),Y.prototype.ngOnInit=function(){},Y.decorators=[{type:a.Component,args:[{selector:"field-builder",template:'\n  <div class="form-group row" [formGroup]="form">\n    <label class="col-md-3 form-control-label" [attr.for]="field.label">\n      {{field.label}}\n      <strong class="text-danger" *ngIf="field.required">*</strong>\n    </label>\n    <div class="col-md-9" [ngSwitch]="field.type">\n      <textbox *ngSwitchCase="\'text\'" [field]="field" [form]="form"></textbox>\n      <dropdown *ngSwitchCase="\'dropdown\'" [field]="field" [form]="form"></dropdown>\n      <checkbox *ngSwitchCase="\'checkbox\'" [field]="field" [form]="form"></checkbox>\n      <radio *ngSwitchCase="\'radio\'" [field]="field" [form]="form"></radio>\n      <file *ngSwitchCase="\'file\'" [field]="field" [form]="form"></file>\n      <div class="alert alert-danger my-1 p-2 fadeInDown animated" *ngIf="!isValid && isDirty">{{field.label}} is required</div>\n    </div>\n  </div>\n  '}]}],Y.ctorParameters=function(){return[]},Y.propDecorators={field:[{type:a.Input}],form:[{type:a.Input}]},Y);function Y(){}var ee=(re.decorators=[{type:a.Component,args:[{selector:"radio",template:'\n      <div [formGroup]="form">\n        <div class="form-check" *ngFor="let opt of field.options">\n          <input class="form-check-input" type="radio" [value]="opt.key" >\n          <label class="form-check-label">\n            {{opt.label}}\n          </label>\n        </div>\n      </div> \n    '}]}],re.propDecorators={field:[{type:a.Input}],form:[{type:a.Input}]},re);function re(){this.field={}}var ae=(Object.defineProperty(te.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(te.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),te.prototype.ngOnChange=function(){console.log(this.field.value)},te.prototype.toggleHover=function(e){},te.decorators=[{type:a.Component,args:[{selector:"file",template:'\n      <div [formGroup]="form">\n        <div *ngIf="!field.value" class="drop-container dropzone" dropZone (hovered)="toggleHover($event)"\n          (dropped)="field.onUpload($event)">\n          <p class="m-0">\n            Drag a file here or\n            <label class="upload-button">\n              <input type="file" multiple="" (change)="field.onUpload($event.target.files)"> browse\n            </label>\n            to upload.\n          </p>\n        </div>\n        <div *ngIf="field.value">\n          \x3c!-- <button type="button" class="btn btn-primary">Change</button> --\x3e\n          <div class="card">\n            <img class="card-img-top" [src]="field.value">\n          </div>\n        </div>\n      </div> \n    ',styles:["\n      .drop-container {\n        background: #fff;\n        border-radius: 6px;\n        height: 150px;\n        width: 100%;\n        box-shadow: 1px 2px 20px hsla(0,0%,4%,.1);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: 2px dashed #c0c4c7;\n      }\n      p {\n        font-size: 16px;\n        font-weight: 400;\n        color: #c0c4c7; \n      }\n      .upload-button {\n        display: inline-block;\n        border: none;\n        outline: none;\n        cursor: pointer;\n        color: #5754a3;\n      }\n      .upload-button input {\n        display: none;\n      }\n      .dropzone { \n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column; \n        border-radius: 5px;\n        background: white;\n        margin: 10px 0;\n      }\n      .dropzone.hovering {\n          border: 2px solid #f16624;\n          color: #dadada !important;\n      }\n      progress::-webkit-progress-value {\n        transition: width 0.1s ease;\n      }\n      "]}]}],te.ctorParameters=function(){return[]},te.propDecorators={field:[{type:a.Input}],form:[{type:a.Input}]},te);function te(){this.field={}}var ne=(oe.decorators=[{type:a.Component,args:[{selector:"dropdown",template:'\n      <div [formGroup]="form">\n        <select class="form-control" [id]="field.name" [formControlName]="field.name">\n          <option *ngFor="let opt of field.options" [value]="opt.key">{{opt.label}}</option>\n        </select>\n      </div> \n    '}]}],oe.ctorParameters=function(){return[]},oe.propDecorators={field:[{type:a.Input}],form:[{type:a.Input}]},oe);function oe(){this.field={}}var le=(Object.defineProperty(ie.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(ie.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),ie.decorators=[{type:a.Component,args:[{selector:"checkbox",template:'\n      <div [formGroup]="form">\n        <div [formGroupName]="field.name" >\n          <div *ngFor="let opt of field.options" class="form-check form-check">\n          <label class="form-check-label">\n             <input [formControlName]="opt.key" class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1" />\n             {{opt.label}}</label>\n          </div>\n        </div>\n\n      </div> \n    '}]}],ie.propDecorators={field:[{type:a.Input}],form:[{type:a.Input}]},ie);function ie(){this.field={}}var ue=(de.decorators=[{type:a.NgModule,args:[{exports:[t.A11yModule,i.CdkStepperModule,u.CdkTableModule,d.CdkTreeModule,n.DragDropModule,s.MatAutocompleteModule,m.MatBadgeModule,c.MatBottomSheetModule,g.MatButtonModule,f.MatButtonToggleModule,b.MatCardModule,v.MatCheckboxModule,y.MatChipsModule,h.MatStepperModule,M.MatDatepickerModule,k.MatDialogModule,x.MatDividerModule,q.MatExpansionModule,C.MatGridListModule,w.MatIconModule,I.MatInputModule,S.MatListModule,D.MatMenuModule,P.MatNativeDateModule,j.MatPaginatorModule,O.MatProgressBarModule,G.MatProgressSpinnerModule,T.MatRadioModule,P.MatRippleModule,B.MatSelectModule,F.MatSidenavModule,N.MatSliderModule,E.MatSlideToggleModule,V.MatSnackBarModule,z.MatSortModule,_.MatTableModule,A.MatTabsModule,H.MatToolbarModule,L.MatTooltipModule,R.MatTreeModule,o.PortalModule,l.ScrollingModule]}]}],de);function de(){}var se=(me.decorators=[{type:a.NgModule,args:[{declarations:[J,Q,X,ee,ae,ne,le],imports:[r.CommonModule,p.ReactiveFormsModule,ue],exports:[J],providers:[],schemas:[a.CUSTOM_ELEMENTS_SCHEMA]}]}],me);function me(){}e.BlogsService=U,e.BlogsComponent=J,e.BlogsModule=se,e.ɵf=le,e.ɵe=ne,e.ɵd=ae,e.ɵc=ee,e.ɵa=Q,e.ɵb=X,e.ɵg=ue,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=blogs.umd.min.js.map