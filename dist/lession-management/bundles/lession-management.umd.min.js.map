{"version":3,"sources":["ng://lession-management/lib/lession-management.service.ts","ng://lession-management/lib/lession-management.component.ts","ng://lession-management/lib/Module/material-module.ts","ng://lession-management/lib/component/list-lession/list-lession.component.ts","ng://lession-management/lib/component/add-edit-lession/add-edit-lession.component.ts","ng://lession-management/lib/lession-management.module.ts"],"names":["HttpHeaders","Content-Type","LessionManagementService","prototype","isTokenExpired","addData","endpoint","requestdata","httpOptions","headers","access-token","this","accesstoken","_http","post","serverUrl","JSON","stringify","pipe","map","res","UpdateData","getData","deleteSingleData","deleteMultipleData","UpdateStatusForSingleData","UpdateStatusForMultipleData","CustomRequest","Injectable","args","providedIn","HttpClient","_authHttp","progress","uploaderror","fileservername","getdata_endpointUrl","LessionManagementComponent","Object","defineProperty","receivedLessionData","lessionData","ngOnInit","Component","selector","template","Input","MaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","ListLessionComponent","lessionListingConfig","apiUrl","apiBaseUrl","listEndPoint","datasource","tableName","listArray_skip","admintablenameTableName","statusarr","val","name","updateurl","updateEndpoint","editUrl","jwtToken","deleteEndPoint","loader","Router","httpRequest","router","AddEditLessionComponent","getConfig","configData","generateForm","action","buttonText","setDefaultValue","defaultData","lessionForm","formBuilder","group","title","Validators","required","maxLength","description","userId","lessionFormSubmit","_this","invalid","postData","source","data","assign","value","condition","subscribe","response","status","resetlessionForm","navigate","callBack","alert","error","reset","defaultValue","setValue","FormBuilder","ActivatedRoute","usersData","LessionManagementModule","declarations","imports","BrowserModule","FormsModule","ReactiveFormsModule","HttpClientModule","ListingModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpClientModule } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\n/* set common header */\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LessionManagementService {\n\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken: any = '';\n  public fileservername: any = [];\n  public serverUrl: any = '';\n  public addendpointUrl: any;\n  public updateendpointUrl: any;\n  public deletesingle_endpointUrl: any;\n  public updatestatus_single_endpointUrl: any;\n  public deletemultiple_endpointUrl: any;\n  public updatestatus_multiple_endpointUrl: any;\n  public getdata_endpointUrl: any = 'datalist';\n\n  constructor(private _http: HttpClient, private _authHttp: HttpClient) { }\n\n  isTokenExpired() {\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint + 'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  CustomRequest(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n}\n","import { Component, OnInit, ViewChild, Input, Inject,\n  ComponentFactoryResolver, ComponentRef, Directive,\n  ViewContainerRef } from '@angular/core';\n\n@Component({\n  selector: 'lib-lession-management',\n  templateUrl: 'lession-management.component.html',\n  styleUrls: [ './style.css' ]\n})\n\nexport class LessionManagementComponent implements OnInit {\n\n  public lessionData: any;\n  @Input()\n  set config(receivedLessionData: any) {\n    this.lessionData = receivedLessionData;\n  }\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { LessionManagementService } from '../../lession-management.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'lib-list-lession',\n  templateUrl: './list-lession.component.html',\n  styleUrls: ['./list-lession.component.css']\n})\n\nexport class ListLessionComponent implements OnInit {\n\n  public lessionListingConfig: any;\n  public loader: boolean = true;\n\n  @Input()\n  set config(receivedLessionData: any) {\n\n    this.lessionListingConfig = {\n      apiUrl: receivedLessionData.apiBaseUrl,\n      listEndPoint: \"datalist\",\n      datasource: receivedLessionData.datasource,\n      tableName: receivedLessionData.tableName,\n      listArray_skip: [ \"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\" ],\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\"}, { val: 0, name:'Inactive' }],\n      updateurl: receivedLessionData.updateEndpoint,\n      editUrl: receivedLessionData.editUrl,\n      jwtToken: receivedLessionData.jwtToken,\n      deleteEndPoint: receivedLessionData.deleteEndPoint\n      \n    }\n   \n    this.loader = false;\n  }\n\n \n\n\n  constructor(private httpRequest: LessionManagementService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n}\n ","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { LessionManagementService } from '../../lession-management.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'lib-add-edit-lession',\n  templateUrl: './add-edit-lession.component.html',\n  styleUrls: ['./add-edit-lession.component.css']\n})\n\nexport class AddEditLessionComponent implements OnInit {\n\n  public lessionForm: FormGroup;\n  public usersData: any = null;\n  public buttonText: any = null;\n  public configData: any;\n  public loader: boolean = false;\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  constructor(private formBuilder: FormBuilder, private httpRequest: LessionManagementService,\n    private ActivatedRoute: ActivatedRoute, private router: Router) {\n\n  }\n\n  ngOnInit() {\n\n   \n    this.loader = false;\n\n    /* Generate form */\n    this.generateForm();\n\n    /* Checking */\n    switch (this.configData.action) {\n      case 'add':\n        this.buttonText = \"Create\"; /* Button text */\n        break;\n      case 'edit':\n        this.buttonText = \"Update\"; /* Button text */\n        this.setDefaultValue(this.configData.defaultData);\n        break;\n    }\n  }\n\n  /* Create form controll */\n  generateForm() {\n    /* Category create form validation */\n    this.lessionForm = this.formBuilder.group({\n      title: ['', [Validators.required, Validators.maxLength(150)]],\n      description: ['', [Validators.required, Validators.maxLength(5000)]],\n      userId: ['',]\n    });\n  }\n\n  /* Category form submit */\n  lessionFormSubmit() {\n    this.loader = true;\n\n    /* stop here if form is invalid */\n    if (this.lessionForm.invalid) {\n      return;\n    } \n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.lessionForm.value, this.configData.condition)\n      };\n      this.httpRequest.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          this.resetlessionForm();\n\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    } // console.log(\"Ekhane asche\");\n  \n\n  /* reset Category form */\n  resetlessionForm() {\n    this.lessionForm.reset();\n  }\n\n  /* Set default category form value */\n  setDefaultValue(defaultValue) {\n    this.lessionForm.setValue({\n      title: defaultValue.title,\n      description: defaultValue.description,\n      userId: null\n    });\n  }\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { LessionManagementComponent } from './lession-management.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './Module/material-module';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { ListingModule } from \"listing-angular7\";\n\nimport { ListLessionComponent } from './component/list-lession/list-lession.component';\nimport { AddEditLessionComponent } from './component/add-edit-lession/add-edit-lession.component';\n\n@NgModule({\n  declarations: [\n    LessionManagementComponent,\n    ListLessionComponent,\n    AddEditLessionComponent],\n  imports: [\n    BrowserModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    ListingModule,\n  ],\n  exports: [\n    LessionManagementComponent,\n    AddEditLessionComponent\n  ]\n})\nexport class LessionManagementModule { }\n"]}