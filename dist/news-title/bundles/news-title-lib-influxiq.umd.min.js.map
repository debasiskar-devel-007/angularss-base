{"version":3,"sources":["ng://news-title-lib-influxiq/lib/news-title.service.ts","ng://news-title-lib-influxiq/lib/api.service.ts","ng://news-title-lib-influxiq/lib/news-title.component.ts","ng://news-title-lib-influxiq/lib/material-module.ts","ng://news-title-lib-influxiq/lib/Components/listing-newsletter/listing-newsletter.component.ts","ng://news-title-lib-influxiq/lib/Components/subscriptioncategory/add-edit-subcategory/add-edit-subcategory.component.ts","ng://news-title-lib-influxiq/lib/Components/subscriptioncategory/listing-subcategory/listing-subcategory.component.ts","ng://news-title-lib-influxiq/lib/Components/add-edit-subscriptiongroup/add-edit-subscriptiongroup.component.ts","ng://news-title-lib-influxiq/lib/Components/newsletter/add-edit-newsletterlib/add-edit-newsletterlib.component.ts","ng://news-title-lib-influxiq/lib/Components/newsletter/listing-newsletterlib/listing-newsletterlib.component.ts","ng://news-title-lib-influxiq/lib/Components/senderslist/add-edit-sender/add-edit-sender.component.ts","ng://news-title-lib-influxiq/lib/Components/senderslist/listing-sender/listing-sender.component.ts","ng://news-title-lib-influxiq/lib/Components/testemails/add-edit-testemaillib/add-edit-testemaillib.component.ts","ng://news-title-lib-influxiq/lib/Components/testemails/listing-testemaillib/listing-testemaillib.component.ts","ng://news-title-lib-influxiq/lib/news-title.module.ts"],"names":["NewsTitleService","prototype","isTokenExpired","addData","endpoint","requestdata","httpOptions","headers","HttpHeaders","Content-Type","Authorization","this","accesstoken","_http","post","serverUrl","JSON","stringify","pipe","map","res","UpdateData","getData","deleteSingleData","deleteMultipleData","UpdateStatusForSingleData","UpdateStatusForMultipleData","CustomRequest","Injectable","args","providedIn","HttpClient","CookieService","_authHttp","cookieService","progress","uploaderror","get","fileservername","getdata_endpointUrl","ApiService","setServerUrl","value","subjectForServerUrl","next","clearServerUrl","getServerUrl","asObservable","setaddEndpoint","subjectForaddEndpointUrl","clearaddEndpoint","getaddEndpoint","setuploadEndpont","subjectForuploadEndpointUrl","clearuploadEndpoint","getuploadEndpoint","setupdateEndpoint","subjectForupdateEndpointUrl","clearupdateEndpoint","getupdateEndpoint","setdeletesingleEndpoint","subjectFordeletesingleEndpointUrl","cleardeletesingleEndpoint","getdeletesingleEndpoint","setupdatestatus_singleEndpoint","subjectForupdatestatusSingleEndpointUrl","clearupdatestatus_singleEndpoint","getupdatestatus_singleEndpoint","setgetdataEndpoint","subjectForGetdataEndpointUrl","cleargetdataEndpoint","getdataEndpoint","console","log","addendpointUrl","uploadFile","uploadEndpointUrl","updateendpointUrl","addLogin","forgetPassword","deletesingle_endpointUrl","updatestatus_single_endpointUrl","_this","Subject","subscriptionServer","subscribe","message","result","subscriptionaddEndpoint","subscriptionuploadEndpoint","subscriptionupdateEndpoint","subscriptiondeletesingleEndpoint","subscriptionupdatestatusSingleEndpoint","subscriptionGetdataEndpoint","NewsTitleComponent","Object","defineProperty","formTitleVal","formTitleValue","v","logoValue","serverUrlVal","serverUrlValue","addEndpointVal","addEndpointValue","ngOnInit","setTimeout","openDialog","dialog","open","modalData","data","afterClosed","Component","selector","template","FormBuilder","MatSnackBar","MatDialog","Input","ViewChild","FormGroupDirective","fb","apiService","_snackBar","durationInSeconds","onNoClick","dialogRef","close","newsLatterFormSubmit","key","newsLatterForm","controls","markAsTouched","valid","source","responce","status","formDirective","resetForm","inputUntouched","val","markAsUntouched","MatDialogRef","Inject","MAT_DIALOG_DATA","group","fullname","Validators","required","phone","company","email","compose","pattern","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","ListingNewsletterComponent","receivedData","newsLetterListConfig","apiUrl","apiBaseUrl","listEndPoint","datasource","tableName","listArray_skip","listArray_modify_header","group_name","date_added","date added","group name","admintablenameTableName","name","updateurl","updateEndpoint","editUrl","jwtToken","deleteEndPoint","view","search_settings","selectsearch","label","field","values","textsearch","detail_header","loader","AddEditSubcategoryComponent","getConfig","configData","generateForm","getSubscriberList","action","buttonText","successMessage","setDefaultValue","defaultData","header_name","subscriber_table_name","newsletterService","endpoint2","response","subscriber_name_array","x","Modal","width","msg","defaultValue","subscriptionCatForm","patchValue","priority","subscriber","inputBlur","formBuilder","onSubmit","invalid","parseInt","postData","assign","condition","router","navigate","callBack","alert","error","Router","ListingSubcategoryComponent","SubsCatListConfig","subscriber_name","count","subscriber name","statusarr","pendingmodelapplicationarray_detail_datatype","fileurl","AddEditSubscriptiongroupComponent","getGroup","subGroupForm","Modal2","newsService","groupData","token","group_array","filter","i","nameValForGroup","groupname","item","toLowerCase","indexOf","add","event","input","trim","push","remove","index","_id","splice","selected","option","viewValue","groupInput","nativeElement","visible","selectable","removable","addOnBlur","separatorKeysCodes","ENTER","COMMA","moment","moment_","AddEditNewsletterlibComponent","weekdays","getReplyAddress","time","datepipe","transform","Date","getGroupName","getSenderAddress","cookieValue","getAll","newsForm","cookiemail","days_json","newsfrequency","frequency_flag","days_of_weeks","day","isSelected","openSnackBar","snackBar","duration","atp","afterClose","y","PREVIEW","panelClass","test_mail","mailData","title","subject","description","content","testMail","flag","data1","source_for_test_mail_add","preview_all","newssubject","test_mail_table","group_table","group_name_array","reply_address_table","reply_data","email_address","reply_address_id","sender_table","sender_name_array","newstitle","share_news","publishdate_normal_format","senderaddress","publishdate","settime","timeofday","timezone","startdate","enddate","reply_email","tmp_date","date","getDays","day_var","days_array","false_count","length","format","unix","x_1","sourceobj","AmazingTimePickerService","DatePipe","selectOption","testMailSubmit","ListingNewsletterlibComponent","newsConfigForm","userGroup","date_search_source","date_search_endpoint","datesearch","startdatelabel","enddatelabel","submit","AddEditSenderComponent","senderForm","Modal3","ListingSenderComponent","senderConfigForm2","AddEditTestemaillibComponent","senderFormTest","Modal4","ListingTestemaillibComponent","senderConfigForm","NewsTitleModule","declarations","imports","ReactiveFormsModule","FormsModule","BrowserAnimationsModule","CommonModule","ListingModule","RouterModule","HttpClientModule","AmazingTimePickerModule","CKEditorModule","MomentModule","schemas","CUSTOM_ELEMENTS_SCHEMA","providers","entryComponents"],"mappings":"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","sourcesContent":["\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpClientModule } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsTitleService {\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken: any = this.cookieService.get('jwtToken');;\n  public fileservername: any = [];\n  public serverUrl: any = '';\n  public addendpointUrl: any;\n  public updateendpointUrl: any;\n  public deletesingle_endpointUrl: any;\n  public updatestatus_single_endpointUrl: any;\n  public deletemultiple_endpointUrl: any;\n  public updatestatus_multiple_endpointUrl: any;\n  public getdata_endpointUrl: any = 'datalist';\n\n  constructor(private _http: HttpClient, private _authHttp: HttpClient,private cookieService : CookieService) { }\n\n  isTokenExpired() {\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint + 'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  CustomRequest(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n}\n","import { ElementRef, EventEmitter, Injectable, Input, ViewChild } from '@angular/core';\nimport { switchMap, map, takeWhile } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n// for setting observables to get serverurl and endpointurl from app\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport{CookieService} from 'ngx-cookie-service';\n\n\n@Injectable({   \n  providedIn: 'root'\n})\nexport class ApiService {\n\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken:any=this.cookieService.get('jwtToken');\n  // public accesstoken:any='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJleHAiOjE1NjgzNTgyMTAsImlhdCI6MTU2ODI3MTgxMH0.2ltvxVKwfX1uwMOwQ2Zzgp1K2jiaCDj051Wyho0Iw-Q';\n  fileservername: any = [];\n  serverUrl: any;\n  addendpointUrl: any;\n  uploadEndpointUrl:any; //souresh\n  updateendpointUrl: any;\n  deletesingle_endpointUrl: any;\n  updatestatus_single_endpointUrl: any;\n  deletemultiple_endpointUrl: any;\n  updatestatus_multiple_endpointUrl: any;\n  getdata_endpointUrl: any;\n  private subjectForServerUrl = new Subject<any>();\n  private subjectForaddEndpointUrl = new Subject<any>();\n  private subjectForuploadEndpointUrl = new Subject<any>();  //added by souresh\n  private subjectForupdateEndpointUrl = new Subject<any>();\n  private subjectFordeletesingleEndpointUrl = new Subject<any>();\n  private subjectForupdatestatusSingleEndpointUrl = new Subject<any>();\n  private subjectForGetdataEndpointUrl = new Subject<any>();\n  public subscriptionServer: Subscription;\n  public subscriptionaddEndpoint: Subscription;\n  public subscriptionuploadEndpoint: Subscription;   //added by souresh\n  public subscriptionupdateEndpoint: Subscription;\n  public subscriptiondeletesingleEndpoint: Subscription;\n  public subscriptionupdatestatusSingleEndpoint: Subscription;\n  public subscriptionGetdataEndpoint: Subscription;\n\n  constructor(private _http: HttpClient,\n    private _authHttp: HttpClient,private cookieService :CookieService) {\n    this.subscriptionServer = this.getServerUrl().subscribe(message => {\n     let result: any;\n      result = message;\n      if (result != null) {\n        this.serverUrl = result;\n      } else {\n        this.serverUrl = null;\n      }\n    });\n    this.subscriptionaddEndpoint = this.getaddEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.addendpointUrl = result;\n      } else {\n        this.addendpointUrl = null;\n      }\n    });\n    /*********added by souresh***********/\n    this.subscriptionuploadEndpoint=this.getuploadEndpoint().subscribe(message=>{\n      let result:any;\n      result=message;\n        if(result!=null){\n          this.uploadEndpointUrl = result;\n        } else{\n          this.uploadEndpointUrl = null;\n        }\n    })\n    /************souresh end here**************/\n    this.subscriptionupdateEndpoint = this.getupdateEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updateendpointUrl = result;\n      } else {\n        this.updateendpointUrl = null;\n      }\n    });\n    this.subscriptiondeletesingleEndpoint = this.getdeletesingleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.deletesingle_endpointUrl = result;\n      } else {\n        this.deletesingle_endpointUrl = null;\n      }\n    });\n    this.subscriptionupdatestatusSingleEndpoint = this.getupdatestatus_singleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updatestatus_single_endpointUrl = result;\n      } else {\n        this.updatestatus_single_endpointUrl = null;\n      }\n    });\n    this.subscriptionGetdataEndpoint = this.getdataEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.getdata_endpointUrl = result;\n      } else {\n        this.getdata_endpointUrl = null;\n      }\n    });\n\n    \n  }\n\n  setServerUrl(value: any) {\n    this.subjectForServerUrl.next(value);\n  }\n  public clearServerUrl() {\n    this.subjectForServerUrl.next(null);\n  }\n  public getServerUrl(): Observable<any> {\n    return this.subjectForServerUrl.asObservable();\n  }\n\n  setaddEndpoint(value: any) {\n    this.subjectForaddEndpointUrl.next(value);\n  }\n  public clearaddEndpoint() {\n    this.subjectForaddEndpointUrl.next(null);\n  }\n  public getaddEndpoint(): Observable<any> {\n    return this.subjectForaddEndpointUrl.asObservable();\n  }\n/*****added by souresh******/\n  setuploadEndpont(value:any){\n    this.subjectForuploadEndpointUrl.next(value);\n  }\n  public clearuploadEndpoint(){\n    this.subjectForuploadEndpointUrl.next(null);\n  }\n  public getuploadEndpoint(): Observable <any> {\n    return this.subjectForuploadEndpointUrl.asObservable();\n  }\n   /********souresh end here********/\n\n\n  setupdateEndpoint(value: any) {\n    this.subjectForupdateEndpointUrl.next(value);\n  }\n  public clearupdateEndpoint() {\n    this.subjectForupdateEndpointUrl.next(null);\n  }\n  public getupdateEndpoint(): Observable<any> {\n    return this.subjectForupdateEndpointUrl.asObservable();\n  }\n\n  setdeletesingleEndpoint(value: any) {\n    this.subjectFordeletesingleEndpointUrl.next(value);\n  }\n  public cleardeletesingleEndpoint() {\n    this.subjectFordeletesingleEndpointUrl.next(null);\n  }\n  public getdeletesingleEndpoint(): Observable<any> {\n    return this.subjectFordeletesingleEndpointUrl.asObservable();\n  }\n\n  setupdatestatus_singleEndpoint(value: any) {\n    this.subjectForupdatestatusSingleEndpointUrl.next(value);\n  }\n  public clearupdatestatus_singleEndpoint() {\n    this.subjectForupdatestatusSingleEndpointUrl.next(null);\n  }\n  public getupdatestatus_singleEndpoint(): Observable<any> {\n    return this.subjectForupdatestatusSingleEndpointUrl.asObservable();\n  }\n\n  setgetdataEndpoint(value: any) {\n    this.subjectForGetdataEndpointUrl.next(value);\n  }\n  public cleargetdataEndpoint() {\n    this.subjectForGetdataEndpointUrl.next(null);\n  }\n  public getdataEndpoint(): Observable<any> {\n    return this.subjectForGetdataEndpointUrl.asObservable();\n  }\n\n\n\n  isTokenExpired() {\n\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(requestdata: any) {\n    console.log('in adddata apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written Authorization(temp)\n      })\n    };\n\n    console.log('httpoptions',httpOptions,this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*******added by souresh************/\n  uploadFile(requestdata:any){\n    const httpOptions={\n        headers: new HttpHeaders({\n          'Content-Type':'application/json',\n          'Authorization':this.accesstoken          //hard code written Authorization(temp)\n        })\n    };\n    var result=this._http.post(this.serverUrl + this.uploadEndpointUrl,JSON.stringify(requestdata),httpOptions).pipe(map(res=>res));\n    return result;\n  }\n  /*******souresh end here********/\n  UpdateData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written Authorization(temp)\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updateendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.getdata_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n/*************** Added by himadri start here ***************/ \n  addLogin(requestdata: any) {\n    console.log('in addLogin apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n        // 'Authorization': this.accesstoken          //hard code written Authorization(temp)\n      })\n    };\n\n    console.log(this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*************** Added by himadri end here ***************/ \n\n/*************** Added by himadri start here ***************/ \nforgetPassword(requestdata: any) {\n  console.log('in forgetPassword apiservice');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': this.accesstoken          //hard code written Authorization(temp)\n    })\n  };\n\n  console.log(this.serverUrl,requestdata);\n  var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n  return result;\n}\n/*************** Added by himadri end here ***************/ \n\n\n  deleteSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  CustomRequest(requestdata: any, endpoint:any ) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl +endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Component, OnInit, Inject, Input, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { ApiService } from './api.service';\nimport { MatSnackBar, MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\n\nexport interface DialogData {\n  formTitleValue: any;\n  serverUrlValue: any;\n  addEndpointValue: any;\n  logoValue:any;\n}\n\n\n\n@Component({\n  selector: 'lib-newsTitle',\n  // templateUrl:'./news-title.component.html',\n  template: ``,\n  styleUrls: ['./news-title.component.css']\n})\nexport class NewsTitleComponent implements OnInit {\n  public formTitleValue: any = '';\n  public serverUrlValue: any = '';\n  public addEndpointValue: any = '';\n  public logoValue: any='';\n\n  @Input()\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = formTitleVal;\n  }\n\n  @Input()\n  public set logo(v : string) {\n    this.logoValue = v;\n  }\n  \n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    // console.log(\"======================\",this.serverUrlValue);\n\n  }\n  @Input()        // set the endpoint And source\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n    // console.log(this.addEndpointValue)\n  }\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n\n  public durationInSeconds: any = 10;\n\n  public newsLatterForm: FormGroup;\n  constructor(public fb: FormBuilder, public apiService: ApiService, private _snackBar: MatSnackBar, public dialog: MatDialog) {\n    // this.newsLatterForm = this.fb.group({\n    //   fullname: ['', Validators.required],\n    //   phone: ['', Validators.required],\n    //   company: ['', Validators.required],\n    //   email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])]\n    // });\n\n\n    // setInterval(()=> {\n    //   this.openSnackBar(); },4000); \n    \n  }\n\n  // openSnackBar() {\n  //   this._snackBar.openFromComponent(NewsTitleComponent, {\n  //     duration: this.durationInSeconds * 1000,\n  //   });\n  // }\n\n\n  ngOnInit() {\n    \n    setTimeout(() => {\n      this.openDialog();      \n    }, 500);\n   \n    \n  }\n\n  // newsLatterFormSubmit() {\n  //   for (const key in this.newsLatterForm.controls) {\n  //     this.newsLatterForm.controls[key].markAsTouched();\n  //   }\n  //   if (this.newsLatterForm.valid) {\n  //     console.log(this.newsLatterForm.value);\n  //     let data: any = {\n  //       'data': this.newsLatterForm.value,\n  //       \"source\": this.addEndpointValue.source\n  //     };\n  //     this.apiService.addData(data).subscribe((responce) => {\n  //       console.log(responce);\n  //       let result: any = {};\n  //       result = responce;\n  //       if (result.status == \"success\") {\n  //         this.formDirective.resetForm();\n  //       }\n  //     })\n  //   }\n\n  // }\n\n  // inputUntouched(val: any) {\n  //   console.log('ok----');\n  //   this.newsLatterForm.controls[val].markAsUntouched();\n  // }\n\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(modalData, {\n      // width: '250px',\n      data: {\n\n        addEndpointValue: this.addEndpointValue,\n        serverUrlValue: this.serverUrlValue,\n        formTitleValue:this.formTitleValue,\n        logoValue:this.logoValue\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log('The dialog was closed');\n      // console.log(result);\n    });\n  }\n\n\n\n\n}\n\n\n@Component({\n  selector: 'modalData',\n  templateUrl:'./news-title.component.html',\n  // templateUrl: './modale.html',\n  styleUrls: ['./news-title.component.css']\n})\nexport class modalData implements OnInit {\n\n  public newsLatterForm: FormGroup;\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  constructor(\n    public dialogRef: MatDialogRef<modalData>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    public apiService: ApiService, public fb: FormBuilder) {\n\n      // console.log(data);\n    this.newsLatterForm = this.fb.group({\n      fullname: ['', Validators.required],\n      group: [0,],\n      phone: ['', Validators.required],\n      company: ['', Validators.required],\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])]\n    });\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.data.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(\"+++++++++++++++\",this.data.serverUrlValue);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.data.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  newsLatterFormSubmit() {\n    console.log(this.newsLatterForm.value);\n    for (const key in this.newsLatterForm.controls) {\n      this.newsLatterForm.controls[key].markAsTouched();\n    }\n    if (this.newsLatterForm.valid) {\n      console.log(this.newsLatterForm.value);\n      let data: any = {\n        'data': this.newsLatterForm.value,\n        \"source\": this.data.addEndpointValue.source\n      };\n      this.apiService.addData(data).subscribe((responce) => {\n        console.log(responce);\n        let result: any = {};\n        result = responce;\n        if (result.status == \"success\") {\n          this.formDirective.resetForm();\n        }\n      })\n    }\n  }\n\n\n\n  inputUntouched(val: any) {\n    // console.log('ok---?-');\n    this.newsLatterForm.controls[val].markAsUntouched();\n  }\n\n}\n\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n Use of this source code is governed by an MIT-style license that\n can be found in the LICENSE file at http://angular.io/license */\n","import { Component, OnInit, Input } from '@angular/core';\n\n\n@Component({\n  selector: 'lib-listing-newsletter',\n  templateUrl: './listing-newsletter.component.html',\n  styleUrls: ['./listing-newsletter.component.css']\n})\nexport class ListingNewsletterComponent implements OnInit {\n\n  // ========================================declarations=====================================\n  public newsLetterListConfig: any;\n  public loader: boolean = true;\n  // =========================================================================================\n\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n    this.newsLetterListConfig = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\", \"image\",\"fullname_search\",\n      \"group_name_search\"],\n      listArray_modify_header: { \"fullname\": \"Full Name\", \"phone\": \"Phone\", \"company\": \"Company\", \"email\": \"Email\",\"group_name\":\"Group Name\",\"status\":\"Status\",\"date_added\":\"Date\" ,\"date added\":\"Date\",\n      \"group name\":\"Group Name\"},\n      admintablenameTableName: \"admin\",\n      status: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      search_settings: {\n        selectsearch: [{ label: 'Search By Status', field: 'status', values: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }] }],\n        textsearch: [{ label: \"Search Name\", field: 'fullname_search' },{ label: \"Search By Email\", field: 'email' },{ label: \"Search By Group Name\", field: 'group_name_search' }],\n       \n      },\n      detail_header:['_id','fullname_search']\n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-add-edit-subcategory',\n  templateUrl: './add-edit-subcategory.component.html',\n  styleUrls: ['./add-edit-subcategory.component.css']\n})\nexport class AddEditSubcategoryComponent implements OnInit {\n\n  // ====================declarations==================\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add Subscription Category\"\n  subscriptionCatForm: FormGroup;\n  configData: any;\n  successMessage: any = \"Submitted Successfully!!!\"\n  dialogRef: any;\n  public subscriber_name_array:any;\n  // ==================================================\n\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n  constructor(private formBuilder: FormBuilder, private newsletterService: NewsTitleService,\n    private router: Router ,  public dialog: MatDialog) { }\n\n  ngOnInit() {\n    //generating the form\n    this.generateForm();\n    this.getSubscriberList();\n\n\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"EDIT\";\n        break;\n    }\n    // --------------------------------------------------------------------------\n  }\n\n\n\n  //get subscriber list\n  getSubscriberList() {\n    var data: any = { 'source': this.configData.subscriber_table_name };\n    this.newsletterService.getData(this.configData.endpoint2 + 'datalist', data).subscribe(response => {\n      let result: any;\n      result = response;\n      this.subscriber_name_array = result.res;\n      console.log(this.subscriber_name_array)\n    });\n  }\n\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.subscriptionCatForm.patchValue({\n      name: defaultValue.name,\n      priority: defaultValue.priority,\n      status: defaultValue.status,\n      subscriber:defaultValue.subscriber\n    });\n\n  }\n  // ==================================================================================================\n\n\n\n  /** blur function **/\n  inputBlur(val: any) {\n    this.subscriptionCatForm.controls[val].markAsUntouched();\n  }\n\n\n  // ======================form generation=====================\n  generateForm() {\n    this.subscriptionCatForm = this.formBuilder.group({\n      name: ['',Validators.required],\n      priority: ['',Validators.required],\n      status: [],\n      subscriber:[]\n    });\n  }\n  // ==========================================================\n\n\n  // =========================SUBMIT FUNCTION======================\n  onSubmit() {\n\n     /** marking as untouched **/\n     for (let x in this.subscriptionCatForm.controls) {\n      this.subscriptionCatForm.controls[x].markAsTouched();\n    }\n\n\n    /* stop here if form is invalid */\n    if (this.subscriptionCatForm.invalid) {\n      return;\n    } else {\n      if (this.subscriptionCatForm.value.status) {\n        this.subscriptionCatForm.value.status = parseInt(\"1\");\n      } else {\n        this.subscriptionCatForm.value.status = parseInt(\"0\");;\n      }\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.subscriptionCatForm.value, this.configData.condition)\n      };\n      this.newsletterService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          \n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // ==============================================================\n}\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal.html',\n})\nexport class Modal {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit ,Input} from '@angular/core';\n\n@Component({\n  selector: 'lib-listing-subcategory',\n  templateUrl: './listing-subcategory.component.html',\n  styleUrls: ['./listing-subcategory.component.css']\n})\nexport class ListingSubcategoryComponent implements OnInit {\n// ==============================================declaration============================================\npublic SubsCatListConfig: any;\npublic loader: boolean = true;\n// =====================================================================================================\n\n\n\n\n// ================================================Input For Lib Listing================================\n@Input()\nset config(receivedData: any) {\n \n  this.SubsCatListConfig = {\n    apiUrl: receivedData.apiBaseUrl,\n    listEndPoint: receivedData.listEndPoint,\n    datasource: receivedData.datasource,\n    tableName: receivedData.tableName,\n    listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\",\"image\",\"name_search\",\"sub_name_search\"],\n    listArray_modify_header: { \"name\": \"Name\", \"priority\": \"Priority\", \"status\": \"Status\" ,\"date_added\":\"Date\",\"date added\":\"Date\",\"subscriber_name\":\"Subscriber Name\",\"count\":\"Count\",\"subscriber name\":\"Subscriber Name\"},\n    admintablenameTableName: \"admin\",\n    statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n    updateurl: receivedData.updateEndpoint,\n    editUrl: receivedData.editUrl,\n    jwtToken: receivedData.jwtToken,\n    deleteEndPoint: receivedData.deleteEndPoint,\n    view: receivedData.view,\n    search_settings:{\n      textsearch: [{ label: \"Search By Name\", field: 'name_search' },{ label: \"Search By Subscriber Name\", field: 'sub_name_search' }],\n      selectsearch: [{ label: 'Search By Status', field: 'status', values: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }] }],\n    },\n     /*Showing Image in the Modal*/\n     pendingmodelapplicationarray_detail_datatype: [{\n      key: \"image\",\n      value: 'image',\n      fileurl: 'https://s3.us-east-2.amazonaws.com/crmfiles.influxhostserver/testimonial/'             // Image path \n    }],\n    detail_header:['_id','name_search']\n  }\n  this.loader = false;\n}\n// ====================================================================================================\n\nconstructor() { }\n\nngOnInit() {\n}\n\n}\n\n\n","import { Component, OnInit, Input, Inject,ViewChild,ElementRef } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder ,Validators} from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\nimport { NewsTitleService } from '../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {MatAutocompleteSelectedEvent, MatChipInputEvent} from '@angular/material';\nimport {Observable} from 'rxjs';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {map, startWith} from 'rxjs/operators';\n\n\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-add-edit-subscriptiongroup',\n  templateUrl: './add-edit-subscriptiongroup.component.html',\n  styleUrls: ['./add-edit-subscriptiongroup.component.css']\n})\nexport class AddEditSubscriptiongroupComponent implements OnInit {\n\n\n  // =======================declaratiosn=====================\n  subGroupForm: FormGroup;\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add a group to subscriptions\";\n  configData: any;\n  groupname:any;\n\n  nameValForGroup:any='';\n  group_array: any;\n  dialogRef: any;\n  successMessage: any = \"Subscription Added Successfully..!!!\";\n  // ========================================================\n\n  filtered_group_array: Observable<any[]>;\n\n  // group = new FormControl();\n\n  visible: boolean = true;\n  selectable: boolean = true;\n  removable: boolean = true;\n  addOnBlur: boolean = false;\n\n\n  separatorKeysCodes = [ENTER, COMMA];\n\n  @ViewChild('fruitInput') groupInput: ElementRef;\n\n  constructor(private formBuilder: FormBuilder, private cookieService: CookieService,\n    private newsService: NewsTitleService, private router: Router, public dialog: MatDialog) {\n\n      // this.filtered_group_array = this.group.valueChanges.pipe(startWith(null),\n      //   map((item: any) => item ? this.filter(item) : this.nameValForGroup.slice()));\n\n        console.log('filtered_group_array--->',this.nameValForGroup)\n     }\n\n  ngOnInit() {\n\n    //generating the form\n    this.generateForm();\n\n    //getting the group\n    this.getGroup();\n\n    //Switch Case starts here\n\n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n        this.buttonText = \"SUBMIT\";\n        this.header_name = \"Add a Group\";\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"Subscription Updated Successfully..!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"Change/Remove Group\";\n        break;\n    }\n\n\n  }\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n  // =====================generate form==============\n  generateForm() {\n    this.subGroupForm = this.formBuilder.group({\n      fullname: ['',[Validators.required]],\n      phone: ['',[Validators.required]],\n      email: ['',[Validators.required,Validators.email]],\n      company: ['',[Validators.required]],\n      group: [],\n      status:[]\n    });\n  }\n  // ================================================\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.subGroupForm.patchValue({\n      fullname: defaultValue.fullname,\n      phone: defaultValue.phone,\n      email: defaultValue.email,\n      company: defaultValue.company,\n      group: defaultValue.group,\n      status:defaultValue.status\n    });\n\n  }\n  // ==================================================================================================\n\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal2, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n   /** blur function **/\n   inputBlur(val: any) {\n    this.subGroupForm.controls[val].markAsUntouched();\n  }\n\n  // ==========================================SUBMIT=================================================\n\n\n  onSubmit() {\n\n\n     /** marking as untouched **/\n     for (let x in this.subGroupForm.controls) {\n      this.subGroupForm.controls[x].markAsTouched();\n    }\n\n\n        /* stop here if form is invalid */\n  \n          if (this.subGroupForm.value.status) {\n            this.subGroupForm.value.status = parseInt(\"1\");\n          } else {\n            this.subGroupForm.value.status = parseInt(\"0\");;\n          }\n        \n\n    // if (this.subGroupForm.value.group == 0)\n    //   this.successMessage = \"Removed Group!!!\";    \n    /* stop here if form is invalid */\n    if (this.subGroupForm.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.subGroupForm.value, this.configData.condition)\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n\n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // =================================================================================================\n\n  // Getting the parent category\n  getGroup() {\n    let postData: any = {\n      source: this.configData.groupData,\n      token: this.cookieService.get('jwtToken')\n\n    };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', postData).subscribe((response: any) => {\n      this.group_array = response.res;\n      console.log('>>>',this.group_array)\n\n \n    })\n  }\n\n\n\n  // mat chip use for listing \n\n  filter(name: any) {\n    this.nameValForGroup=this.group_array;\n    for(let i in this.group_array){\n      // console.log(this.group_array[i].name)\n     this.groupname=this.group_array[i].name;\n     return this.groupname.filter(item =>\n      item.toLowerCase().indexOf(name.toLowerCase()) === 0)\n\n    }\n    ;\n  }\n\n \n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.nameValForGroup.push(value.trim());\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    // this.group.setValue(null);\n  }\n\n  remove(item: any,index:any): void {\n    console.log('index-->',item,index)\n\n    this.nameValForGroup=this.group_array;\n    for(let i in this.group_array){\n      // console.log(this.group_array[i].name)\n     this.groupname=this.group_array[i].name;\n\n      if(this.group_array[i]._id == item){\n        this.group_array.splice(index,1);\n      }\n\n      // console.log('>>',this.groupname)\n    }\n\n    // const index = this.nameValForGroup.indexOf(item);\n\n    if (index >= 0) {\n    }\n  }\n\n  // filter(name: string) {\n  //   return this.group_array.filter(fruit =>\n  //       fruit.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  // }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.nameValForGroup.push(event.option.viewValue);\n    this.groupInput.nativeElement.value = '';\n    // this.group.setValue(null);\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal2.html',\n})\nexport class Modal2 {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal2>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { AmazingTimePickerService } from 'amazing-time-picker';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { DatePipe } from '@angular/common';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FormGroup, FormControl, FormArray, FormBuilder, Validators } from \"@angular/forms\";\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n\nexport interface DialogData {\n  msg: string;\n  test_mail: any;\n  title: any;\n  subject: any;\n  content: any;\n  testMail: any;\n  flag: any;\n\n\n\n}\n\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-add-edit-newsletterlib',\n  templateUrl: './add-edit-newsletterlib.component.html',\n  styleUrls: ['./add-edit-newsletterlib.component.css'],\n})\nexport class AddEditNewsletterlibComponent implements OnInit {\n\n\n  // =================declaration==================\n  public header_name: any = \"Newsletter\"\n  public buttonText: any = \"SAVE\";\n  public group_name_array: any = [];\n  public sender_name_array: any = [];\n  public test_mail: any;\n  public configData: any;\n  public time: any;\n  public cookieValue: any;\n  public newsForm: FormGroup;\n  public frequency_flag: boolean = false;\n  public days_array: any = [];\n  // public editorconfig: any = {};\n  days_json: any;\n  public message: string;\n  public tmp_date: any;\n  public false_count: number;\n  public dialogRef: any;\n  public share_with_group: any;\n  public automatic_newsletter_to: any;\n  public reply_address_to: any\n  public senders_address_to: any;\n  public reply_data:any;\n  public email_address:any;\n  public reply_address_id:any;\n\n\n  // ==============================================\n\n  /**ckeditor start here*/\n  // public Editor = ClassicEditor;  //for ckeditor\n  // editorConfig = {\n  //   placeholder: 'Content:',\n  // };\n  // public model = {\n  //   editorData: ''\n  // };\n  /**ckeditor end here*/\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n\n  constructor(private atp: AmazingTimePickerService, private newsService: NewsTitleService,\n    public datepipe: DatePipe, public cookieService: CookieService, private formBuilder: FormBuilder,\n    public router: Router, private snackBar: MatSnackBar, public dialog: MatDialog) {\n\n\n    // this.editorconfig.extraAllowedContent = '*[class](*),span;ul;li;table;td;style;*[id];*(*);*{*}';\n\n  }\n\n  // unix_timestamp(t) {\n  //   var d = new Date(t * 1000),\t// Convert the passed timestamp to milliseconds\n  //     yyyy = d.getFullYear(),\n  //     mm = ('0' + (d.getMonth() + 1)).slice(-2),\t// Months are zero based. Add leading 0.\n  //     dd = ('0' + d.getDate()).slice(-2),\t\t\t// Add leading 0.\t\n  //     time;\n\n  //   // ie: 2013-02-18, 8:35 AM\t\n  //   time = mm + \"/\" + dd + \"/\" + yyyy;\n\n  //   return time;\n  // }\n\n  ngOnInit() {\n\n    this.weekdays();\n\n    this.getReplyAddress();\n\n\n    if (this.configData.action == 'add'){\n      this.time = this.datepipe.transform(new Date(), 'H:mm');\n    }\n\n    if (this.configData.action == 'edit'){\n      this.getReplyAddress();\n    }\n\n\n\n\n    //Calling the group name\n    this.getGroupName();\n\n    //Get sender's getGroupName\n    this.getSenderAddress();\n\n    //Getting the cookie value\n    this.cookieValue = this.cookieService.getAll();\n\n    //  calling the form generation \n    this.generateForm();\n\n    this.newsForm.value.cookiemail = this.cookieService.get('get_email');\n\n    /*Switch case*/\n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n        this.buttonText = \"SUBMIT\";\n        this.header_name = \"Add a Newsletter\";\n        this.message = \"Newsletter Added Successfully!!!\";\n\n        break;\n      case 'edit':\n        this.days_json = null;\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.time = \"\";\n        this.message = \"Newsletter Information Updated!!!\";\n        // this.reply_address=this.reply_data[0].email;\n        if (this.configData.defaultData.newsfrequency == \"daily\")\n          this.frequency_flag = false;\n        else\n          this.frequency_flag = true;\n\n\n        setTimeout(() => {\n\n          this.setDefaultValue(this.configData.defaultData);\n        }, 1000);\n\n        if (this.configData.defaultData.days_of_weeks != null)\n          this.frequency_flag = true;\n\n\n        setTimeout(() => {\n          this.days_json = this.configData.defaultData.days_of_weeks;\n        }, 1000);\n\n        break;\n    }\n\n\n  }\n\n\n\n  weekdays() {\n\n    this.days_json = [\n      {\n        \"day\": \"Sunday\",\n        \"value\": 1,\n        isSelected: false\n      },\n      {\n        \"day\": \"Monday\",\n        \"value\": 2,\n        isSelected: false\n      },\n      {\n        \"day\": \"Tuesday\",\n        \"value\": 3,\n        isSelected: false\n      },\n      {\n        \"day\": \"Wednesday\",\n        \"value\": 4,\n        isSelected: false\n      },\n      {\n        \"day\": \"Thursday\",\n        \"value\": 5,\n        isSelected: true\n      },\n      {\n        \"day\": \"Friday\",\n        \"value\": 6,\n        isSelected: false\n      },\n      {\n        \"day\": \"Saturday\",\n        \"value\": 7,\n        isSelected: false\n      }\n    ];\n  }\n\n\n\n\n  /** mat snackbar **/\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 3000,\n    });\n  }\n\n\n  /** opening up the time picker **/\n  open() {\n    const amazingTimePicker = this.atp.open();\n    amazingTimePicker.afterClose().subscribe(time => {\n    });\n  }\n\n\n  // getTestMail(){\n  //   var data1: any = { 'source': this.configData.test_mail_table };\n  //   this.newsService.getData(this.configData.endpoint2 + 'datalist', data1).subscribe(response => {\n  //     let result: any;\n  //     result = response;\n  //     this.test_mail = result.res;\n  //      console.log('+++',this.test_mail)\n  //     this.openDialog(this.newsForm.value,this.test_mail)\n  //   })\n  // }\n\n\n\n  /** open Modal **/\n  openDialog(x: any, y: any): void {\n    // console.log(y)\n\n    this.dialogRef = this.dialog.open(PREVIEW, {\n      panelClass:'newspreview-dialog',\n      data: {\n        msg: x,\n        test_mail: y,\n\n      }\n\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n      // console.log(result)\n\n\n      let mailData: any = {\n        \"title\": result.title,\n        \"subject\": result.subject,\n        \"description\": result.content,\n        \"testMail\": result.testMail\n      }\n\n      if (result.flag == \"yes\") {\n\n        let data1: any = {\n          source: this.configData.source_for_test_mail_add,\n          data: mailData\n        };\n        this.newsService.addData(this.configData.endpoint, data1).subscribe((response: any) => {\n          if (response.status == \"success\") {\n\n            this.openSnackBar('Email Send Successfully.','OK');\n            // this.dialogRef.close();\n          } else {\n            this.openSnackBar('Error Occure....!','');\n          }\n\n        });\n\n      }\n\n    });\n\n  }\n\n\n  /** preview all **/\n  preview_all() {\n\n  if(this.newsForm.value.content == '' || this.newsForm.value.newssubject == '' ) {\n      alert(\"Subject and Description field is requird for test email....!\")\n    } else {\n\n      var data1: any = { 'source': this.configData.test_mail_table };\n      this.newsService.getData(this.configData.endpoint2 + 'datalist', data1).subscribe(response => {\n        let result: any;\n        result = response;\n        this.test_mail = result.res;\n        this.openDialog((Object.values(this.newsForm.value)), (this.test_mail));\n        // console.log('+++', this.test_mail)\n      })\n      // this.openDialog(this.newsForm.value,this.test_mail)\n      // this.openDialog((Object.values(this.newsForm.value)),(this.test_mail));\n\n      // console.log(this.newsForm.value)\n    }\n\n\n  }\n\n\n  /*getting the group name*/\n  getGroupName() {\n    var data: any = { 'source': this.configData.group_table };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', data).subscribe(response => {\n      let result: any;\n      result = response;\n      this.group_name_array = result.res;\n    });\n  }\n\n  /*getting the sender's email*/\n  getReplyAddress() {\n    var data: any = { 'source': this.configData.reply_address_table };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', data).subscribe(response => {\n      let result: any;\n      result = response;\n      this.reply_data = result.res;\n      this.email_address=this.reply_data[0].email;\n      this.reply_address_id=this.reply_data[0]._id;\n      // console.log(this.email_address.email)\n\n    });\n  }\n\n  // reply address \n\n  getSenderAddress() {\n    var data: any = { 'source': this.configData.sender_table };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', data).subscribe(response => {\n      let result: any;\n      result = response;\n      this.sender_name_array = result.res;\n      // console.log(this.sender_name_array)\n    });\n  }\n\n\n  //generate form\n  generateForm() {\n    this.newsForm = this.formBuilder.group({\n      newstitle: ['', [Validators.required]],\n      newssubject: ['', [Validators.required]],\n      share_news: [],\n      publishdate_normal_format: [],\n      senderaddress: [],\n      publishdate: ['', [Validators.required]],\n      settime: [this.time],\n      content: ['', [Validators.required]],\n      newsfrequency: [],\n      days_of_weeks: [],\n      timeofday: [this.time],\n      timezone: [],\n      startdate: ['', [Validators.required]],\n      enddate: ['', [Validators.required]],\n      reply_email: [this.reply_address_id],\n      status: [1]\n    });\n  }\n\n\n\n  //setting the default value\n  setDefaultValue(defaultValue) {\n    this.tmp_date = defaultValue.publishdate;\n    let date = new Date(this.tmp_date);\n    defaultValue.publishdate = date,\n\n      this.tmp_date = defaultValue.startdate;\n    date = new Date(this.tmp_date);\n    defaultValue.startdate = date,\n\n      this.tmp_date = defaultValue.enddate;\n    date = new Date(this.tmp_date);\n    defaultValue.enddate = date,\n\n      this.newsForm.patchValue({\n        newstitle: defaultValue.newstitle,\n        newssubject: defaultValue.newssubject,\n        share_news: defaultValue.share_news,\n        senderaddress: defaultValue.senderaddress,\n        publishdate: defaultValue.publishdate,\n        settime: defaultValue.settime,\n        content: defaultValue.content,\n        days_of_weeks: defaultValue.days_of_weeks,\n        newsfrequency: defaultValue.newsfrequency,\n        timeofday: defaultValue.timeofday,\n        timezone: defaultValue.timezone,\n        startdate: defaultValue.startdate,\n        enddate: defaultValue.enddate,\n        reply_email: defaultValue.reply_email\n      });\n    // this.share_with_group = defaultValue.share_news;   \n\n  }\n\n\n  /** blur function **/\n  inputBlur(val: any) {\n    this.newsForm.controls[val].markAsUntouched();\n  }\n\n\n  /** marking the checkbox as true **/\n  getDays(day_var: any) {\n    if (day_var.isSelected === true)\n      day_var.isSelected = false;\n    else\n      day_var.isSelected = true;\n  }\n\n  //submit function\n  onSubmit() {\n\n    this.days_array = [];\n    this.false_count = 0;\n    if (this.frequency_flag != false)\n      for (var i = 0; i < this.days_json.length; i++) {\n        if (this.days_json[i].isSelected) {\n          this.days_array.push(this.days_json[i]);\n          this.false_count--;\n        }\n        else\n          this.days_array.push(this.days_json[i]);\n        this.false_count++;\n      }\n\n    if (this.false_count == 7)\n      return;\n\n\n    if (this.frequency_flag == true)\n      this.newsForm.value.days_of_weeks = this.days_array;\n    else\n      this.newsForm.value.days_of_weeks = null;\n\n\n\n\n    this.newsForm.value.publishdate = moment(this.newsForm.value.publishdate).format('MM/DD/YYYY');\n    this.newsForm.value.startdate = moment(this.newsForm.value.startdate).format('MM/DD/YYYY');\n    this.newsForm.value.enddate = moment(this.newsForm.value.enddate).format('MM/DD/YYYY');\n    this.newsForm.value.reply_email=this.reply_data[0]._id;\n\n    let x: any = moment(this.newsForm.value.publishdate).unix();\n    this.newsForm.value.publishdate_normal_format = parseInt(x) * 1000;\n\n\n\n    /** marking as untouched **/\n    for (let x in this.newsForm.controls) {\n      this.newsForm.controls[x].markAsTouched();\n    }\n\n\n\n    /* stop here if form is invalid */\n    if (this.newsForm.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.newsForm.value, this.configData.condition),\n        \"sourceobj\": [\"senderaddress\",\"reply_email\"]\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n\n          this.openSnackBar(this.message, \"OK\");\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n\n\n}\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-preview',\n  templateUrl: 'preview_all_data.html',\n  styleUrls: ['./add-edit-newsletterlib.component.css'],\n})\nexport class PREVIEW {\n\n  public configData: any;\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n  public testMail: any;\n  public title: AnalyserNode;\n  public subject: any;\n  public content: any;\n  public flag: any;\n\n  constructor(\n    public dialogRef: MatDialogRef<PREVIEW>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData, public newsService: NewsTitleService, public cookieService: CookieService) {\n\n    // console.log('>>', data)\n\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  selectOption(val) {\n    // console.log(val)\n  }\n\n  testMailSubmit(title: any, subject: any, content: any, testMail: any, flag: any) {\n    // console.log(title, subject, content, testMail);\n\n    this.data.title = title;\n    this.data.subject = subject;\n    this.data.content = content;\n    this.data.testMail = this.testMail;\n    this.data.flag = flag;\n\n    this.dialogRef.close(this.data);\n\n    // let endpoint:any='https://9ozbyvv5v0.execute-api.us-east-1.amazonaws.com/production/api/addorupdatedata'\n\n    // let mailData: any = {\n    //   source: 'newsTestMailData',\n    //   data: {\n    //     \"title\":title,\n    //     \"subject\":subject,\n    //     \"content\":content,\n    //     \"testMail\":this.testMail\n    //   },\n    //   \"sourceobj\": [\"testMail\"],\n    //   \"token\":this.cookieService.get('jwtToken')\n    // };\n    // this.newsService.addData(endpoint, mailData).subscribe((response: any) => {\n    //   if (response.status == \"success\") {\n\n    //     // this.openSnackBar(this.message, \"OK\");\n    //     this.dialogRef.close();\n\n    //   }\n\n    // });\n\n\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'lib-listing-newsletterlib',\n  templateUrl: './listing-newsletterlib.component.html',\n  styleUrls: ['./listing-newsletterlib.component.css']\n})\nexport class ListingNewsletterlibComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public newsConfigForm: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n\n\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n    this.newsConfigForm = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\",\"title_search\",\"publishdate_normal_format\",\"subject_search\"],\n      listArray_modify_header: {\n        'title': 'Title', 'subject': 'Subject', 'userGroup': 'User Group', 'time': 'Publish Time',\n        'publishdate': 'Publish Date', 'status': 'Status','date added':'Date Added'\n      },\n      admintablenameTableName: \"admin\",\n      status: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      detail_header: ['_id','publishdate_normal_format','title_search'],\n      date_search_source:receivedData.view,\n      date_search_endpoint:'datalist',\n      search_settings: {\n        textsearch: [{ label: \"Search by title...\", field: 'title_search' },\n        { label: \"Search by subject...\", field: 'subject_search' }],\n        selectsearch: [{ label: 'Search By Status', field: 'status', values: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }] }],\n        datesearch:[{startdatelabel:\"Start Date\",enddatelabel:\"End Date\",submit:\"Search By Date\",  field:\"publishdate_normal_format\"}],\n        // search: [{ label: \"Search By group\", field: '' }]\n      },  \n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n  constructor() {\n\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n\n@Component({\n  selector: 'lib-add-edit-sender',\n  templateUrl: './add-edit-sender.component.html',\n  styleUrls: ['./add-edit-sender.component.css']\n})\nexport class AddEditSenderComponent implements OnInit {\n\n\n  // ===============Declarations================\n  senderForm: FormGroup;\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add Sender\"\n  configData: any;\n  successMessage: any = \"Submitted Successfully!!!\";\n  dialogRef: any;\n  // ===========================================\n  constructor(private formBuilder: FormBuilder, private newsService: NewsTitleService\n    , private router: Router, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    //generating the form\n    this.generateForm();\n\n\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"Edit Sender's Information\";\n        break;\n    }\n    // --------------------------------------------------------------------------\n  }\n\n\n\n  // ===============generate form====================\n  generateForm() {\n    this.senderForm = this.formBuilder.group({\n      name: ['',[Validators.required]],\n      email: ['',[Validators.required,Validators.email]]\n    });\n  }\n  // ================================================\n\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal3, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n\n /** blur function **/\n inputBlur(val: any) {\n  this.senderForm.controls[val].markAsUntouched();\n}\n\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.senderForm.patchValue({\n      name: defaultValue.name,\n      email: defaultValue.email\n    });\n\n  }\n  // ==================================================================================================\n\n\n\n\n  // =======================On SUBMIT======================\n  onSubmit() {\n\n      /** marking as untouched **/\n      for (let x in this.senderForm.controls) {\n        this.senderForm.controls[x].markAsTouched();\n      }\n\n    /* stop here if form is invalid */\n    if (this.senderForm.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.senderForm.value, this.configData.condition),\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          \n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // ======================================================\n}\n\n\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal3.html',\n})\nexport class Modal3 {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal3>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit, Input } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'lib-listing-sender',\n  templateUrl: './listing-sender.component.html',\n  styleUrls: ['./listing-sender.component.css']\n})\nexport class ListingSenderComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public senderConfigForm2: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n\n\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n\n    this.senderConfigForm2 = {\n      apiUrl: receivedData.apiUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\"],\n      listArray_modify_header: { \"name\": \"Sender's Name\", \"email\": \"Sender's Email\", \"date\": \"Date\" },\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      detail_header:['_id']\n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n  constructor(private cookieService: CookieService) {\n    \n  }\n\n  ngOnInit() {\n  }\n\n}\n\n\n","import { Component, OnInit,Input ,Inject} from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-add-edit-testemaillib',\n  templateUrl: './add-edit-testemaillib.component.html',\n  styleUrls: ['./add-edit-testemaillib.component.css']\n})\nexport class AddEditTestemaillibComponent implements OnInit {\n\n\n  // ===============Declarations================\n  senderFormTest: FormGroup;\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add Sender(Test)\"\n  configData: any;\n  successMessage: any = \"Submitted Successfully!!!\";\n  dialogRef: any;\n  // ===========================================\n  constructor(private formBuilder: FormBuilder, private newsService: NewsTitleService\n    , private router: Router, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    //generating the form\n    this.generateForm();\n\n\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"Edit sender's Information\";\n        break;\n    }\n    // --------------------------------------------------------------------------\n  }\n\n\n\n  // ===============generate form====================\n  generateForm() {\n    this.senderFormTest = this.formBuilder.group({\n      name: ['',[Validators.required]],\n      email: ['',[Validators.required,Validators.email]]\n    });\n  }\n  // ================================================\n\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal4, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n\n\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.senderFormTest.patchValue({\n      name: defaultValue.name,\n      email: defaultValue.email\n    });\n\n  }\n  // ==================================================================================================\n\n\n  /** blur function **/\n  inputBlur(val: any) {\n    this.senderFormTest.controls[val].markAsUntouched();\n  }\n\n\n\n  // =======================On SUBMIT======================\n  onSubmit() {\n\n     /** marking as untouched **/\n     for (let x in this.senderFormTest.controls) {\n      this.senderFormTest.controls[x].markAsTouched();\n    }\n    \n    /* stop here if form is invalid */\n    if (this.senderFormTest.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.senderFormTest.value, this.configData.condition),\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          console.log(response.status);\n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // ======================================================\n}\n\n\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal4.html',\n})\nexport class Modal4 {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal4>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit ,Input} from '@angular/core';\n\n@Component({\n  selector: 'lib-listing-testemaillib',\n  templateUrl: './listing-testemaillib.component.html',\n  styleUrls: ['./listing-testemaillib.component.css']\n})\nexport class ListingTestemaillibComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public senderConfigForm: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n  \n  \n  \n  \n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n   \n    this.senderConfigForm = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\"],\n      listArray_modify_header: { \"name\": \"Sender's Name\", \"email\":\"Sender's Email\"},\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      detail_header:['_id']\n    \n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n  \n  constructor() { }\n  \n  ngOnInit() {\n  }\n  \n  }\n  \n  \n  ","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { NewsTitleComponent, modalData } from './news-title.component';\nimport { DemoMaterialModule } from './material-module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { ApiService } from './api.service';\nimport { ListingNewsletterComponent } from './Components/listing-newsletter/listing-newsletter.component';\nimport { ListingModule } from 'listing-angular7';\nimport { AddEditSubcategoryComponent,Modal } from './Components/subscriptioncategory/add-edit-subcategory/add-edit-subcategory.component';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ListingSubcategoryComponent } from './Components/subscriptioncategory/listing-subcategory/listing-subcategory.component';\nimport { AddEditSubscriptiongroupComponent,Modal2 } from './Components/add-edit-subscriptiongroup/add-edit-subscriptiongroup.component';\nimport { AddEditNewsletterlibComponent , PREVIEW} from './Components/newsletter/add-edit-newsletterlib/add-edit-newsletterlib.component';\nimport { ListingNewsletterlibComponent } from './Components/newsletter/listing-newsletterlib/listing-newsletterlib.component';\nimport { AddEditSenderComponent , Modal3} from './Components/senderslist/add-edit-sender/add-edit-sender.component';\nimport { ListingSenderComponent } from './Components/senderslist/listing-sender/listing-sender.component';\nimport { AddEditTestemaillibComponent,Modal4 } from './Components/testemails/add-edit-testemaillib/add-edit-testemaillib.component';\nimport { ListingTestemaillibComponent } from './Components/testemails/listing-testemaillib/listing-testemaillib.component';\nimport { AmazingTimePickerModule } from 'amazing-time-picker';\n// import {NgxMaterialTimepickerModule} from 'ngx-material-timepicker';\nimport { DatePipe} from '@angular/common';\nimport { CKEditorModule } from 'ngx-ckeditor';\nimport { MomentModule } from 'ngx-moment';\n\n\n@NgModule({\n  declarations: [Modal4,Modal2,Modal,NewsTitleComponent, modalData, ListingNewsletterComponent, \n    AddEditSubcategoryComponent, ListingSubcategoryComponent, AddEditSubscriptiongroupComponent, \n    AddEditNewsletterlibComponent, ListingNewsletterlibComponent, AddEditSenderComponent, \n    ListingSenderComponent,Modal3, AddEditTestemaillibComponent, ListingTestemaillibComponent,PREVIEW\n    ],\n  imports: [\n    DemoMaterialModule,\n    ReactiveFormsModule,FormsModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    ListingModule,\n    RouterModule,\n    HttpClientModule,\n    AmazingTimePickerModule,\n    // NgxMaterialTimepickerModule,\n    CKEditorModule,\n    MomentModule\n    \n  ],\n  exports: [AddEditSenderComponent,AddEditNewsletterlibComponent,AddEditSubscriptiongroupComponent,\n    Modal,NewsTitleComponent,ListingNewsletterComponent,AddEditSubcategoryComponent,\n    ListingSubcategoryComponent,AddEditTestemaillibComponent,ListingTestemaillibComponent,ListingNewsletterlibComponent,\n    ListingSenderComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [ApiService,DatePipe],\n  entryComponents:[PREVIEW,Modal4,Modal3,NewsTitleComponent, modalData,Modal,Modal2]\n})\nexport class NewsTitleModule { }\n\n\n\n"]}