{"version":3,"sources":["ng://news-title-lib-influxiq/lib/news-title.service.ts","ng://news-title-lib-influxiq/lib/api.service.ts","ng://news-title-lib-influxiq/lib/news-title.component.ts","ng://news-title-lib-influxiq/lib/material-module.ts","ng://news-title-lib-influxiq/lib/Components/listing-newsletter/listing-newsletter.component.ts","ng://news-title-lib-influxiq/lib/Components/subscriptioncategory/add-edit-subcategory/add-edit-subcategory.component.ts","ng://news-title-lib-influxiq/lib/Components/subscriptioncategory/listing-subcategory/listing-subcategory.component.ts","ng://news-title-lib-influxiq/lib/Components/add-edit-subscriptiongroup/add-edit-subscriptiongroup.component.ts","ng://news-title-lib-influxiq/lib/Components/newsletter/add-edit-newsletterlib/add-edit-newsletterlib.component.ts","ng://news-title-lib-influxiq/lib/Components/newsletter/listing-newsletterlib/listing-newsletterlib.component.ts","ng://news-title-lib-influxiq/lib/Components/senderslist/add-edit-sender/add-edit-sender.component.ts","ng://news-title-lib-influxiq/lib/Components/senderslist/listing-sender/listing-sender.component.ts","ng://news-title-lib-influxiq/lib/Components/testemails/add-edit-testemaillib/add-edit-testemaillib.component.ts","ng://news-title-lib-influxiq/lib/Components/testemails/listing-testemaillib/listing-testemaillib.component.ts","ng://news-title-lib-influxiq/lib/news-title.module.ts"],"names":["NewsTitleService","prototype","isTokenExpired","addData","endpoint","requestdata","httpOptions","headers","HttpHeaders","Content-Type","Authorization","this","accesstoken","_http","post","serverUrl","JSON","stringify","pipe","map","res","UpdateData","getData","deleteSingleData","deleteMultipleData","UpdateStatusForSingleData","UpdateStatusForMultipleData","CustomRequest","Injectable","args","providedIn","HttpClient","CookieService","_authHttp","cookieService","progress","uploaderror","get","fileservername","getdata_endpointUrl","ApiService","setServerUrl","value","subjectForServerUrl","next","clearServerUrl","getServerUrl","asObservable","setaddEndpoint","subjectForaddEndpointUrl","clearaddEndpoint","getaddEndpoint","setuploadEndpont","subjectForuploadEndpointUrl","clearuploadEndpoint","getuploadEndpoint","setupdateEndpoint","subjectForupdateEndpointUrl","clearupdateEndpoint","getupdateEndpoint","setdeletesingleEndpoint","subjectFordeletesingleEndpointUrl","cleardeletesingleEndpoint","getdeletesingleEndpoint","setupdatestatus_singleEndpoint","subjectForupdatestatusSingleEndpointUrl","clearupdatestatus_singleEndpoint","getupdatestatus_singleEndpoint","setgetdataEndpoint","subjectForGetdataEndpointUrl","cleargetdataEndpoint","getdataEndpoint","console","log","addendpointUrl","uploadFile","uploadEndpointUrl","updateendpointUrl","addLogin","forgetPassword","deletesingle_endpointUrl","updatestatus_single_endpointUrl","_this","Subject","subscriptionServer","subscribe","message","result","subscriptionaddEndpoint","subscriptionuploadEndpoint","subscriptionupdateEndpoint","subscriptiondeletesingleEndpoint","subscriptionupdatestatusSingleEndpoint","subscriptionGetdataEndpoint","NewsTitleComponent","Object","defineProperty","formTitleVal","formTitleValue","v","logoValue","serverUrlVal","serverUrlValue","addEndpointVal","addEndpointValue","ngOnInit","setTimeout","openDialog","dialog","open","modalData","data","afterClosed","Component","selector","template","FormBuilder","MatSnackBar","MatDialog","Input","ViewChild","FormGroupDirective","fb","apiService","_snackBar","durationInSeconds","onNoClick","dialogRef","close","newsLatterFormSubmit","key","newsLatterForm","controls","markAsTouched","valid","source","responce","status","formDirective","resetForm","inputUntouched","val","markAsUntouched","MatDialogRef","Inject","MAT_DIALOG_DATA","group","fullname","Validators","required","phone","company","email","compose","pattern","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","ListingNewsletterComponent","receivedData","newsLetterListConfig","apiUrl","apiBaseUrl","listEndPoint","datasource","tableName","listArray_skip","listArray_modify_header","admintablenameTableName","statusarr","name","updateurl","updateEndpoint","editUrl","jwtToken","deleteEndPoint","view","search_settings","textsearch","label","field","detail_header","loader","AddEditSubcategoryComponent","getConfig","configData","generateForm","action","buttonText","successMessage","setDefaultValue","defaultData","header_name","x","Modal","width","msg","defaultValue","subscriptionCatForm","patchValue","priority","inputBlur","formBuilder","onSubmit","invalid","parseInt","postData","assign","condition","newsletterService","response","router","navigate","callBack","alert","error","Router","ListingSubcategoryComponent","SubsCatListConfig","date_added","selectsearch","values","pendingmodelapplicationarray_detail_datatype","fileurl","AddEditSubscriptiongroupComponent","getGroup","subGroupForm","Modal2","sourceobj","newsService","token","endpoint2","group_array","moment","moment_","AddEditNewsletterlibComponent","weekdays","time","datepipe","transform","Date","getGroupName","getSenderAddress","cookieValue","getAll","newsForm","cookiemail","days_json","newsfrequency","frequency_flag","days_of_weeks","day","isSelected","openSnackBar","snackBar","duration","atp","afterClose","PREVIEW","share_group","share_with_group","automatic_newsletter","automatic_newsletter_to","senders_address","senders_address_to","reply_address","reply_address_to","preview_all","group_table","group_name_array","sender_table","sender_name_array","newstitle","newssubject","share_news","publishdate_normal_format","senderaddress","publishdate","settime","content","sendnews","timeofday","timezone","startdate","enddate","reply","tmp_date","date","getDays","day_var","days_array","false_count","i","length","push","format","unix","x_1","AmazingTimePickerService","DatePipe","editorconfig","Editor","ClassicEditor","editorConfig","placeholder","model","editorData","extraAllowedContent","ListingNewsletterlibComponent","newsConfigForm","title","subject","userGroup","date added","date_search_source","date_search_endpoint","datesearch","startdatelabel","enddatelabel","submit","AddEditSenderComponent","senderForm","Modal3","ListingSenderComponent","senderConfigForm2","AddEditTestemaillibComponent","senderFormTest","Modal4","ListingTestemaillibComponent","senderConfigForm","NewsTitleModule","declarations","imports","ReactiveFormsModule","FormsModule","BrowserAnimationsModule","CommonModule","ListingModule","RouterModule","HttpClientModule","AmazingTimePickerModule","CKEditorModule","MomentModule","schemas","CUSTOM_ELEMENTS_SCHEMA","providers","entryComponents"],"mappings":"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","sourcesContent":["\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpClientModule } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsTitleService {\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken: any = this.cookieService.get('jwtToken');;\n  public fileservername: any = [];\n  public serverUrl: any = '';\n  public addendpointUrl: any;\n  public updateendpointUrl: any;\n  public deletesingle_endpointUrl: any;\n  public updatestatus_single_endpointUrl: any;\n  public deletemultiple_endpointUrl: any;\n  public updatestatus_multiple_endpointUrl: any;\n  public getdata_endpointUrl: any = 'datalist';\n\n  constructor(private _http: HttpClient, private _authHttp: HttpClient,private cookieService : CookieService) { }\n\n  isTokenExpired() {\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint + 'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  CustomRequest(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n}\n","import { ElementRef, EventEmitter, Injectable, Input, ViewChild } from '@angular/core';\nimport { switchMap, map, takeWhile } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n// for setting observables to get serverurl and endpointurl from app\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport{CookieService} from 'ngx-cookie-service';\n\n\n@Injectable({   \n  providedIn: 'root'\n})\nexport class ApiService {\n\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken:any=this.cookieService.get('jwtToken');\n  // public accesstoken:any='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJleHAiOjE1NjgzNTgyMTAsImlhdCI6MTU2ODI3MTgxMH0.2ltvxVKwfX1uwMOwQ2Zzgp1K2jiaCDj051Wyho0Iw-Q';\n  fileservername: any = [];\n  serverUrl: any;\n  addendpointUrl: any;\n  uploadEndpointUrl:any; //souresh\n  updateendpointUrl: any;\n  deletesingle_endpointUrl: any;\n  updatestatus_single_endpointUrl: any;\n  deletemultiple_endpointUrl: any;\n  updatestatus_multiple_endpointUrl: any;\n  getdata_endpointUrl: any;\n  private subjectForServerUrl = new Subject<any>();\n  private subjectForaddEndpointUrl = new Subject<any>();\n  private subjectForuploadEndpointUrl = new Subject<any>();  //added by souresh\n  private subjectForupdateEndpointUrl = new Subject<any>();\n  private subjectFordeletesingleEndpointUrl = new Subject<any>();\n  private subjectForupdatestatusSingleEndpointUrl = new Subject<any>();\n  private subjectForGetdataEndpointUrl = new Subject<any>();\n  public subscriptionServer: Subscription;\n  public subscriptionaddEndpoint: Subscription;\n  public subscriptionuploadEndpoint: Subscription;   //added by souresh\n  public subscriptionupdateEndpoint: Subscription;\n  public subscriptiondeletesingleEndpoint: Subscription;\n  public subscriptionupdatestatusSingleEndpoint: Subscription;\n  public subscriptionGetdataEndpoint: Subscription;\n\n  constructor(private _http: HttpClient,\n    private _authHttp: HttpClient,private cookieService :CookieService) {\n    this.subscriptionServer = this.getServerUrl().subscribe(message => {\n     let result: any;\n      result = message;\n      if (result != null) {\n        this.serverUrl = result;\n      } else {\n        this.serverUrl = null;\n      }\n    });\n    this.subscriptionaddEndpoint = this.getaddEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.addendpointUrl = result;\n      } else {\n        this.addendpointUrl = null;\n      }\n    });\n    /*********added by souresh***********/\n    this.subscriptionuploadEndpoint=this.getuploadEndpoint().subscribe(message=>{\n      let result:any;\n      result=message;\n        if(result!=null){\n          this.uploadEndpointUrl = result;\n        } else{\n          this.uploadEndpointUrl = null;\n        }\n    })\n    /************souresh end here**************/\n    this.subscriptionupdateEndpoint = this.getupdateEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updateendpointUrl = result;\n      } else {\n        this.updateendpointUrl = null;\n      }\n    });\n    this.subscriptiondeletesingleEndpoint = this.getdeletesingleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.deletesingle_endpointUrl = result;\n      } else {\n        this.deletesingle_endpointUrl = null;\n      }\n    });\n    this.subscriptionupdatestatusSingleEndpoint = this.getupdatestatus_singleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updatestatus_single_endpointUrl = result;\n      } else {\n        this.updatestatus_single_endpointUrl = null;\n      }\n    });\n    this.subscriptionGetdataEndpoint = this.getdataEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.getdata_endpointUrl = result;\n      } else {\n        this.getdata_endpointUrl = null;\n      }\n    });\n\n    \n  }\n\n  setServerUrl(value: any) {\n    this.subjectForServerUrl.next(value);\n  }\n  public clearServerUrl() {\n    this.subjectForServerUrl.next(null);\n  }\n  public getServerUrl(): Observable<any> {\n    return this.subjectForServerUrl.asObservable();\n  }\n\n  setaddEndpoint(value: any) {\n    this.subjectForaddEndpointUrl.next(value);\n  }\n  public clearaddEndpoint() {\n    this.subjectForaddEndpointUrl.next(null);\n  }\n  public getaddEndpoint(): Observable<any> {\n    return this.subjectForaddEndpointUrl.asObservable();\n  }\n/*****added by souresh******/\n  setuploadEndpont(value:any){\n    this.subjectForuploadEndpointUrl.next(value);\n  }\n  public clearuploadEndpoint(){\n    this.subjectForuploadEndpointUrl.next(null);\n  }\n  public getuploadEndpoint(): Observable <any> {\n    return this.subjectForuploadEndpointUrl.asObservable();\n  }\n   /********souresh end here********/\n\n\n  setupdateEndpoint(value: any) {\n    this.subjectForupdateEndpointUrl.next(value);\n  }\n  public clearupdateEndpoint() {\n    this.subjectForupdateEndpointUrl.next(null);\n  }\n  public getupdateEndpoint(): Observable<any> {\n    return this.subjectForupdateEndpointUrl.asObservable();\n  }\n\n  setdeletesingleEndpoint(value: any) {\n    this.subjectFordeletesingleEndpointUrl.next(value);\n  }\n  public cleardeletesingleEndpoint() {\n    this.subjectFordeletesingleEndpointUrl.next(null);\n  }\n  public getdeletesingleEndpoint(): Observable<any> {\n    return this.subjectFordeletesingleEndpointUrl.asObservable();\n  }\n\n  setupdatestatus_singleEndpoint(value: any) {\n    this.subjectForupdatestatusSingleEndpointUrl.next(value);\n  }\n  public clearupdatestatus_singleEndpoint() {\n    this.subjectForupdatestatusSingleEndpointUrl.next(null);\n  }\n  public getupdatestatus_singleEndpoint(): Observable<any> {\n    return this.subjectForupdatestatusSingleEndpointUrl.asObservable();\n  }\n\n  setgetdataEndpoint(value: any) {\n    this.subjectForGetdataEndpointUrl.next(value);\n  }\n  public cleargetdataEndpoint() {\n    this.subjectForGetdataEndpointUrl.next(null);\n  }\n  public getdataEndpoint(): Observable<any> {\n    return this.subjectForGetdataEndpointUrl.asObservable();\n  }\n\n\n\n  isTokenExpired() {\n\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(requestdata: any) {\n    console.log('in adddata apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written Authorization(temp)\n      })\n    };\n\n    console.log('httpoptions',httpOptions,this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*******added by souresh************/\n  uploadFile(requestdata:any){\n    const httpOptions={\n        headers: new HttpHeaders({\n          'Content-Type':'application/json',\n          'Authorization':this.accesstoken          //hard code written Authorization(temp)\n        })\n    };\n    var result=this._http.post(this.serverUrl + this.uploadEndpointUrl,JSON.stringify(requestdata),httpOptions).pipe(map(res=>res));\n    return result;\n  }\n  /*******souresh end here********/\n  UpdateData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written Authorization(temp)\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updateendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.getdata_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n/*************** Added by himadri start here ***************/ \n  addLogin(requestdata: any) {\n    console.log('in addLogin apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n        // 'Authorization': this.accesstoken          //hard code written Authorization(temp)\n      })\n    };\n\n    console.log(this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*************** Added by himadri end here ***************/ \n\n/*************** Added by himadri start here ***************/ \nforgetPassword(requestdata: any) {\n  console.log('in forgetPassword apiservice');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': this.accesstoken          //hard code written Authorization(temp)\n    })\n  };\n\n  console.log(this.serverUrl,requestdata);\n  var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n  return result;\n}\n/*************** Added by himadri end here ***************/ \n\n\n  deleteSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  CustomRequest(requestdata: any, endpoint:any ) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl +endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Component, OnInit, Inject, Input, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { ApiService } from './api.service';\nimport { MatSnackBar, MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\n\nexport interface DialogData {\n  formTitleValue: any;\n  serverUrlValue: any;\n  addEndpointValue: any;\n  logoValue:any;\n}\n\n\n\n@Component({\n  selector: 'lib-newsTitle',\n  // templateUrl:'./news-title.component.html',\n  template: ``,\n  styleUrls: ['./news-title.component.css']\n})\nexport class NewsTitleComponent implements OnInit {\n  public formTitleValue: any = '';\n  public serverUrlValue: any = '';\n  public addEndpointValue: any = '';\n  public logoValue: any='';\n\n  @Input()\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = formTitleVal;\n  }\n\n  @Input()\n  public set logo(v : string) {\n    this.logoValue = v;\n  }\n  \n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    // console.log(\"======================\",this.serverUrlValue);\n\n  }\n  @Input()        // set the endpoint And source\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n    // console.log(this.addEndpointValue)\n  }\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n\n  public durationInSeconds: any = 10;\n\n  public newsLatterForm: FormGroup;\n  constructor(public fb: FormBuilder, public apiService: ApiService, private _snackBar: MatSnackBar, public dialog: MatDialog) {\n    // this.newsLatterForm = this.fb.group({\n    //   fullname: ['', Validators.required],\n    //   phone: ['', Validators.required],\n    //   company: ['', Validators.required],\n    //   email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])]\n    // });\n\n\n    // setInterval(()=> {\n    //   this.openSnackBar(); },4000); \n    \n  }\n\n  // openSnackBar() {\n  //   this._snackBar.openFromComponent(NewsTitleComponent, {\n  //     duration: this.durationInSeconds * 1000,\n  //   });\n  // }\n\n\n  ngOnInit() {\n    \n    setTimeout(() => {\n      this.openDialog();      \n    }, 500);\n   \n    \n  }\n\n  // newsLatterFormSubmit() {\n  //   for (const key in this.newsLatterForm.controls) {\n  //     this.newsLatterForm.controls[key].markAsTouched();\n  //   }\n  //   if (this.newsLatterForm.valid) {\n  //     console.log(this.newsLatterForm.value);\n  //     let data: any = {\n  //       'data': this.newsLatterForm.value,\n  //       \"source\": this.addEndpointValue.source\n  //     };\n  //     this.apiService.addData(data).subscribe((responce) => {\n  //       console.log(responce);\n  //       let result: any = {};\n  //       result = responce;\n  //       if (result.status == \"success\") {\n  //         this.formDirective.resetForm();\n  //       }\n  //     })\n  //   }\n\n  // }\n\n  // inputUntouched(val: any) {\n  //   console.log('ok----');\n  //   this.newsLatterForm.controls[val].markAsUntouched();\n  // }\n\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(modalData, {\n      // width: '250px',\n      data: {\n\n        addEndpointValue: this.addEndpointValue,\n        serverUrlValue: this.serverUrlValue,\n        formTitleValue:this.formTitleValue,\n        logoValue:this.logoValue\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log('The dialog was closed');\n      // console.log(result);\n    });\n  }\n\n\n\n\n}\n\n\n@Component({\n  selector: 'modalData',\n  templateUrl:'./news-title.component.html',\n  // templateUrl: './modale.html',\n  styleUrls: ['./news-title.component.css']\n})\nexport class modalData implements OnInit {\n\n  public newsLatterForm: FormGroup;\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  constructor(\n    public dialogRef: MatDialogRef<modalData>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    public apiService: ApiService, public fb: FormBuilder) {\n\n      // console.log(data);\n    this.newsLatterForm = this.fb.group({\n      fullname: ['', Validators.required],\n      group: [0,],\n      phone: ['', Validators.required],\n      company: ['', Validators.required],\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])]\n    });\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.data.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(\"+++++++++++++++\",this.data.serverUrlValue);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.data.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  newsLatterFormSubmit() {\n    console.log(this.newsLatterForm.value);\n    for (const key in this.newsLatterForm.controls) {\n      this.newsLatterForm.controls[key].markAsTouched();\n    }\n    if (this.newsLatterForm.valid) {\n      console.log(this.newsLatterForm.value);\n      let data: any = {\n        'data': this.newsLatterForm.value,\n        \"source\": this.data.addEndpointValue.source\n      };\n      this.apiService.addData(data).subscribe((responce) => {\n        console.log(responce);\n        let result: any = {};\n        result = responce;\n        if (result.status == \"success\") {\n          this.formDirective.resetForm();\n        }\n      })\n    }\n  }\n\n\n\n  inputUntouched(val: any) {\n    // console.log('ok---?-');\n    this.newsLatterForm.controls[val].markAsUntouched();\n  }\n\n}\n\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n Use of this source code is governed by an MIT-style license that\n can be found in the LICENSE file at http://angular.io/license */\n","import { Component, OnInit, Input } from '@angular/core';\n\n\n@Component({\n  selector: 'lib-listing-newsletter',\n  templateUrl: './listing-newsletter.component.html',\n  styleUrls: ['./listing-newsletter.component.css']\n})\nexport class ListingNewsletterComponent implements OnInit {\n\n  // ========================================declarations=====================================\n  public newsLetterListConfig: any;\n  public loader: boolean = true;\n  // =========================================================================================\n\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n    this.newsLetterListConfig = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\", \"image\",\"fullname_search\"],\n      listArray_modify_header: { \"fullname\": \"Full Name\", \"phone\": \"Phone\", \"company\": \"Company\", \"email\": \"Email\",\"group\":\"Group\" },\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      search_settings: {\n        textsearch: [{ label: \"Search by customer name...\", field: 'fullname_search' },{ label: \"Search by email...\", field: 'email' }],\n       \n      },\n      detail_header:['_id','fullname_search']\n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-add-edit-subcategory',\n  templateUrl: './add-edit-subcategory.component.html',\n  styleUrls: ['./add-edit-subcategory.component.css']\n})\nexport class AddEditSubcategoryComponent implements OnInit {\n\n  // ====================declarations==================\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add Subscription Category\"\n  subscriptionCatForm: FormGroup;\n  configData: any;\n  successMessage: any = \"Submitted Successfully!!!\"\n  dialogRef: any;\n  // ==================================================\n\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n  constructor(private formBuilder: FormBuilder, private newsletterService: NewsTitleService,\n    private router: Router ,  public dialog: MatDialog) { }\n\n  ngOnInit() {\n    //generating the form\n    this.generateForm();\n\n\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"EDIT\";\n        break;\n    }\n    // --------------------------------------------------------------------------\n  }\n\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.subscriptionCatForm.patchValue({\n      name: defaultValue.name,\n      priority: defaultValue.priority,\n      status: defaultValue.status,\n\n    });\n\n  }\n  // ==================================================================================================\n\n\n\n  /** blur function **/\n  inputBlur(val: any) {\n    this.subscriptionCatForm.controls[val].markAsUntouched();\n  }\n\n\n  // ======================form generation=====================\n  generateForm() {\n    this.subscriptionCatForm = this.formBuilder.group({\n      name: ['',Validators.required],\n      priority: ['',Validators.required],\n      status: []\n    });\n  }\n  // ==========================================================\n\n\n  // =========================SUBMIT FUNCTION======================\n  onSubmit() {\n\n     /** marking as untouched **/\n     for (let x in this.subscriptionCatForm.controls) {\n      this.subscriptionCatForm.controls[x].markAsTouched();\n    }\n\n\n    /* stop here if form is invalid */\n    if (this.subscriptionCatForm.invalid) {\n      return;\n    } else {\n      if (this.subscriptionCatForm.value.status) {\n        this.subscriptionCatForm.value.status = parseInt(\"1\");\n      } else {\n        this.subscriptionCatForm.value.status = parseInt(\"0\");;\n      }\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.subscriptionCatForm.value, this.configData.condition)\n      };\n      this.newsletterService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          \n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // ==============================================================\n}\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal.html',\n})\nexport class Modal {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit ,Input} from '@angular/core';\n\n@Component({\n  selector: 'lib-listing-subcategory',\n  templateUrl: './listing-subcategory.component.html',\n  styleUrls: ['./listing-subcategory.component.css']\n})\nexport class ListingSubcategoryComponent implements OnInit {\n// ==============================================declaration============================================\npublic SubsCatListConfig: any;\npublic loader: boolean = true;\n// =====================================================================================================\n\n\n\n\n// ================================================Input For Lib Listing================================\n@Input()\nset config(receivedData: any) {\n \n  this.SubsCatListConfig = {\n    apiUrl: receivedData.apiBaseUrl,\n    listEndPoint: receivedData.listEndPoint,\n    datasource: receivedData.datasource,\n    tableName: receivedData.tableName,\n    listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\",\"image\",\"name_search\"],\n    listArray_modify_header: { \"name\": \"Name\", \"priority\": \"Priority\", \"status\": \"Status\" ,\"date_added\":\"Date\"},\n    admintablenameTableName: \"admin\",\n    statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n    updateurl: receivedData.updateEndpoint,\n    editUrl: receivedData.editUrl,\n    jwtToken: receivedData.jwtToken,\n    deleteEndPoint: receivedData.deleteEndPoint,\n    view: receivedData.view,\n    search_settings:{\n      textsearch: [{ label: \"name...\", field: 'name_search' }],\n      selectsearch: [{ label: 'Search By Status', field: 'status', values: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }] }],\n    },\n     /*Showing Image in the Modal*/\n     pendingmodelapplicationarray_detail_datatype: [{\n      key: \"image\",\n      value: 'image',\n      fileurl: 'https://s3.us-east-2.amazonaws.com/crmfiles.influxhostserver/testimonial/'             // Image path \n    }],\n    detail_header:['_id','name_search']\n  }\n  this.loader = false;\n}\n// ====================================================================================================\n\nconstructor() { }\n\nngOnInit() {\n}\n\n}\n\n\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder ,Validators} from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\nimport { NewsTitleService } from '../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-add-edit-subscriptiongroup',\n  templateUrl: './add-edit-subscriptiongroup.component.html',\n  styleUrls: ['./add-edit-subscriptiongroup.component.css']\n})\nexport class AddEditSubscriptiongroupComponent implements OnInit {\n\n\n  // =======================declaratiosn=====================\n  subGroupForm: FormGroup;\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add a group to subscriptions\";\n  configData: any;\n  group_array: any = [];\n  dialogRef: any;\n  successMessage: any = \"Group Added!!!\"\n  // ========================================================\n\n\n  constructor(private formBuilder: FormBuilder, private cookieService: CookieService,\n    private newsService: NewsTitleService, private router: Router, public dialog: MatDialog) { }\n\n  ngOnInit() {\n\n    //generating the form\n    this.generateForm();\n\n    //getting the group\n    this.getGroup();\n\n    //Switch Case starts here\n\n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n        this.buttonText = \"SUBMIT\";\n        this.header_name = \"Add a Group\";\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"Change/Remove Group\";\n        break;\n    }\n\n\n  }\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n  // =====================generate form==============\n  generateForm() {\n    this.subGroupForm = this.formBuilder.group({\n      fullname: ['',[Validators.required]],\n      phone: ['',[Validators.required]],\n      email: ['',[Validators.required,Validators.email]],\n      company: ['',[Validators.required]],\n      group: []\n    });\n  }\n  // ================================================\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.subGroupForm.patchValue({\n      fullname: defaultValue.fullname,\n      phone: defaultValue.phone,\n      email: defaultValue.email,\n      company: defaultValue.company,\n      group: defaultValue.group\n    });\n\n  }\n  // ==================================================================================================\n\n\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal2, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n\n\n\n   /** blur function **/\n   inputBlur(val: any) {\n    this.subGroupForm.controls[val].markAsUntouched();\n  }\n\n\n\n  // ==========================================SUBMIT=================================================\n\n\n  onSubmit() {\n\n\n     /** marking as untouched **/\n     for (let x in this.subGroupForm.controls) {\n      this.subGroupForm.controls[x].markAsTouched();\n    }\n    if (this.subGroupForm.value.group == 0)\n      this.successMessage = \"Removed Group!!!\";    \n    /* stop here if form is invalid */\n    if (this.subGroupForm.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.subGroupForm.value, this.configData.condition),\n        \"sourceobj\": [\"group\"]\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n\n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // =================================================================================================\n\n  //Getting the parent category\n  getGroup() {\n    let postData: any = {\n      source: this.configData.group,\n      token: this.cookieService.get('jwtToken')\n\n    };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', postData).subscribe((response: any) => {\n      this.group_array = response.res;\n    })\n  }\n\n\n}\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal2.html',\n})\nexport class Modal2 {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal2>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { AmazingTimePickerService } from 'amazing-time-picker';\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { DatePipe } from '@angular/common';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FormGroup, FormControl, FormArray, FormBuilder, Validators } from \"@angular/forms\";\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n  share_group: string;\n  automatic_newsletter: string;\n  reply_address: string;\n  senders_address: string;\n}\n\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-add-edit-newsletterlib',\n  templateUrl: './add-edit-newsletterlib.component.html',\n  styleUrls: ['./add-edit-newsletterlib.component.css'],\n})\nexport class AddEditNewsletterlibComponent implements OnInit {\n\n\n  // =================declaration==================\n  public header_name: any = \"Newsletter\"\n  public buttonText: any = \"SAVE\";\n  public group_name_array: any = [];\n  public sender_name_array: any = [];\n  public configData: any;\n  public time: any;\n  public cookieValue: any;\n  public newsForm: FormGroup;\n  public frequency_flag: boolean = false;\n  public days_array: any = [];\n  public editorconfig: any = {};\n  days_json: any;\n  public message: string;\n  public tmp_date: any;\n  public false_count: number;\n  public dialogRef: any;\n  public share_with_group: any;\n  public automatic_newsletter_to: any;\n  public reply_address_to: any\n  public senders_address_to: any;\n\n\n  // ==============================================\n\n  /**ckeditor start here*/\n  public Editor = ClassicEditor;  //for ckeditor\n  editorConfig = {\n    placeholder: 'Content:',\n  };\n  public model = {\n    editorData: ''\n  };\n  /**ckeditor end here*/\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n\n\n  constructor(private atp: AmazingTimePickerService, private newsService: NewsTitleService,\n    public datepipe: DatePipe, public cookieService: CookieService, private formBuilder: FormBuilder,\n    public router: Router, private snackBar: MatSnackBar, public dialog: MatDialog) {\n\n\n\n\n    this.editorconfig.extraAllowedContent = '*[class](*),span;ul;li;table;td;style;*[id];*(*);*{*}';\n\n  }\n\n  // unix_timestamp(t) {\n  //   var d = new Date(t * 1000),\t// Convert the passed timestamp to milliseconds\n  //     yyyy = d.getFullYear(),\n  //     mm = ('0' + (d.getMonth() + 1)).slice(-2),\t// Months are zero based. Add leading 0.\n  //     dd = ('0' + d.getDate()).slice(-2),\t\t\t// Add leading 0.\t\n  //     time;\n\n  //   // ie: 2013-02-18, 8:35 AM\t\n  //   time = mm + \"/\" + dd + \"/\" + yyyy;\n\n  //   return time;\n  // }\n\n  ngOnInit() {\n\n    this.weekdays();\n\n    if (this.configData.action == 'add')\n      this.time = this.datepipe.transform(new Date(), 'H:mm');\n\n\n\n    //Calling the group name\n    this.getGroupName();\n\n    //Get sender's getGroupName\n    this.getSenderAddress();\n\n    //Getting the cookie value\n    this.cookieValue = this.cookieService.getAll();\n\n    //  calling the form generation \n    this.generateForm();\n\n    this.newsForm.value.cookiemail = this.cookieService.get('get_email');\n\n    /*Switch case*/\n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n        this.buttonText = \"SUBMIT\";\n        this.header_name = \"Add a Newsletter\";\n        this.message = \"Newsletter Added Successfully!!!\";\n\n        break;\n      case 'edit':\n        this.days_json = null;\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.time = \"\";\n        this.message = \"Newsletter Information Updated!!!\";\n        if (this.configData.defaultData.newsfrequency == \"daily\")\n          this.frequency_flag = false;\n        else\n          this.frequency_flag = true;\n\n\n        setTimeout(() => {\n\n          this.setDefaultValue(this.configData.defaultData);\n        }, 1000);\n\n        if (this.configData.defaultData.days_of_weeks != null)\n          this.frequency_flag = true;\n\n\n        setTimeout(() => {\n          this.days_json = this.configData.defaultData.days_of_weeks;\n        }, 1000);\n\n        break;\n    }\n\n\n\n  }\n\n\n\n  weekdays() {\n\n    this.days_json = [\n      {\n        \"day\": \"Sunday\",\n        \"value\": 1,\n        isSelected: false\n      },\n      {\n        \"day\": \"Monday\",\n        \"value\": 2,\n        isSelected: false\n      },\n      {\n        \"day\": \"Tuesday\",\n        \"value\": 3,\n        isSelected: false\n      },\n      {\n        \"day\": \"Wednesday\",\n        \"value\": 4,\n        isSelected: false\n      },\n      {\n        \"day\": \"Thursday\",\n        \"value\": 5,\n        isSelected: true\n      },\n      {\n        \"day\": \"Friday\",\n        \"value\": 6,\n        isSelected: false\n      },\n      {\n        \"day\": \"Saturday\",\n        \"value\": 7,\n        isSelected: false\n      }\n    ];\n  }\n\n\n\n\n  /** mat snackbar **/\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n\n  /** opening up the time picker **/\n  open() {\n    const amazingTimePicker = this.atp.open();\n    amazingTimePicker.afterClose().subscribe(time => {\n    });\n  }\n\n\n  /** open Modal **/\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(PREVIEW, {\n      width: '1000px',\n      data: {\n        msg: x,\n        share_group: this.share_with_group,\n        automatic_newsletter: this.automatic_newsletter_to,\n        senders_address: this.senders_address_to,\n        reply_address: this.reply_address_to\n      }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n    });\n  }\n\n\n  /** preview all **/\n  preview_all() {\n    this.openDialog(Object.values(this.newsForm.value));\n  }\n\n\n  /*getting the group name*/\n  getGroupName() {\n    var data: any = { 'source': this.configData.group_table };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', data).subscribe(response => {\n      let result: any;\n      result = response;\n      this.group_name_array = result.res;\n    });\n  }\n\n  /*getting the sender's email*/\n  getSenderAddress() {\n    var data: any = { 'source': this.configData.sender_table };\n    this.newsService.getData(this.configData.endpoint2 + 'datalist', data).subscribe(response => {\n      let result: any;\n      result = response;\n      this.sender_name_array = result.res;\n    });\n  }\n\n\n  //generate form\n  generateForm() {\n    this.newsForm = this.formBuilder.group({\n      newstitle: ['', [Validators.required]],\n      newssubject: ['', [Validators.required]],\n      share_news: [],\n      publishdate_normal_format: [],\n      senderaddress: [],\n      publishdate: ['', [Validators.required]],\n      settime: [this.time],\n      content: ['', [Validators.required]],\n      sendnews: [],\n      newsfrequency: [],\n      days_of_weeks: [],\n      timeofday: [this.time],\n      timezone: [],\n      startdate: ['', [Validators.required]],\n      enddate: ['', [Validators.required]],\n      reply: [],\n      status: [1]\n    });\n\n  }\n\n\n\n  //setting the default value\n  setDefaultValue(defaultValue) {\n    this.tmp_date = defaultValue.publishdate;\n    let date = new Date(this.tmp_date);\n    defaultValue.publishdate = date,\n\n      this.tmp_date = defaultValue.startdate;\n    date = new Date(this.tmp_date);\n    defaultValue.startdate = date,\n\n      this.tmp_date = defaultValue.enddate;\n    date = new Date(this.tmp_date);\n    defaultValue.enddate = date,\n\n    this.newsForm.patchValue({\n      newstitle: defaultValue.newstitle,\n      newssubject: defaultValue.newssubject,\n      share_news: defaultValue.share_news,\n      senderaddress: defaultValue.senderaddress,\n      publishdate: defaultValue.publishdate,\n      settime: defaultValue.settime,\n      content: defaultValue.content,\n      days_of_weeks: defaultValue.days_of_weeks,\n      sendnews: defaultValue.sendnews,\n      newsfrequency: defaultValue.newsfrequency,\n      timeofday: defaultValue.timeofday,\n      timezone: defaultValue.timezone,\n      startdate: defaultValue.startdate,\n      enddate: defaultValue.enddate,\n      reply: defaultValue.reply\n    });\n    // this.share_with_group = defaultValue.share_news;   \n\n  }\n\n\n  /** blur function **/\n  inputBlur(val: any) {\n    this.newsForm.controls[val].markAsUntouched();\n  }\n\n\n  /** marking the checkbox as true **/\n  getDays(day_var: any) {\n    if (day_var.isSelected === true)\n      day_var.isSelected = false;\n    else\n      day_var.isSelected = true;\n  }\n\n  //submit function\n  onSubmit() {\n\n    this.days_array = [];\n    this.false_count = 0;\n    if (this.frequency_flag != false)\n      for (var i = 0; i < this.days_json.length; i++) {\n        if (this.days_json[i].isSelected) {\n          this.days_array.push(this.days_json[i]);\n          this.false_count--;\n        }\n        else\n          this.days_array.push(this.days_json[i]);\n        this.false_count++;\n      }\n\n    if (this.false_count == 7)\n      return;\n\n  \n    if (this.frequency_flag == true)\n      this.newsForm.value.days_of_weeks = this.days_array;\n    else\n      this.newsForm.value.days_of_weeks = null;\n\n\n\n\n    this.newsForm.value.publishdate = moment(this.newsForm.value.publishdate).format('MM/DD/YYYY');\n    this.newsForm.value.startdate = moment(this.newsForm.value.startdate).format('MM/DD/YYYY');\n    this.newsForm.value.enddate = moment(this.newsForm.value.enddate).format('MM/DD/YYYY');\n\n    let x: any = moment(this.newsForm.value.publishdate).unix();\n    this.newsForm.value.publishdate_normal_format = parseInt(x)*1000;\n\n\n\n    /** marking as untouched **/\n    for (let x in this.newsForm.controls) {\n      this.newsForm.controls[x].markAsTouched();\n    }\n\n\n\n    /* stop here if form is invalid */\n    if (this.newsForm.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.newsForm.value, this.configData.condition),\n        \"sourceobj\": [\"share_news\", \"senderaddress\"]\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n\n          this.openSnackBar(this.message, \"OK\");\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n\n\n}\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-preview',\n  templateUrl: 'preview_all_data.html',\n  styleUrls: ['./add-edit-newsletterlib.component.css'],\n})\nexport class PREVIEW {\n\n\n  constructor(\n    public dialogRef: MatDialogRef<PREVIEW>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n\n}\n// ======================================================================================================\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'lib-listing-newsletterlib',\n  templateUrl: './listing-newsletterlib.component.html',\n  styleUrls: ['./listing-newsletterlib.component.css']\n})\nexport class ListingNewsletterlibComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public newsConfigForm: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n\n\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n    this.newsConfigForm = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\",\"title_search\",\"publishdate_normal_format\",\"subject_search\"],\n      listArray_modify_header: {\n        'title': 'Title', 'subject': 'Subject', 'userGroup': 'User Group', 'time': 'Publish Time',\n        'publishdate': 'Publish Date', 'status': 'Status','date added':'Date Added'\n      },\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      detail_header: ['_id','publishdate_normal_format','title_search'],\n      date_search_source:receivedData.view,\n      date_search_endpoint:'datalist',\n      search_settings: {\n        textsearch: [{ label: \"Search by title...\", field: 'title_search' },\n        { label: \"Search by subject...\", field: 'subject_search' }],\n        datesearch:[{startdatelabel:\"Start Date\",enddatelabel:\"End Date\",submit:\"Search By Date\",  field:\"publishdate_normal_format\"}],\n        // search: [{ label: \"Search By group\", field: '' }]\n      },  \n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n  constructor() {\n\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n\n@Component({\n  selector: 'lib-add-edit-sender',\n  templateUrl: './add-edit-sender.component.html',\n  styleUrls: ['./add-edit-sender.component.css']\n})\nexport class AddEditSenderComponent implements OnInit {\n\n\n  // ===============Declarations================\n  senderForm: FormGroup;\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add Sender\"\n  configData: any;\n  successMessage: any = \"Submitted Successfully!!!\";\n  dialogRef: any;\n  // ===========================================\n  constructor(private formBuilder: FormBuilder, private newsService: NewsTitleService\n    , private router: Router, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    //generating the form\n    this.generateForm();\n\n\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"Edit Sender's Information\";\n        break;\n    }\n    // --------------------------------------------------------------------------\n  }\n\n\n\n  // ===============generate form====================\n  generateForm() {\n    this.senderForm = this.formBuilder.group({\n      name: ['',[Validators.required]],\n      email: ['',[Validators.required,Validators.email]]\n    });\n  }\n  // ================================================\n\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal3, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n\n /** blur function **/\n inputBlur(val: any) {\n  this.senderForm.controls[val].markAsUntouched();\n}\n\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.senderForm.patchValue({\n      name: defaultValue.name,\n      email: defaultValue.email\n    });\n\n  }\n  // ==================================================================================================\n\n\n\n\n  // =======================On SUBMIT======================\n  onSubmit() {\n\n      /** marking as untouched **/\n      for (let x in this.senderForm.controls) {\n        this.senderForm.controls[x].markAsTouched();\n      }\n\n    /* stop here if form is invalid */\n    if (this.senderForm.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.senderForm.value, this.configData.condition),\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          \n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // ======================================================\n}\n\n\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal3.html',\n})\nexport class Modal3 {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal3>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit, Input } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'lib-listing-sender',\n  templateUrl: './listing-sender.component.html',\n  styleUrls: ['./listing-sender.component.css']\n})\nexport class ListingSenderComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public senderConfigForm2: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n\n\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n\n    this.senderConfigForm2 = {\n      apiUrl: receivedData.apiUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\"],\n      listArray_modify_header: { \"name\": \"Sender's Name\", \"email\": \"Sender's Email\", \"date\": \"Date\" },\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      detail_header:['_id']\n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n  constructor(private cookieService: CookieService) {\n    \n  }\n\n  ngOnInit() {\n  }\n\n}\n\n\n","import { Component, OnInit,Input ,Inject} from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { NewsTitleService } from '../../../news-title.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-add-edit-testemaillib',\n  templateUrl: './add-edit-testemaillib.component.html',\n  styleUrls: ['./add-edit-testemaillib.component.css']\n})\nexport class AddEditTestemaillibComponent implements OnInit {\n\n\n  // ===============Declarations================\n  senderFormTest: FormGroup;\n  buttonText: any = \"SUBMIT\";\n  header_name: any = \"Add Sender(Test)\"\n  configData: any;\n  successMessage: any = \"Submitted Successfully!!!\";\n  dialogRef: any;\n  // ===========================================\n  constructor(private formBuilder: FormBuilder, private newsService: NewsTitleService\n    , private router: Router, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    //generating the form\n    this.generateForm();\n\n\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated!!!\";\n        this.setDefaultValue(this.configData.defaultData);\n        this.header_name = \"Edit sender's Information\";\n        break;\n    }\n    // --------------------------------------------------------------------------\n  }\n\n\n\n  // ===============generate form====================\n  generateForm() {\n    this.senderFormTest = this.formBuilder.group({\n      name: ['',[Validators.required]],\n      email: ['',[Validators.required,Validators.email]]\n    });\n  }\n  // ================================================\n\n\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal4, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n\n\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.senderFormTest.patchValue({\n      name: defaultValue.name,\n      email: defaultValue.email\n    });\n\n  }\n  // ==================================================================================================\n\n\n  /** blur function **/\n  inputBlur(val: any) {\n    this.senderFormTest.controls[val].markAsUntouched();\n  }\n\n\n\n  // =======================On SUBMIT======================\n  onSubmit() {\n\n     /** marking as untouched **/\n     for (let x in this.senderFormTest.controls) {\n      this.senderFormTest.controls[x].markAsTouched();\n    }\n    \n    /* stop here if form is invalid */\n    if (this.senderFormTest.invalid) {\n      return;\n    } else {\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.senderFormTest.value, this.configData.condition),\n      };\n      this.newsService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          console.log(response.status);\n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // ======================================================\n}\n\n\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal4.html',\n})\nexport class Modal4 {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal4>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import { Component, OnInit ,Input} from '@angular/core';\n\n@Component({\n  selector: 'lib-listing-testemaillib',\n  templateUrl: './listing-testemaillib.component.html',\n  styleUrls: ['./listing-testemaillib.component.css']\n})\nexport class ListingTestemaillibComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public senderConfigForm: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n  \n  \n  \n  \n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n   \n    this.senderConfigForm = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: receivedData.listEndPoint,\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\"],\n      listArray_modify_header: { \"name\": \"Sender's Name\", \"email\":\"Sender's Email\"},\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      detail_header:['_id']\n    \n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n  \n  constructor() { }\n  \n  ngOnInit() {\n  }\n  \n  }\n  \n  \n  ","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { NewsTitleComponent, modalData } from './news-title.component';\nimport { DemoMaterialModule } from './material-module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { ApiService } from './api.service';\nimport { ListingNewsletterComponent } from './Components/listing-newsletter/listing-newsletter.component';\nimport { ListingModule } from 'listing-angular7';\nimport { AddEditSubcategoryComponent,Modal } from './Components/subscriptioncategory/add-edit-subcategory/add-edit-subcategory.component';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ListingSubcategoryComponent } from './Components/subscriptioncategory/listing-subcategory/listing-subcategory.component';\nimport { AddEditSubscriptiongroupComponent,Modal2 } from './Components/add-edit-subscriptiongroup/add-edit-subscriptiongroup.component';\nimport { AddEditNewsletterlibComponent , PREVIEW} from './Components/newsletter/add-edit-newsletterlib/add-edit-newsletterlib.component';\nimport { ListingNewsletterlibComponent } from './Components/newsletter/listing-newsletterlib/listing-newsletterlib.component';\nimport { AddEditSenderComponent , Modal3} from './Components/senderslist/add-edit-sender/add-edit-sender.component';\nimport { ListingSenderComponent } from './Components/senderslist/listing-sender/listing-sender.component';\nimport { AddEditTestemaillibComponent,Modal4 } from './Components/testemails/add-edit-testemaillib/add-edit-testemaillib.component';\nimport { ListingTestemaillibComponent } from './Components/testemails/listing-testemaillib/listing-testemaillib.component';\nimport { AmazingTimePickerModule } from 'amazing-time-picker';\n// import {NgxMaterialTimepickerModule} from 'ngx-material-timepicker';\nimport { DatePipe} from '@angular/common';\nimport { CKEditorModule } from 'ngx-ckeditor';\nimport { MomentModule } from 'ngx-moment';\n\n\n@NgModule({\n  declarations: [Modal4,Modal2,Modal,NewsTitleComponent, modalData, ListingNewsletterComponent, \n    AddEditSubcategoryComponent, ListingSubcategoryComponent, AddEditSubscriptiongroupComponent, \n    AddEditNewsletterlibComponent, ListingNewsletterlibComponent, AddEditSenderComponent, \n    ListingSenderComponent,Modal3, AddEditTestemaillibComponent, ListingTestemaillibComponent,PREVIEW\n    ],\n  imports: [\n    DemoMaterialModule,\n    ReactiveFormsModule,FormsModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    ListingModule,\n    RouterModule,\n    HttpClientModule,\n    AmazingTimePickerModule,\n    // NgxMaterialTimepickerModule,\n    CKEditorModule,\n    MomentModule\n    \n  ],\n  exports: [AddEditSenderComponent,AddEditNewsletterlibComponent,AddEditSubscriptiongroupComponent,\n    Modal,NewsTitleComponent,ListingNewsletterComponent,AddEditSubcategoryComponent,\n    ListingSubcategoryComponent,AddEditTestemaillibComponent,ListingTestemaillibComponent,ListingNewsletterlibComponent,\n    ListingSenderComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [ApiService,DatePipe],\n  entryComponents:[PREVIEW,Modal4,Modal3,NewsTitleComponent, modalData,Modal,Modal2]\n})\nexport class NewsTitleModule { }\n\n\n\n"]}